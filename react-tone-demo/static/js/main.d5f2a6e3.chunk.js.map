{"version":3,"sources":["SampleSoundButton.js","SoundPicker.js","PanningSampleSoundButton.js","GridStrument.js","PanningGridStrument.js","BoundedPanningGridStrument.js","ConfigurableGridStrument.js","index.js"],"names":["SampleSoundButton","props","onLoaded","setState","isLoaded","onStop","isPlaying","handleClick","event","StartTone","preventDefault","toggleSound","handleKeyDown","watchedKeys","indexOf","key","player","Player","path","onstop","loop","toDestination","state","prevProps","prevState","this","stop","load","then","toneStarted","toneStartHook","start","className","playingClass","stoppedClass","onKeyDown","onClick","playingLeader","stoppedLeader","name","React","Component","defaultProps","soundDefs","SoundPicker","handlePrevious","selectedSound","length","handleNext","selectedSoundDef","Object","assign","pannerStart","oscFreq","oscType","oscPhase","PanningSampleSoundButton","panner","Panner","osc","Oscillator","frequency","type","phase","connect","pan","disconnect","GridStrument","initialisePlayers","players","Players","playerKeysByPitch","keys","samplerURLs","forEach","sampleURL","samplerBaseURL","add","notePitch","Frequency","toMidi","connectEffects","chain","apply","effects","nextCol","cursorCol","minCol","maxCol","nextRow","cursorRow","minRow","maxRow","activePlayer","stopPlaying","playNote","octave","samplerBaseOctave","numRows","noteName","noteByColumn","playSingleNote","previousNoteOffset","useOffsets","noteStopped","context","now","sampleLength","buffer","duration","noteStarted","playbackRate","desiredNote","desiredPitch","leastDistance","pitch","distance","Math","abs","closestPitch","Midi","toNote","notePlayer","adjustmentFactor","pow","adjustedSpeed","scaledOffset","componentDidUpdate","JSON","stringify","getEffectsChain","Destination","drawGrid","leftGutterX","topGutterY","gridCells","row","col","numCols","x","cellWidth","y","cellHeight","push","width","height","fill","stroke","strokeWidth","startCol","startRow","cursorCx","cursorCy","Container","Row","Col","md","tabIndex","id","offset","stopColor","cx","cy","r","indexByNote","rampToDuration","PanningGridStrument","initialisePanner","noteByRow","middleCol","newPanValue","rampTo","value","Gridstrument","boundedPanningGridStrumentDefaults","gainCutoffOutOfBounds","reverbDecayOutOfBounds","reverbWetnessOutOfBounds","lowpassDampening","lowpassDelayTime","lowpassResonanceOutOfBounds","BoundedPanningGridStrument","initialiseGain","gain","Gain","initialiseReverb","reverb","Reverb","decay","wet","initialiseLowpass","lowpass","LowpassCombFilter","dampening","delayTime","resonance","distanceOutOfBounds","position","numCells","colsOutOfBounds","rowsOutOfBounds","cellsOutOfBounds","sqrt","newWetness","min","newGain","newResonance","roundedNumberAsString","number","round","toString","ConfigurableGridStrument","samplerURLsByKey","setLoopParameter","newLoopValue","setRampToDuration","newRampToDuration","setGainCutoffOutOfBounds","newGainCutoffOutOfBounds","setReverbWetnessOutOfBounds","newReverbWetnessOutOfBounds","setLowpassResonanceOutOfBounds","newLowpassResonanceOutOfBounds","setSampleURLs","selectedItemDef","newSamplerURLs","setUseOffsets","newUseOffsets","options","sort","selectedIndex","onChange","size","max","step","TonePanel","tonePromise","href","ReactDOM","render","document","getElementById"],"mappings":"wUAOqBA,G,wDAUjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAqCVC,SAAW,WAEP,EAAKC,SAAS,CAAEC,UAAU,KAxCX,EA2CnBC,OAAS,WACL,EAAKF,SAAS,CAAEG,WAAW,KA5CZ,EA+CnBC,YAAc,SAACC,GACXC,cACAD,EAAME,iBACN,EAAKC,eAlDU,EAqDnBC,cAAgB,SAACJ,GACbC,eACmD,IAA/C,EAAKR,MAAMY,YAAYC,QAAQN,EAAMO,OACrCP,EAAME,iBACN,EAAKC,gBAtDT,EAAKK,OAAS,IAAIC,IAAOhB,EAAMiB,KAAM,EAAKhB,UAC1C,EAAKc,OAAOG,OAAS,EAAKd,OAC1B,EAAKW,OAAOI,KAAO,EAAKnB,MAAMmB,KAC9B,EAAKJ,OAAOK,gBAEZ,EAAKC,MAAQ,CACTlB,UAAU,EACVE,WAAW,GAVA,E,+DAcAiB,EAAWC,IAE1BC,KAAKT,OAAOI,KAAOK,KAAKxB,MAAMmB,KAG1BG,EAAUL,OAASO,KAAKxB,MAAMiB,QAE1BO,KAAKT,QAAgC,YAAtBS,KAAKT,OAAOM,QAC3BG,KAAKT,OAAOU,OACZD,KAAKtB,SAAS,CAAEG,WAAW,KAG/BmB,KAAKtB,SAAS,CAACC,UAAU,IACLqB,KAAKT,OAAOW,KAAKF,KAAKxB,MAAMiB,MACpCU,KAAKH,KAAKvB,a,6CAKtBuB,KAAKT,QAAgC,YAAtBS,KAAKT,OAAOM,OAC3BG,KAAKT,OAAOU,S,oCA2BL,IAAD,QACLD,KAAKxB,MAAM4B,aAAeJ,KAAKxB,MAAM6B,cAEbL,KAAKxB,MAAM6B,gBACnBF,MAAK,WAElB,EAAKjB,iBAIiB,YAAtBc,KAAKT,OAAOM,MACZG,KAAKT,OAAOU,QAGZD,KAAKtB,SAAS,CAAEG,WAAW,IAC3BmB,KAAKT,OAAOe,W,+BAKb,IAAD,EACyBN,KAAKH,MAA5BlB,EADF,EACEA,SAAUE,EADZ,EACYA,UAClB,OAAIF,EAEI,4BACI4B,UAAYP,KAAKH,MAAMhB,UAAYmB,KAAKxB,MAAMgC,aAAeR,KAAKxB,MAAMiC,aACxEC,UAAWV,KAAKb,cAChBwB,QAASX,KAAKlB,aAEd,yBAAKyB,UAAU,eACT1B,EAAYmB,KAAKxB,MAAMoC,cAAgBZ,KAAKxB,MAAMqC,cADxD,IACwEb,KAAKxB,MAAMsC,OAMpF,qD,GA3G4BC,IAAMC,YAAhCzC,EACV0C,aAAe,CAClBH,KAAM,QACNN,aAAc,UACdC,aAAc,UACdG,cAAe,OACfC,cAAe,OACfzB,YAAa,CAAC,QAAS,U,UCRzB8B,EAAY,CACd,CAAEJ,KAAM,kBAAmBrB,KAAM,2CAA4CE,MAAM,GACnF,CAAEmB,KAAM,aAAcrB,KAAM,qCAAsCE,MAAM,GACxE,CAAEmB,KAAM,QAASrB,KAAM,sBACvB,CAAEqB,KAAM,aAAcrB,KAAM,sCAAuCE,MAAM,GACzE,CAAEmB,KAAM,eAAgBrB,KAAM,wCAAyCE,MAAM,GAC7E,CAAEmB,KAAM,wBAAyBrB,KAAM,2CAA4CE,MAAM,GACzF,CAAEmB,KAAM,+BAAgCrB,KAAM,0CAC9C,CAAEqB,KAAM,cAAerB,KAAM,qCAAsCE,MAAM,GACzE,CAAEmB,KAAM,UAAWrB,KAAM,mCAAoCE,MAAM,GACnE,CAAEmB,KAAM,UAAWrB,KAAM,mCAAoCE,MAAM,GACnE,CAAEmB,KAAM,eAAgBrB,KAAM,sCAAuCE,MAAM,GAC3E,CAAEmB,KAAM,uBAAwBrB,KAAM,mCACtC,CAAEqB,KAAM,uBAAwBrB,KAAM,mCACtC,CAAEqB,KAAM,6BAA8BrB,KAAM,yCAC5C,CAAEqB,KAAM,mBAAoBrB,KAAM,mCAAoCE,MAAM,GAC5E,CAAEmB,KAAM,qBAAsBrB,KAAM,qCAAsCE,MAAM,GAChF,CAAEmB,KAAM,iBAAkBrB,KAAM,yCAChC,CAAEqB,KAAM,aAAcrB,KAAM,kCAC5B,CAAEqB,KAAM,uBAAwBrB,KAAM,gDACtC,CAAEqB,KAAM,uBAAwBrB,KAAM,gDACtC,CAAEqB,KAAM,gBAAiBrB,KAAM,2CAC/B,CAAEqB,KAAM,2BAA4BrB,KAAM,oDAC1C,CAAEqB,KAAM,mBAAoBrB,KAAM,2CAA4CE,MAAM,GACpF,CAAEmB,KAAM,kBAAmBrB,KAAM,0CAA2CE,MAAM,GAClF,CAAEmB,KAAM,oBAAqBrB,KAAM,2CAA4CE,MAAM,IAGpEwB,E,kDAKjB,WAAa3C,GAAQ,IAAD,8BAChB,cAAMA,IAOV4C,eAAiB,SAACrC,GACd,EAAKL,UAAS,SAACqB,EAAWD,GAEtB,MAAO,CAAEuB,cAD6C,IAA5BtB,EAAUsB,cAAuBH,EAAUI,OAAS,EAAKvB,EAAUsB,cAAgB,OAVjG,EAepBE,WAAa,SAACxC,GACV,EAAKL,UAAS,SAACqB,EAAWD,GAEtB,MAAO,CAAEuB,cADiBtB,EAAUsB,gBAAmBH,EAAUI,OAAS,EAAK,EAAIvB,EAAUsB,cAAgB,OAfjH,EAAKxB,MAAQ,CACTwB,cAAe,GAHH,E,qDAuBhB,IAAMG,EAAmBN,EAAUlB,KAAKH,MAAMwB,eAC9C,OAAO,yBAAKd,UAAU,gBAClB,kBAAC,EAAD,CACIO,KAAMU,EAAiBV,KACvBrB,KAAM+B,EAAiB/B,KACvBE,KAAM6B,EAAiB7B,KACvBS,YAAaJ,KAAKxB,MAAM4B,YACxBC,cAAeL,KAAKxB,MAAM6B,gBAE9B,6BACI,4BAAQE,UAAU,WAAWI,QAASX,KAAKoB,gBAA3C,YACA,4BAAQb,UAAU,OAAOI,QAASX,KAAKuB,YAAvC,c,GAvCyBR,IAAMC,WAA1BG,EACVF,aAAe,CAClB7B,YAAa,CAAC,QAAS,UC/B/B,IAAM6B,EAAeQ,OAAOC,OAAO,GAAInD,EAAkB0C,aAAc,CACnEU,YAAa,EAEbC,QAAS,EACTC,QAAS,OACTC,SAAU,KAGOC,E,kDAGjB,WAAavD,GAAQ,IAAD,sBAChB,cAAMA,GAGN,IAAMwD,EAAS,IAAIC,IAAOzD,EAAMmD,aAAa/B,gBAEvCsC,EAAM,IAAIC,IAAW,CACvBC,UAAW5D,EAAMoD,QACjBS,KAAW7D,EAAMqD,QACjBS,MAAW9D,EAAMsD,WATL,OAWhBI,EAAIK,QAAQP,EAAOQ,KACnBN,EAAI5B,QACJ,EAAKf,OAAOkD,aACZ,EAAKlD,OAAOgD,QAAQP,GAdJ,E,UAH8BzD,GAAjCwD,EACVd,aAAeA,E,oBCuBLyB,G,wDA8BjB,WAAalE,GAAQ,IAAD,8BAChB,cAAMA,IAcVmE,kBAAoB,SAACnE,GACjB,EAAKoE,QAAU,IAAIC,IAEnB,EAAKC,kBAAoB,GACzBrB,OAAOsB,KAAK,EAAKvE,MAAMwE,aAAaC,SAAQ,SAAC3D,GACzC,IAAM4D,EAAY,EAAK1E,MAAM2E,eAAiB,EAAK3E,MAAMwE,YAAY1D,GACrE,EAAKsD,QAAQQ,IAAI9D,EAAK4D,GACtB,IAAMG,EAAYC,YAAUhE,GAAKiE,SACjC,EAAKT,kBAAkBO,GAAa/D,MAvBxB,EA8BpBkE,eAAiB,WACb,EAAKZ,QAAQH,aACb,EAAKG,QAAQa,MAAMC,MAAM,EAAKd,QAAS,EAAKe,UAhC5B,EAmCpBxE,cAAgB,SAACJ,GACb,GAAIA,EAAMO,MAAsD,IAA/C,EAAKd,MAAMY,YAAYC,QAAQN,EAAMO,KAElD,OADAP,EAAME,iBACEF,EAAMO,KACV,IAAK,YACD,EAAKZ,UAAS,SAACqB,GACX,IAAM6D,EAAU7D,EAAU8D,UAAY,EACtC,OAAID,GAAW,EAAKpF,MAAMsF,OACf,CAAED,UAAWD,GAGb,QAGf,MACJ,IAAK,aACD,EAAKlF,UAAS,SAACqB,GACX,IAAM6D,EAAU7D,EAAU8D,UAAY,EACtC,OAAID,GAAW,EAAKpF,MAAMuF,OACf,CAAEF,UAAWD,GAGb,QAGnB,MACA,IAAK,UACL,EAAKlF,UAAS,SAACqB,GACX,IAAMiE,EAAUjE,EAAUkE,UAAY,EACtC,OAAID,GAAW,EAAKxF,MAAM0F,OACf,CAAED,UAAWD,GAGb,QAGf,MACA,IAAK,YACD,EAAKtF,UAAS,SAACqB,GACX,IAAMiE,EAAUjE,EAAUkE,UAAY,EACtC,OAAID,GAAW,EAAKxF,MAAM2F,OACf,CAAEF,UAAWD,GAGb,QAGf,MACJ,IAAK,QACG,EAAKI,cAA4C,YAA5B,EAAKA,aAAavE,MACvC,EAAKwE,cAGL,EAAKC,aAxFL,EAiGpBA,SAAW,WACP,IAAMC,EAAS,EAAK/F,MAAMgG,mBAAqB,EAAKhG,MAAMiG,QAAU,EAAK5E,MAAMoE,WACzES,EAAWhC,EAAaiC,aAAa,EAAK9E,MAAMgE,WACtD,EAAKe,eAAeF,EAAUH,IApGd,EAuGpBF,YAAc,WACN,EAAKD,cAA4C,YAA5B,EAAKA,aAAavE,OACvC,EAAKuE,aAAanE,QAzGN,EA6GpB2E,eAAiB,SAACF,EAAUH,GACxB,IAAIM,EAAqB,EAEzB,GAAI,EAAKrG,MAAMsG,YAAc,EAAKV,cAA4C,YAA5B,EAAKA,aAAavE,MAAqB,CAGrF,EAAKuE,aAAanE,OAClB,IAAI8E,EAAc,EAAKX,aAAaY,QAAQC,MACtCC,EAAe,EAAKd,aAAae,OAAOC,SAG9CP,GAFoBE,EAAc,EAAKM,aAEHH,EAAgB,EAAKd,aAAakB,aAI1E,IAAMC,EAAcb,EAAWH,EAGzBiB,EAAelC,YAAUiC,GAAahC,SAExCkC,EAAgB,IAQpB,GAPAhE,OAAOsB,KAAK,EAAKD,mBAAmBG,SAAQ,SAACyC,GACzC,IAAMC,EAAWD,EAAQF,EACrBI,KAAKC,IAAIF,GAAYC,KAAKC,IAAIJ,KAC9BA,EAAgBE,MAIF,MAAlBF,EAAuB,CACvB,IAAMK,EAAeN,EAAeC,EAC9BnG,EAAMyG,YAAKD,GAAcE,SAGzBC,EAAa,EAAKrD,QAAQrD,OAAOD,GAEvC,GAAI2G,GAAcA,EAAW3F,MAAO,CAChC,EAAK8D,aAAe6B,EAGpBA,EAAWtG,KAAO,EAAKnB,MAAMmB,KAG7B,IAAMuG,EAAmBN,KAAKO,IAAI,EAAGP,KAAKC,IAAIJ,EAAc,KACtDW,EAAgBX,EAAgB,EAAIS,EAAoB,EAAIA,EAKlED,EAAWX,aAAec,EAE1B,IAAMC,EAAexB,EAAqBuB,EAE1C,EAAKf,YAAcY,EAAWjB,QAAQC,MAAQoB,EAG9CJ,EAAW3F,MAAM,EAAG+F,MApKZ,EAyKpBC,mBAAqB,SAACxG,EAAWC,GACzBA,EAAU8D,YAAc,EAAKhE,MAAMgE,WAAa9D,EAAUkE,YAAc,EAAKpE,MAAMoE,WACnF,EAAKK,WAGLiC,KAAKC,UAAU1G,EAAUkD,eAAiBuD,KAAKC,UAAU,EAAKhI,MAAMwE,eACpE,EAAKqB,cACL,EAAK1B,kBAAkB,EAAKnE,OAC5B,EAAKgF,kBAGL1D,EAAUH,OAAS,EAAKnB,MAAMmB,MAC9B,EAAK0E,eArLO,EAyLpBoC,gBAAkB,WACd,MAAO,CAACC,MA1LQ,EA6LpBC,SAAW,SAACC,EAAaC,GAErB,IADA,IAAMC,EAAY,GACTC,EAAM,EAAGA,EAAM,EAAKvI,MAAMiG,QAASsC,IACxC,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAKxI,MAAMyI,QAASD,IAAO,CAC/C,IAAME,EAAIN,GAAgBI,EAAM,GAAK,EAAKxI,MAAM2I,UAC1CC,EAAIP,GAAeE,EAAM,GAAK,EAAKvI,MAAM6I,WACzC/H,EAAMyH,EAAM,IAAMC,EACxBF,EAAUQ,KAAK,0BAAMhI,IAAKA,EAAK4H,EAAGA,EAAGE,EAAGA,EAAGG,MAAO,EAAK/I,MAAM2I,UAAWK,OAAQ,EAAKhJ,MAAM6I,WAAYI,KAAK,QAAQC,OAAO,QAAQC,YAAY,OAGvJ,OAAOb,GApMP,EAAKjH,MAAQ,CACTgE,UAAWrF,EAAMoJ,SACjB3D,UAAWzF,EAAMqJ,UAIrB,EAAKlF,oBAEL,EAAKgB,QAAU,CAAC+C,KAChB,EAAKlD,iBAZW,E,qDA2MhB,IACMgE,GADaxH,KAAKxB,MAAMuF,OAAS/D,KAAKxB,MAAMsF,OAAU,GACjC9D,KAAKxB,MAAM6I,WAEhCE,GADavH,KAAKxB,MAAM2F,OAASnE,KAAKxB,MAAM0F,OAAU,GAClClE,KAAKxB,MAAM2I,UAE/BP,GAAe,EAAI5G,KAAKxB,MAAMsF,QAAU9D,KAAKxB,MAAM2I,UACnDN,GAAe,EAAI7G,KAAKxB,MAAM0F,QAAUlE,KAAKxB,MAAM6I,WAEnDS,EAAWlB,EAAe5G,KAAKxB,MAAM2I,WAAanH,KAAKH,MAAMgE,UAAY,IACzEkE,EAAWlB,EAAc7G,KAAKxB,MAAM2I,WAAcnH,KAAKH,MAAMoE,UAAY,IAE/E,OAAO,kBAAC+D,EAAA,EAAD,CACCzH,UAAU,eACVG,UAAW1B,IACX2B,QAAS3B,KAET,kBAACiJ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACJ,yBAAKZ,MAAOA,EAAOC,OAAQA,EAAQY,SAAS,IAAI1H,UAAWV,KAAKb,eAC5D,8BACI,oCAAgBkJ,GAAG,cACnB,0BAAMC,OAAO,MAAMC,UAAU,SAC7B,0BAAMD,OAAO,MAAMC,UAAU,YAIjC,0BACIrB,EAAE,IACFE,EAAE,IACFG,MAAOA,EACPC,OAAQA,EACRC,KAAK,uBAGRzH,KAAK2G,SAASC,EAAaC,GAE5B,4BACI2B,GAAIV,EACJW,GAAIV,EACJW,EAA0B,GAAvB1I,KAAKxB,MAAM2I,UACdM,KAAK,UACLC,OAAO,UACPC,YAAY,SAIxB,kBAACO,EAAA,EAAD,CAAKC,GAAG,KACJ,yBAAK5H,UAAU,oBAAf,uP,GAxRkBQ,IAAMC,YAA3B0B,EACViC,aAAe,CAClB,KAAM,IACN,KAAM,KACN,EAAM,IACN,EAAM,KACN,EAAM,IACN,EAAM,IACN,EAAM,KACN,EAAM,IACN,EAAM,KAVOjC,EAaViG,YAAc,CACjB,EAAM,EACN,KAAM,EACN,EAAM,EACN,KAAM,EACN,EAAM,EACN,EAAM,EACN,KAAM,EACN,EAAM,EACN,KAAM,EACN,EAAM,EACN,KAAM,GACN,EAAM,IAzBOjG,EA4BVzB,aAvD6B,CAEpC4G,SAAU,EACVD,SAAU,EACV9D,QAAU,EACVC,OAAU,EACVG,QAAU,EACVC,OAAU,EACV8C,QAAU,EACVxC,QAAU,EACV4C,WAAY,GACZF,UAAW,GAGX/H,YAAa,CAAC,YAAa,aAAc,UAAW,YAAa,SAGjE0F,YAAY,EACZnF,MAAM,EACNiJ,eAAgB,EAChBpE,kBAAmB,EACnBrB,eAAgB,YAChBH,YAAa,CACT,GAAM,c,IC7BO6F,E,kDAejB,WAAarK,GAAQ,IAAD,8BAChB,cAAMA,IASVsK,iBAAmB,WACf,EAAK9G,OAAS,IAAIC,IAAO,IAXT,EAcpBqC,SAAW,WACP,IAAMI,EAAcmE,EAAoBE,UAAU,EAAKlJ,MAAMoE,WAEvD+E,GAAe,EAAKxK,MAAMuF,OAAS,EAAKvF,MAAMsF,QAAU,EAExDmF,GADe,EAAKpJ,MAAMgE,UAAYmF,GACf,EAEzB,EAAKxK,MAAMoK,eAAiB,EAC5B,EAAK5G,OAAOQ,IAAI0G,OAAOD,EAAa,EAAKzK,MAAMoK,gBAG/C,EAAK5G,OAAOQ,IAAI2G,MAAQF,EAG5B,EAAKrE,eAAeF,EAAU,EAAKlG,MAAMgG,oBAxBzC,EAAKsE,mBAEL,EAAKnF,QAAU,CAAC,EAAK3B,OAAQ0E,KAC7B,EAAKlD,iBAPW,E,UAfyB4F,GAA5BP,EACV5H,aAAemI,EAAanI,aADlB4H,EAGVE,UAAY,CACf,KAAM,KACN,KAAM,IACN,EAAM,KACN,EAAM,IACN,EAAM,IACN,EAAM,KACN,EAAM,IACN,EAAM,KACN,EAAM,KCXd,IAAMM,EAAqC5H,OAAOC,OAAO,GAAI0H,EAAanI,aAAc,CAEpFqI,sBAAuB,EACvBC,uBAAwB,GACxBC,yBAA0B,EAC1BC,iBAAmB,IACnBC,iBAAmB,KACnBC,4BAA6B,IAGZC,E,kDAGjB,WAAapL,GAAQ,IAAD,8BAChB,cAAMA,IAWVqL,eAAiB,WAEb,EAAKC,KAAO,IAAIC,IAAK,CACjBD,KAAM,KAfM,EAmBpBE,iBAAmB,WACf,EAAKC,OAAS,IAAIC,IAAO,CACrBC,MAAQ,EAAK3L,MAAM+K,uBACnBa,IAAK,KAtBO,EA0BpBC,kBAAoB,WAChB,EAAKC,QAAU,IAAIC,IAAkB,CACjCC,UAAW,EAAKhM,MAAMiL,iBACtBgB,UAAW,EAAKjM,MAAMkL,iBACtBgB,UAAW,KA9BC,EAkCpBC,oBAAsB,SAACC,EAAUC,GAC7B,OAAID,EAAW,EAAYhF,KAAKC,IAAI+E,GAC3BA,EAAYC,EAAW,EACrBD,GAAYC,EAAW,GAGvB,GAxCK,EA4CpBvG,SAAW,WACP,IAAMI,EAAcmE,EAAoBE,UAAU,EAAKlJ,MAAMoE,WAEvD+E,GAAe,EAAKxK,MAAMuF,OAAS,EAAKvF,MAAMsF,QAAU,EAExDmF,GADe,EAAKpJ,MAAMgE,UAAYmF,GACf,EAGzB,EAAKxK,MAAMoK,eAAiB,EAC5B,EAAK5G,OAAOQ,IAAI0G,OAAOD,EAAa,EAAKzK,MAAMoK,gBAG/C,EAAK5G,OAAOQ,IAAI2G,MAAQF,EAI5B,IAAM6B,EAAkB,EAAKH,oBAAoB,EAAK9K,MAAMgE,UAAW,EAAKrF,MAAMyI,SAC5E8D,EAAkB,EAAKJ,oBAAoB,EAAK9K,MAAMoE,UAAW,EAAKzF,MAAMiG,SAC5EuG,EAAmBpF,KAAKqF,KAAOH,EAAkBA,EAAoBC,EAAkBA,GAG7F,GAAI,EAAKvM,MAAM+K,uBAAyB,EAAG,CACvC,IAAM2B,EAAatF,KAAKuF,IAAI,EAAG,EAAK3M,MAAMgL,yBAA2BwB,GACjE,EAAKxM,MAAMoK,eAAiB,EAC5B,EAAKqB,OAAOG,IAAIlB,OAAOgC,EAAY,EAAK1M,MAAMoK,gBAG9C,EAAKqB,OAAOG,IAAIjB,MAAQ+B,EAKhC,GAAI,EAAK1M,MAAM8K,sBAAwB,EAAG,CACtC,IAAM8B,EAAU,EAAK,EAAK5M,MAAM8K,sBAAwB0B,EAEpD,EAAKxM,MAAMoK,eAAiB,EAC5B,EAAKkB,KAAKA,KAAKZ,OAAOkC,EAAS,EAAK5M,MAAMoK,gBAG1C,EAAKkB,KAAKA,KAAKX,MAAQiC,EAK/B,GAAI,EAAK5M,MAAMmL,4BAA8B,EAAG,CAC5C,IAAM0B,EAAezF,KAAKuF,IAAI,EAAI,EAAK3M,MAAMmL,4BAA8BqB,GAEvE,EAAKxM,MAAMoK,eAAiB,EAC5B,EAAK0B,QAAQI,UAAUxB,OAAOmC,EAAc,EAAK7M,MAAMoK,gBAGvD,EAAK0B,QAAQI,UAAUvB,MAAQkC,EAIvC,EAAKzG,eAAeF,EAAU,EAAKlG,MAAMgG,oBAhGzC,EAAKqF,iBACL,EAAKG,mBACL,EAAKK,oBAEL,EAAK1G,QAAU,CAAE,EAAK3B,OAAQ,EAAK8H,KAAM,EAAKG,OAAQ,EAAKK,QAAS5D,KACpE,EAAKlD,iBARW,E,UAHgCqF,GAAnCe,EACV3I,aAAeoI,E,wBCJ1B,SAASiC,EAAuBC,GAC5B,OAAQ3F,KAAK4F,MAAe,IAATD,GAAgB,KAAKE,W,IAGvBC,E,kDAoBjB,WAAalN,GAAQ,IAAD,8BAChB,cAAMA,IApBVmN,iBAAmB,CACf,MAAS,CAAE,GAAM,aACjB,YAAa,CAAE,GAAM,mCACrB,mBAAoB,CAAE,GAAM,4CAC5B,iBAAkB,CAAE,GAAM,0CAC1B,OAAU,CAAC,GAAM,gCACjB,MAAS,CAAE,GAAM,eAAgB,GAAM,eAAgB,GAAM,eAAgB,GAAM,iBAanE,EAcpBC,iBAAmB,SAACC,GAChB,EAAKnN,SAAS,CAAEiB,KAAMkM,KAfN,EAkBpBC,kBAAoB,SAACC,GACjB,EAAKrN,SAAS,CAAEkK,eAAgBmD,KAnBhB,EAsBpBC,yBAA2B,SAACC,GACxB,EAAKvN,SAAS,CAAE4K,sBAAuB2C,KAvBvB,EA0BpBC,4BAA8B,SAACC,GAC3B,EAAKzN,SAAS,CAAE8K,yBAA0B2C,KA3B1B,EA8BpBC,+BAAiC,SAACC,GAC9B,EAAK3N,SAAS,CAAEiL,4BAA6B0C,KA/B7B,EAkCpBC,cAAgB,SAACC,GACb,IAAMC,EAAiB,EAAKb,iBAAiBY,EAAgBpD,OAC7D,EAAKzK,SAAS,CAAEsE,YAAawJ,KApCb,EAuCpBC,cAAgB,SAACC,GACb,EAAKhO,SAAS,CAAEoG,WAAY4H,KAtC5B,EAAK7M,MAAQ,CACTyJ,sBAAuB,EAAK9K,MAAM8K,sBAClC3J,KAAM,EAAKnB,MAAMmB,KACjBgK,4BAA6B,EAAKnL,MAAMmL,4BACxCf,eAAgB,EAAKpK,MAAMoK,eAC3BY,yBAA0B,EAAKhL,MAAMgL,yBACrCxG,YAAa,EAAKxE,MAAMwE,YACxB8B,WAAY,EAAKtG,MAAMsG,YATX,E,qDA4ChB,OAAQ,kBAACkD,EAAA,EAAD,KACJ,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,MACJ,kBAAC,EAAD,CACImB,sBAAuBtJ,KAAKH,MAAMyJ,sBAClC3J,KAAMK,KAAKH,MAAMF,KACjBgK,4BAA6B3J,KAAKH,MAAM8J,4BACxCH,yBAA0BxJ,KAAKH,MAAM2J,yBACrCxG,YAAahD,KAAKH,MAAMmD,YACxB8B,WAAY9E,KAAKH,MAAMiF,eAInC,kBAACmD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,MACR,kBAACD,EAAA,EAAD,CAAKC,GAAG,KACJ,wBAAI5H,UAAU,iBAAd,eAEJ,kBAAC2H,EAAA,EAAD,CAAKC,GAAG,KACJ,kBAAC,IAAD,CACIwE,QAASlL,OAAOsB,KAAK/C,KAAK2L,kBAAkBiB,OAC5CC,cAAe,EACfC,SAAU9M,KAAKsM,kBAI3B,6BACA,kBAACrE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACJ,wBAAI5H,UAAU,iBAAd,gBAEA,kBAAC,IAAD,CACIV,MAAOG,KAAKH,MAAMF,KAClBoN,KAAM,CAAC,IAAI,IACXD,SAAU9M,KAAK4L,mBAGnB,uBAAGrL,UAAU,eAAeP,KAAKH,MAAMF,KAAO,MAAQ,OAE1D,kBAACuI,EAAA,EAAD,CAAKC,GAAG,KACJ,wBAAI5H,UAAU,iBAAd,8BACA,kBAAC,IAAD,CACI4I,MAAOnJ,KAAKH,MAAM+I,eAClBkE,SAAU9M,KAAK8L,kBACfX,IAAK,EACL6B,IAAK,EACLC,KAAM,MAGV,uBAAG1M,UAAU,eAAe+K,EAAsBtL,KAAKH,MAAM+I,kBAEjE,kBAACV,EAAA,EAAD,CAAKC,GAAG,KACJ,wBAAI5H,UAAU,iBAAd,+BAEA,kBAAC,IAAD,CACI4I,MAAOnJ,KAAKH,MAAMyJ,sBAClBwD,SAAU9M,KAAKgM,yBACfb,IAAK,EACL6B,IAAK,KAGT,uBAAGzM,UAAU,eAAe+K,EAAsBtL,KAAKH,MAAMyJ,0BAGrE,kBAACrB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACJ,wBAAI5H,UAAU,iBAAd,0BACA,kBAAC,IAAD,CACI4I,MAAOnJ,KAAKH,MAAM2J,yBAClBsD,SAAU9M,KAAKkM,4BACff,IAAK,EACL6B,IAAK,MAGT,uBAAGzM,UAAU,eAAe+K,EAAsBtL,KAAKH,MAAM2J,4BAEjE,kBAACtB,EAAA,EAAD,CAAKC,GAAG,KACJ,wBAAI5H,UAAU,iBAAd,4BACA,kBAAC,IAAD,CACI4I,MAAOnJ,KAAKH,MAAM8J,4BAClBmD,SAAU9M,KAAKoM,+BACfjB,IAAK,EACL6B,IAAK,MAGT,uBAAGzM,UAAU,eAAe+K,EAAsBtL,KAAKH,MAAM8J,+BAEjE,kBAACzB,EAAA,EAAD,CAAKC,GAAG,KACJ,wBAAI5H,UAAU,iBAAd,eAEA,kBAAC,IAAD,CACIV,MAAOG,KAAKH,MAAMiF,WAClBiI,KAAM,CAAC,IAAI,IACXD,SAAU9M,KAAKyM,gBAGnB,uBAAGlM,UAAU,eAAeP,KAAKH,MAAMiF,WAAa,MAAQ,a,GAhK1B/D,IAAMC,WAAvC0K,EAUVzK,aAAe,CAClBtB,MAAM,EACNiJ,eAAgB,EAChBU,sBAAuB,GACvBE,yBAA0B,IAC1BG,4BAA6B,IAC7B3G,YAAa,CAAE,GAAM,aACrB8B,YAAY,G,ICZdoI,E,kDACJ,WAAa1O,GAAQ,IAAD,8BAClB,cAAMA,IAOR6B,cAAgB,WACd,GAAI,EAAKR,MAAMsN,YACb,OAAO,EAAKtN,MAAMsN,YAGlB,IAAMA,EAAc7M,cAKpB,OAJA6M,EAAYhN,MAAK,WACf,EAAKzB,SAAS,CAAE0B,aAAa,OAE/B,EAAK1B,SAAS,CAAEyO,YAAaA,IACtBA,GAhBT,EAAKtN,MAAQ,CACXO,aAAa,EACb+M,aAAa,GAJG,E,qDAuBlB,OACE,kBAACnF,EAAA,EAAD,KACE,qDAEA,uGAC2E,uBAAGoF,KAAK,4BAAR,WAD3E,sDAGE,uBAAGA,KAAK,mDAAR,oCAHF,KAMA,0DAEA,kHAEE,uBAAGA,KAAK,gDAAR,UAFF,gMAOA,kBAAC,EAAD,CACEtM,KAAK,aACLrB,KAAK,iCACLW,YAAaJ,KAAKH,MAAMO,YACxBC,cAAeL,KAAKK,gBAGtB,iKAKA,kBAAC,EAAD,CACES,KAAK,aACLrB,KAAK,qCACLE,MAAM,EACNS,YAAaJ,KAAKH,MAAMO,YACxBC,cAAeL,KAAKK,gBAGtB,4CAEA,ubAOA,kBAAC,EAAD,CAAaD,YAAaJ,KAAKH,MAAMO,YAAaC,cAAeL,KAAKK,gBAEtE,wEAEA,gXAOA,kBAAC,EAAD,CACIS,KAAK,uBACLrB,KAAK,qCACLE,MAAM,EACNS,YAAaJ,KAAKH,MAAMO,YACxBC,cAAeL,KAAKK,gBAGxB,6HAEA,kBAAC,EAAD,CACIS,KAAK,uBACLrB,KAAK,qCACLqC,SAAU,IACVnC,MAAM,EACNS,YAAaJ,KAAKH,MAAMO,YACxBC,cAAeL,KAAKK,gBAGxB,6MAMA,mDAEA,wZAOA,+DAEA,moBASA,mTAMA,kJAKA,kBAAC,EAAD,MAEA,mLAKA,kBAAC,EAAD,CAAc2C,YAAc,CAAE,GAAM,+BAEpC,2EAEA,6hBAQA,kBAAC,EAAD,MAEA,qEAIA,kBAAC,EAAD,CAAqBA,YAAc,CAAE,GAAM,qCAE5C,uDAEA,oSAMC,wEAEA,sHAEE,uBAAGoK,KAAK,8CAAR,QAFF,qJAMA,kBAAC,EAAD,CAA4B9D,sBAAsB,QAElD,kEAEA,6PAGM,uBAAG8D,KAAK,gDAAR,UAHN,2FAOA,kBAAC,EAAD,CAA4B5D,yBAA0B,MAEtD,6EAEA,yLAE+C,uBAAG4D,KAAK,2DAAR,qBAF/C,oTAQA,kBAAC,EAAD,CAA4BzD,4BAA6B,MAEzD,qEAEA,uGAEA,kBAAC,EAAD,CAA4BL,sBAAsB,MAAME,yBAA0B,IAAMG,4BAA6B,MAErH,oEAEA,mJAEe,uBAAGyD,KAAK,mDAAR,4CAFf,oRAQA,kBAAC,EAAD,CAA4B9D,sBAAsB,MAAME,yBAA0B,IAAMG,4BAA6B,IAAMf,eAAgB,MAE3I,6WAOA,mEAEA,4VAMA,iDACqB,uBAAGwE,KAAK,gDAAR,UADrB,mCAEM,uBAAGA,KAAK,iDAAR,WAFN,4GAIE,uBAAGA,KAAK,iDAAR,WAJF,mIAQA,kBAAC,EAAD,CACEzN,MAAM,EACN2J,sBAAsB,MACtBE,yBAA0B,IAC1BG,4BAA6B,IAC7B3G,YAAc,CAAE,GAAM,4CAGxB,4EAEA,kZAOA,kBAAC,EAAD,CACErD,MAAM,EACN2J,sBAAsB,MACtBE,yBAA0B,IAC1BG,4BAA6B,IAC7B3G,YAAc,CAAE,GAAM,0CACtB8B,YAAY,IAId,2DAEA,gMAEyD,uBAAGsI,KAAK,+CAAR,iBAFzD,6CAG0C,uBAAGA,KAAK,kCAAR,WAH1C,yBAOA,kBAAC,EAAD,W,GA5RgBrM,IAAMC,WA2S9BqM,IAASC,OAAO,kBAAC,EAAD,MAAcC,SAASC,eAAe,W","file":"static/js/main.d5f2a6e3.chunk.js","sourcesContent":["// TODO: Add flow\nimport React from 'react';\n\nimport {Player, start as StartTone} from \"tone\";\n\nimport './SampleSoundButton.css'\n\nexport default class SampleSoundButton extends React.Component {\n    static defaultProps = {\n        name: \"Sound\",\n        playingClass: \"playing\",\n        stoppedClass: \"stopped\",\n        playingLeader: \"Stop\",\n        stoppedLeader: \"Play\",\n        watchedKeys: [\"Enter\", \"Space\"]\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.player = new Player(props.path, this.onLoaded);\n        this.player.onstop = this.onStop;\n        this.player.loop = this.props.loop;\n        this.player.toDestination();\n\n        this.state = {\n            isLoaded: false,\n            isPlaying: false\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // Make looping independently configurable.\n        this.player.loop = this.props.loop;\n\n        // Reload the sound when the path changes.\n        if (prevProps.path !== this.props.path) {\n            // Stop the sound if it's playing.\n            if (this.player && this.player.state === \"started\") {\n                this.player.stop(); // This will also eventually change isPlaying for us, but we need it sooner.\n                this.setState({ isPlaying: false});\n            }\n\n            this.setState({isLoaded: false });\n            const loadPromise = this.player.load(this.props.path);\n            loadPromise.then(this.onLoaded)\n        }\n    }\n\n    componentWillUnmount () {\n        if (this.player && this.player.state === \"started\") {\n            this.player.stop();\n        }\n    }\n\n    onLoaded = () => {\n        // TODO: This may be hit before the component is actually mounted.\n        this.setState({ isLoaded: true });\n    }\n\n    onStop = () => {\n        this.setState({ isPlaying: false});\n    }\n\n    handleClick = (event) => {\n        StartTone();\n        event.preventDefault();\n        this.toggleSound();\n    }\n\n    handleKeyDown = (event) => {\n        StartTone();\n        if (this.props.watchedKeys.indexOf(event.key) !== -1) {\n            event.preventDefault();\n            this.toggleSound();\n        }\n    }\n\n    toggleSound() {\n        if (!this.props.toneStarted && this.props.toneStartHook) {\n            // Start Tone.js asynchronously.\n            const toneStartPromise = this.props.toneStartHook()\n            toneStartPromise.then(() => {\n                // Call ourselves again once the promise returns.\n                this.toggleSound();\n            });\n        }\n        else {\n            if (this.player.state === \"started\") {\n                this.player.stop();\n            }\n            else {\n                this.setState({ isPlaying: true});\n                this.player.start();\n            }\n        }\n    }\n\n    render () {\n        const { isLoaded, isPlaying} = this.state;\n        if (isLoaded) {\n            return(\n                <button\n                    className={ this.state.isPlaying ? this.props.playingClass : this.props.stoppedClass }\n                    onKeyDown={this.handleKeyDown}\n                    onClick={this.handleClick}\n                >\n                    <div className=\"button-text\">\n                        { isPlaying ? this.props.playingLeader : this.props.stoppedLeader} {this.props.name}\n                    </div>\n                </button>\n            )\n        }\n        else {\n            return <div>Loading sound...</div>;\n        }\n    }\n}","import React from 'react';\n\nimport SampleSoundButton from \"./SampleSoundButton\";\n\nimport './SoundPicker.css';\n\nconst soundDefs = [\n    { name: \"Along the Trail\", path: \"./sounds/wavestation-along-the-trail.wav\", loop: true },\n    { name: \"Bass Drone\", path: \"./sounds/analog-lab-bass-drone.wav\", loop: true },\n    { name: \"Bongo\", path: \"./sounds/bongo.wav\" },\n    { name: \"Droid Bass\", path: \"./sounds/wavestation-droid-bass.wav\", loop: true },\n    { name: \"Droid Bass 2\", path: \"./sounds/wavestation-droid-bass-2.wav\", loop: true },\n    { name: \"Euro Percussion Organ\", path: \"./sounds/wavestation-euro-perc-organ.wav\", loop: true },\n    { name: \"Fingernail on Cardboard Tube\", path: \"./sounds/cardboard-tube-fingernail.wav\"},\n    { name: \"Into A Maze\", path: \"./sounds/wavestation-intoamaze.wav\", loop: true },\n    { name: \"Kalimba\", path: \"./sounds/wavestation-kalimba.wav\", loop: true },\n    { name: \"Marimba\", path: \"./sounds/wavestation-marimba.wav\", loop: true },\n    { name: \"Nut Pan Beat\", path: \"./sounds/wavestation-nutpanbeat.wav\", loop: true },\n    { name: \"Ocean Drum (Circles)\", path: \"./sounds/ocean-drum-circles.wav\"},\n    { name: \"Ocean Drum (Pen Cap)\", path: \"./sounds/ocean-drum-pen-cap.wav\"},\n    { name: \"Ocean Drum (Vertical Line)\", path: \"./sounds/ocean-drum-vertical-line.wav\"},\n    { name: \"Pen on Cardboard\", path: \"./sounds/pen-cardboard-lines.wav\", loop: true },\n    { name: \"Pen on Cardboard 2\", path: \"./sounds/pen-cardboard-lines-2.wav\", loop: true},\n    { name: \"Pencil Drawing\", path: \"./sounds/pencil-cardboard-shading.wav\"},\n    { name: \"Phone Dial\", path: \"./sounds/fisher-price-dial.wav\"},\n    { name: \"Phone Dial (Forward)\", path: \"./sounds/fisher-price-phone-dial-forward.wav\"},\n    { name: \"Phone Dial (Release)\", path: \"./sounds/fisher-price-phone-dial-release.wav\"},\n    { name: \"Phone Rolling\", path: \"./sounds/fisher-price-phone-rolling.wav\"},\n    { name: \"Phone Rolling (Backward)\", path: \"./sounds/fisher-price-phone-rolling-backward.wav\"},\n    { name: \"Robotic Sequence\", path: \"./sounds/analog-lab-robotic-sequence.wav\", loop: true },\n    { name: \"Techno Sequence\", path: \"./sounds/analog-lab-techno-sequence.wav\", loop: true },\n    { name: \"Toy Box (Falling)\", path: \"./sounds/wavestation-toy-box-falling.wav\", loop: true },\n];\n\nexport default class SoundPicker extends React.Component {\n    static defaultProps = {\n        watchedKeys: [\"Enter\", \"Space\"]\n    }\n\n    constructor (props) {\n        super(props);\n        this.state = {\n            selectedSound: 0\n        };\n    }\n\n    // TODO: Make both of these support filtered key events.\n    handlePrevious = (event) => {\n        this.setState((prevState, prevProps) => {\n            const nextSelectedSound = prevState.selectedSound === 0 ? (soundDefs.length - 1) : prevState.selectedSound - 1;\n            return { selectedSound: nextSelectedSound};\n        });\n    }\n\n    handleNext = (event) => {\n        this.setState((prevState, prevProps) => {\n            const nextSelectedSound = prevState.selectedSound === (soundDefs.length - 1) ? 0 : prevState.selectedSound + 1;\n            return { selectedSound: nextSelectedSound};\n        });\n    }\n\n    render () {\n        const selectedSoundDef = soundDefs[this.state.selectedSound]\n        return(<div className=\"picker-panel\">\n            <SampleSoundButton\n                name={selectedSoundDef.name}\n                path={selectedSoundDef.path}\n                loop={selectedSoundDef.loop}\n                toneStarted={this.props.toneStarted}\n                toneStartHook={this.props.toneStartHook}\n            />\n            <div>\n                <button className=\"previous\" onClick={this.handlePrevious}>previous</button>\n                <button className=\"next\" onClick={this.handleNext}>next</button>\n            </div>\n        </div>);\n    }\n}\n\n","import SampleSoundButton from './SampleSoundButton';\n\nimport {Panner, Oscillator} from 'tone';\n\n// We cannot pick up the default properties via inheritance, so we extemd them manually.\nconst defaultProps = Object.assign({}, SampleSoundButton.defaultProps, {\n    pannerStart: 0,   // the starting position of the panner, where -1 is hard left, 0 is dead centre, and 1 is hard right.\n\n    oscFreq: 4,       // The frequency of the wave in seconds.\n    oscType: \"sine\",  // Supports \"sine\", \"sawtooth\", and an incredible range other waves.  Also supports partials, like \"sine2\"\n    oscPhase: 90      // Phase in \"degrees\", repeating every 360.    \n});\n\nexport default class PanningSampleSoundButton extends SampleSoundButton {\n    static defaultProps = defaultProps\n\n    constructor (props) {\n        super(props);\n\n        // Rewire initial sound configuration.\n        const panner = new Panner(props.pannerStart).toDestination();\n\n        const osc = new Oscillator({\n            frequency: props.oscFreq,\n            type:      props.oscType,\n            phase:     props.oscPhase\n        });\n        osc.connect(panner.pan);\n        osc.start();\n        this.player.disconnect();\n        this.player.connect(panner);\n    }\n}\n","import React from \"react\";\n\nimport {Players, Frequency, Midi, Destination, start as StartTone} from \"tone\";\n\nimport Col from \"react-bootstrap/Col\"\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nimport './GridStrument.css';\n\nexport const gridstrumentDefaultProps = {\n    // Grid Params\n    startRow: 2,\n    startCol: 2,\n    minCol:  -2,\n    maxCol:   6,\n    minRow:  -2,\n    maxRow:   6,\n    numCols:  5,\n    numRows:  5,\n    cellHeight: 30,\n    cellWidth: 30,\n\n    // Control Params\n    watchedKeys: [\"ArrowLeft\", \"ArrowRight\", \"ArrowUp\", \"ArrowDown\", \"Enter\"],\n\n    // Sound Params\n    useOffsets: false,\n    loop: false,\n    rampToDuration: 0,\n    samplerBaseOctave: 2,\n    samplerBaseURL: \"./sounds/\",\n    samplerURLs: {\n        \"E2\": \"bongo.wav\"\n    }\n}\n\nexport default class GridStrument extends React.Component {\n    static noteByColumn = {\n        \"-2\": \"C\",\n        \"-1\": \"C#\",\n        \"0\":  \"D\",\n        \"1\":  \"D#\",\n        \"2\":  \"E\",\n        \"3\":  \"F\",\n        \"4\":  \"F#\",\n        \"5\":  \"G\",\n        \"6\":  \"A\"\n    }\n\n    static indexByNote = {\n        \"C\":  0,\n        \"C#\": 1,\n        \"D\":  2,\n        \"D#\": 3,\n        \"E\":  4,\n        \"F\":  5,\n        \"F#\": 6,\n        \"G\":  7,\n        \"G#\": 8,\n        \"A\":  9,\n        \"A#\": 10,\n        \"B\":  11\n    }\n\n    static defaultProps = gridstrumentDefaultProps;\n    \n    constructor (props) {\n        super(props);\n\n        this.state = {\n            cursorCol: props.startCol,\n            cursorRow: props.startRow,\n        };\n\n        // Initialize sound and filters.\n        this.initialisePlayers();\n\n        this.effects = [Destination];\n        this.connectEffects();\n    }\n    \n    initialisePlayers = (props) => {\n        this.players = new Players();\n\n        this.playerKeysByPitch = {};\n        Object.keys(this.props.samplerURLs).forEach((key) => {\n            const sampleURL = this.props.samplerBaseURL + this.props.samplerURLs[key];\n            this.players.add(key, sampleURL);\n            const notePitch = Frequency(key).toMidi();\n            this.playerKeysByPitch[notePitch] = key;\n        });\n    }\n    \n\n    // All of the classes that extend this one update this.effects to represent their desired chain of effects between\n    // this.players and Tone.Destination.\n    connectEffects = () => {\n        this.players.disconnect();\n        this.players.chain.apply(this.players, this.effects);\n    }\n\n    handleKeyDown = (event) => {\n        if (event.key && this.props.watchedKeys.indexOf(event.key) !== -1) {\n            event.preventDefault();\n            switch (event.key) {\n                case \"ArrowLeft\":\n                    this.setState((prevState) => {\n                        const nextCol = prevState.cursorCol - 1;\n                        if (nextCol >= this.props.minCol) {\n                            return { cursorCol: nextCol};\n                        }\n                        else {\n                            return null;\n                        }\n                    });\n                    break;\n                case \"ArrowRight\":\n                    this.setState((prevState) => {\n                        const nextCol = prevState.cursorCol + 1;\n                        if (nextCol <= this.props.maxCol) {\n                            return { cursorCol: nextCol};\n                        }\n                        else {\n                            return null;\n                        }\n                    });\n                break;\n                case \"ArrowUp\":\n                this.setState((prevState) => {\n                    const nextRow = prevState.cursorRow - 1;\n                    if (nextRow >= this.props.minRow) {\n                        return { cursorRow: nextRow};\n                    }\n                    else {\n                        return null;\n                    }\n                });\n                break;\n                case \"ArrowDown\":\n                    this.setState((prevState) => {\n                        const nextRow = prevState.cursorRow + 1;\n                        if (nextRow <= this.props.maxRow) {\n                            return { cursorRow: nextRow};\n                        }\n                        else {\n                            return null;\n                        }\n                    });\n                    break;\n                case \"Enter\":\n                    if (this.activePlayer && this.activePlayer.state === \"started\") {\n                        this.stopPlaying();\n                    }\n                    else {\n                        this.playNote();\n                    }                  \n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n    playNote = () => {\n        const octave = this.props.samplerBaseOctave + (this.props.numRows - this.state.cursorRow);\n        const noteName = GridStrument.noteByColumn[this.state.cursorCol];\n        this.playSingleNote(noteName, octave);\n    }\n\n    stopPlaying = () => {\n        if (this.activePlayer && this.activePlayer.state === \"started\") {\n            this.activePlayer.stop();\n        }\n    }\n\n    playSingleNote = (noteName, octave) => {\n        let previousNoteOffset = 0;\n\n        if (this.props.useOffsets && this.activePlayer && this.activePlayer.state === \"started\") {           \n            // We have to calculate the relative position in the sample ourselves because Tone.js no longer exposes that information:\n            // https://github.com/Tonejs/Tone.js/issues/621\n            this.activePlayer.stop();\n            let noteStopped = this.activePlayer.context.now();\n            const sampleLength = this.activePlayer.buffer.duration;\n            const timeElapsed = noteStopped - this.noteStarted;\n            // The offset for the next note will be: (duration % sample length)  ( newPlaybackRate/ oldPlaybackRate ).\n            previousNoteOffset = (timeElapsed % sampleLength) / this.activePlayer.playbackRate;\n        }\n       \n        // The Sampler doesn't allow you to loop sounds, so we use a Players class and handle the pitch shifting ourselves.\n        const desiredNote = noteName + octave;\n\n        // Find our nearest neighbor note.\n        const desiredPitch = Frequency(desiredNote).toMidi();\n\n        let leastDistance = 127;\n        Object.keys(this.playerKeysByPitch).forEach((pitch) => {\n            const distance = pitch - desiredPitch;\n            if (Math.abs(distance) < Math.abs(leastDistance)) {\n                leastDistance = distance;\n            }\n        });\n\n        if (leastDistance !== 127) {\n            const closestPitch = desiredPitch + leastDistance;\n            const key = Midi(closestPitch).toNote();\n\n            // Get the individual Player instance.\n            const notePlayer = this.players.player(key);\n\n            if (notePlayer && notePlayer.start) {\n                this.activePlayer = notePlayer;\n                \n                // Set its loop variable.\n                notePlayer.loop = this.props.loop;\n                \n                // Adjust the speed\n                const adjustmentFactor = Math.pow(2, Math.abs(leastDistance/12));\n                const adjustedSpeed = leastDistance < 0 ? adjustmentFactor : (1 / adjustmentFactor);\n                \n                // TODO: The note player lacks a \"rampTo\" for its playbackrate, so we can't transition pitches that way.\n                // See if they expose their timing mechanism for arbitrary values.\n                // May not want to do this, as it would mess up our offset algorithm.\n                notePlayer.playbackRate = adjustedSpeed;\n                \n                const scaledOffset = previousNoteOffset * adjustedSpeed\n\n                this.noteStarted = notePlayer.context.now() - scaledOffset;\n                \n                // Play the note.\n                notePlayer.start(0, scaledOffset);\n            }\n        }\n    }\n\n    componentDidUpdate = (prevProps, prevState) => {\n        if (prevState.cursorCol !== this.state.cursorCol || prevState.cursorRow !== this.state.cursorRow) {\n            this.playNote();\n        }\n\n        if (JSON.stringify(prevProps.samplerURLs) !== JSON.stringify(this.props.samplerURLs)) {\n            this.stopPlaying();\n            this.initialisePlayers(this.props);\n            this.connectEffects();\n        }\n\n        if (prevProps.loop && !this.props.loop) {\n            this.stopPlaying();\n        }\n    }\n\n    getEffectsChain = () => {\n        return [Destination];\n    }\n\n    drawGrid = (leftGutterX, topGutterY) => {\n        const gridCells = [];\n        for (let row = 0; row < this.props.numRows; row++) {\n            for (let col = 0; col < this.props.numCols; col++) {\n                const x = leftGutterX + ((col - 1) * this.props.cellWidth);\n                const y = topGutterY + ((row - 1) * this.props.cellHeight);\n                const key = row + \"-\" + col;\n                gridCells.push(<rect key={key} x={x} y={y} width={this.props.cellWidth} height={this.props.cellHeight} fill=\"white\" stroke=\"black\" strokeWidth=\"2\"/>);\n            }\n        }\n        return gridCells;\n    }\n\n    render() {\n        const totalCols = (this.props.maxCol - this.props.minCol) + 1;\n        const height = totalCols * this.props.cellHeight;\n        const totalRows = (this.props.maxRow - this.props.minRow) + 1;\n        const width = totalRows * this.props.cellWidth;\n\n        const leftGutterX = (1 - this.props.minCol) * this.props.cellWidth; \n        const topGutterY  = (1 - this.props.minRow) * this.props.cellHeight;\n\n        const cursorCx = leftGutterX + (this.props.cellWidth * (this.state.cursorCol - 0.5));\n        const cursorCy = topGutterY + (this.props.cellWidth *  (this.state.cursorRow - 0.5));\n        \n        return(<Container\n                className=\"gridstrument\"\n                onKeyDown={StartTone}\n                onClick={StartTone}\n               >\n                <Row>\n                    <Col md=\"4\">\n                        <svg width={width} height={height} tabIndex=\"1\" onKeyDown={this.handleKeyDown}>\n                            <defs>\n                                <radialGradient id=\"boundaries\">\n                                <stop offset=\"35%\" stopColor=\"grey\" />\n                                <stop offset=\"75%\" stopColor=\"black\" />\n                                </radialGradient>\n                            </defs>\n\n                            <rect\n                                x=\"0\"\n                                y=\"0\"\n                                width={width}\n                                height={height}\n                                fill=\"url('#boundaries')\"\n                            />\n\n                            {this.drawGrid(leftGutterX, topGutterY)}\n\n                            <circle\n                                cx={cursorCx}\n                                cy={cursorCy}\n                                r={this.props.cellWidth * 0.3 }\n                                fill=\"#ffcccc\"\n                                stroke=\"#ff0000\"\n                                strokeWidth=\"1%\"\n                            />\n                        </svg>         \n                    </Col>\n                    <Col md=\"4\">\n                        <div className=\"alert alert-dark\">\n                            Focus on the element, then use arrow keys to change position.\n                            The note corresponding to your position will play as you move.\n                            Hit the enter key to stop playing the current note or repeat the note\n                            that corresponds to the current position.\n                        </div>\n                    </Col>\n                </Row>\n            </Container>);\n    }\n}\n","import Gridstrument from './GridStrument';\n\nimport {Destination, Panner} from \"tone\";\n\nexport default class PanningGridStrument extends Gridstrument {\n    static defaultProps = Gridstrument.defaultProps;\n\n    static noteByRow = {\n        \"-2\": \"G#\",\n        \"-1\": \"G\",\n        \"0\":  \"F#\",\n        \"1\":  \"F\",\n        \"2\":  \"E\",\n        \"3\":  \"D#\",\n        \"4\":  \"D\",\n        \"5\":  \"C#\",\n        \"6\":  \"C\"\n    }\n\n    constructor (props) {\n        super(props);\n\n        // Initialize panner.\n        this.initialisePanner();\n\n        this.effects = [this.panner, Destination];\n        this.connectEffects();\n    }\n\n    initialisePanner = () => {\n        this.panner = new Panner(0);\n    }\n\n    playNote = () => {\n        const noteName    = PanningGridStrument.noteByRow[this.state.cursorRow];\n\n        const middleCol   = (this.props.maxCol + this.props.minCol) / 2;\n        const distance    = (this.state.cursorCol - middleCol);\n        const newPanValue = distance/4;\n\n        if (this.props.rampToDuration > 0) {\n            this.panner.pan.rampTo(newPanValue, this.props.rampToDuration);\n        }\n        else {\n            this.panner.pan.value = newPanValue;\n        }\n\n        this.playSingleNote(noteName, this.props.samplerBaseOctave);\n    }\n}","import Gridstrument from './GridStrument';\nimport PanningGridStrument from './PanningGridStrument';\n\nimport {Reverb, Gain, LowpassCombFilter, Destination} from 'tone';\n\nconst boundedPanningGridStrumentDefaults = Object.assign({}, Gridstrument.defaultProps, {\n    // TODO: Reintroduce a note length and make it possible to use a fraction of that to rampTo the next value.\n    gainCutoffOutOfBounds: 0,\n    reverbDecayOutOfBounds: 0.4,\n    reverbWetnessOutOfBounds: 0,\n    lowpassDampening : 440,\n    lowpassDelayTime : 0.00003, // Must be non-zero, but we don't want it to \n    lowpassResonanceOutOfBounds: 0\n});\n\nexport default class BoundedPanningGridStrument extends PanningGridStrument {\n    static defaultProps = boundedPanningGridStrumentDefaults;\n\n    constructor (props) {\n        super(props);\n\n        this.initialiseGain();\n        this.initialiseReverb();\n        this.initialiseLowpass();\n\n        this.effects = [ this.panner, this.gain, this.reverb, this.lowpass, Destination];\n        this.connectEffects();\n    }\n\n\n    initialiseGain = () => {\n        // https://tonejs.github.io/docs/14.7.39/interface/GainOptions\n        this.gain = new Gain({\n            gain: 1\n        });\n    }\n\n    initialiseReverb = () => {\n        this.reverb = new Reverb({\n            decay:  this.props.reverbDecayOutOfBounds, \n            wet: 0 // disabled by default.\n        });\n    }\n\n    initialiseLowpass = () => {\n        this.lowpass = new LowpassCombFilter({\n            dampening: this.props.lowpassDampening,\n            delayTime: this.props.lowpassDelayTime,\n            resonance: 0\n        });\n    }\n\n    distanceOutOfBounds = (position, numCells) => {\n        if (position < 0) { return Math.abs(position);}\n        else if (position > (numCells - 1)) {\n            return position - (numCells - 1);\n        }\n        else {\n            return 0;\n        }\n    }\n\n    playNote = () => {\n        const noteName    = PanningGridStrument.noteByRow[this.state.cursorRow];\n\n        const middleCol   = (this.props.maxCol + this.props.minCol) / 2;\n        const distance    = (this.state.cursorCol - middleCol);\n        const newPanValue = distance/4;\n\n\n        if (this.props.rampToDuration > 0) {\n            this.panner.pan.rampTo(newPanValue, this.props.rampToDuration);\n        }\n        else {\n            this.panner.pan.value = newPanValue;\n        }\n\n        // Calculate distance out of bounds on both axes and then combine using the square of the sum of the squares (ala pythagoras).\n        const colsOutOfBounds = this.distanceOutOfBounds(this.state.cursorCol, this.props.numCols); \n        const rowsOutOfBounds = this.distanceOutOfBounds(this.state.cursorRow, this.props.numRows);\n        const cellsOutOfBounds = Math.sqrt( (colsOutOfBounds * colsOutOfBounds) + (rowsOutOfBounds * rowsOutOfBounds));\n\n        // Adjust the reverb based on the distance out of bounds.\n        if (this.props.reverbDecayOutOfBounds > 0) {\n            const newWetness = Math.min(1, this.props.reverbWetnessOutOfBounds * cellsOutOfBounds);\n            if (this.props.rampToDuration > 0) {\n                this.reverb.wet.rampTo(newWetness, this.props.rampToDuration);\n            }\n            else {\n                this.reverb.wet.value = newWetness;\n            }\n        }\n\n        // Adjust the volume based on the distance out of bounds.\n        if (this.props.gainCutoffOutOfBounds > 0) {\n            const newGain = 1 - (this.props.gainCutoffOutOfBounds * cellsOutOfBounds);\n\n            if (this.props.rampToDuration > 0) {\n                this.gain.gain.rampTo(newGain, this.props.rampToDuration);\n            }\n            else {\n                this.gain.gain.value = newGain;\n            }\n        }\n\n        // Adjust the lowpass resonance based on the distance out of bounds.\n        if (this.props.lowpassResonanceOutOfBounds > 0) {\n            const newResonance = Math.min(1, (this.props.lowpassResonanceOutOfBounds * cellsOutOfBounds));\n\n            if (this.props.rampToDuration > 0) {\n                this.lowpass.resonance.rampTo(newResonance, this.props.rampToDuration);\n            }\n            else {\n                this.lowpass.resonance.value = newResonance;\n            }\n        }\n\n        this.playSingleNote(noteName, this.props.samplerBaseOctave);\n   }\n}","import React from 'react';\n\nimport Col from \"react-bootstrap/Col\"\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nimport { Toggle, Dial, Select } from 'react-nexusui';\n\nimport './ConfigurableGridStrument.css';\n\nimport BoundedPanningGridStrument from './BoundedPanningGridStrument'\n\nfunction roundedNumberAsString (number) {\n    return (Math.round(number * 100) / 100).toString();\n}\n\nexport default class ConfigurableGridStrument extends React.Component {\n    samplerURLsByKey = {\n        \"Bongo\": { \"E2\": \"bongo.wav\" },\n        \"Euro Perc\": { \"A1\": \"wavestation-euro-perc-organ.wav\"},\n        \"Glissando (Down)\": { \"C3\": \"glissando/al-metalic-vs-robotic-down.wav\"},\n        \"Glissando (Up)\": { \"C2\": \"glissando/al-metalic-vs-robotic-up.wav\"},\n        \"Pencil\": {\"A1\": \"pencil-cardboard-shading.wav\"},\n        \"Train\": { \"C1\": \"train/C1.wav\", \"C2\": \"train/C2.wav\", \"C3\": \"train/C3.wav\", \"C4\": \"train/C4.wav\" }\n    }\n\n    static defaultProps = {\n        loop: false,\n        rampToDuration: 0,\n        gainCutoffOutOfBounds: 0.4,\n        reverbWetnessOutOfBounds: 0.35,\n        lowpassResonanceOutOfBounds: 0.35,\n        samplerURLs: { \"E2\": \"bongo.wav\" },\n        useOffsets: false\n    }\n \n    constructor (props) {\n        super(props);\n        this.state = {\n            gainCutoffOutOfBounds: this.props.gainCutoffOutOfBounds,\n            loop: this.props.loop,\n            lowpassResonanceOutOfBounds: this.props.lowpassResonanceOutOfBounds,\n            rampToDuration: this.props.rampToDuration,\n            reverbWetnessOutOfBounds: this.props.reverbWetnessOutOfBounds,\n            samplerURLs: this.props.samplerURLs,\n            useOffsets: this.props.useOffsets\n        };\n    }\n\n    // IMO it's pretty despicable not to make the components properly relay state without these kinds of handlers.\n    setLoopParameter = (newLoopValue) => {\n        this.setState({ loop: newLoopValue });\n    }\n\n    setRampToDuration = (newRampToDuration) => {\n        this.setState({ rampToDuration: newRampToDuration});\n    }\n\n    setGainCutoffOutOfBounds = (newGainCutoffOutOfBounds) => {\n        this.setState({ gainCutoffOutOfBounds: newGainCutoffOutOfBounds});\n    }\n\n    setReverbWetnessOutOfBounds = (newReverbWetnessOutOfBounds) => {\n        this.setState({ reverbWetnessOutOfBounds: newReverbWetnessOutOfBounds});\n    }\n\n    setLowpassResonanceOutOfBounds = (newLowpassResonanceOutOfBounds) => {\n        this.setState({ lowpassResonanceOutOfBounds: newLowpassResonanceOutOfBounds});\n    }\n\n    setSampleURLs = (selectedItemDef) => {\n        const newSamplerURLs = this.samplerURLsByKey[selectedItemDef.value];\n        this.setState({ samplerURLs: newSamplerURLs})\n    }\n\n    setUseOffsets = (newUseOffsets) => {\n        this.setState({ useOffsets: newUseOffsets});\n    }\n\n    render () {\n        return (<Container>\n            <Row>\n                <Col md=\"12\">\n                    <BoundedPanningGridStrument\n                        gainCutoffOutOfBounds={this.state.gainCutoffOutOfBounds}\n                        loop={this.state.loop}\n                        lowpassResonanceOutOfBounds={this.state.lowpassResonanceOutOfBounds}\n                        reverbWetnessOutOfBounds={this.state.reverbWetnessOutOfBounds}\n                        samplerURLs={this.state.samplerURLs}\n                        useOffsets={this.state.useOffsets}\n                    />\n                </Col>\n            </Row>\n            <Row>\n                <Col md=\"6\"></Col>\n                <Col md=\"3\">\n                    <h4 className=\"control-label\">Sound Pack</h4>\n                </Col>\n                <Col md=\"3\">\n                    <Select\n                        options={Object.keys(this.samplerURLsByKey).sort()}\n                        selectedIndex={0}\n                        onChange={this.setSampleURLs}\n                    />\n                </Col>\n            </Row>\n            <hr/>\n            <Row>\n                <Col md=\"4\">\n                    <h4 className=\"control-label\">Loop Sample?</h4>\n\n                    <Toggle\n                        state={this.state.loop}\n                        size={[100,40]}\n                        onChange={this.setLoopParameter}\n                    />\n\n                    <p className=\"value-label\">{this.state.loop ? \"Yes\" : \"No\"}</p>\n                </Col>\n                <Col md=\"4\">\n                    <h4 className=\"control-label\">Effect Transition Time (s)</h4>\n                    <Dial\n                        value={this.state.rampToDuration}\n                        onChange={this.setRampToDuration}\n                        min={0}\n                        max={2}\n                        step={0.25}\n                    />\n\n                    <p className=\"value-label\">{roundedNumberAsString(this.state.rampToDuration)}</p>\n                </Col>\n                <Col md=\"4\">\n                    <h4 className=\"control-label\">\"Out of Bounds\" Gain Cutoff</h4>\n \n                    <Dial\n                        value={this.state.gainCutoffOutOfBounds}\n                        onChange={this.setGainCutoffOutOfBounds}\n                        min={0}\n                        max={0.4}\n                    />\n\n                    <p className=\"value-label\">{roundedNumberAsString(this.state.gainCutoffOutOfBounds)}</p>\n                </Col>\n            </Row>\n            <Row>\n                <Col md=\"4\">\n                    <h4 className=\"control-label\">\"Out of Bounds\" Reverb</h4>\n                    <Dial\n                        value={this.state.reverbWetnessOutOfBounds}\n                        onChange={this.setReverbWetnessOutOfBounds}\n                        min={0}\n                        max={0.35}\n                    />\n\n                    <p className=\"value-label\">{roundedNumberAsString(this.state.reverbWetnessOutOfBounds)}</p>\n                </Col>\n                <Col md=\"4\">\n                    <h4 className=\"control-label\">\"Out of Bounds\" Low Pass</h4>\n                    <Dial\n                        value={this.state.lowpassResonanceOutOfBounds}\n                        onChange={this.setLowpassResonanceOutOfBounds}\n                        min={0}\n                        max={0.35}\n                    />\n\n                    <p className=\"value-label\">{roundedNumberAsString(this.state.lowpassResonanceOutOfBounds)}</p>\n                </Col>\n                <Col md=\"4\">\n                    <h4 className=\"control-label\">Use Offsets</h4>\n\n                    <Toggle\n                        state={this.state.useOffsets}\n                        size={[100,40]}\n                        onChange={this.setUseOffsets}\n                    />\n\n                    <p className=\"value-label\">{this.state.useOffsets ? \"Yes\" : \"No\"}</p>\n\n                </Col>\n            </Row>\n        </Container>);\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Container from \"react-bootstrap/Container\";\n\nimport SampleSoundButton from './SampleSoundButton';\nimport SoundPicker from './SoundPicker';\nimport PanningSampleSoundButton from './PanningSampleSoundButton';\n\nimport {start} from 'tone';\n\nimport GridStrument from './GridStrument';\nimport PanningGridStrument from './PanningGridStrument';\nimport BoundedPanningGridStrument from './BoundedPanningGridStrument';\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ConfigurableGridStrument from './ConfigurableGridStrument';\n\n// An enclosing environment that ensures that Tone is started on the first \n// user input, and that it is only started once.\n\nclass TonePanel extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      toneStarted: false,\n      tonePromise: false\n    };\n  }\n\n  toneStartHook = () => {\n    if (this.state.tonePromise) {\n      return this.state.tonePromise;\n    }\n    else {\n      const tonePromise = start();\n      tonePromise.then(() => {\n        this.setState({ toneStarted: true});\n      });\n      this.setState({ tonePromise: tonePromise});\n      return tonePromise;\n    }\n  }\n\n  render () {\n    return(\n      <Container>\n        <h1>React + Tone.js Demos</h1>\n\n        <p>\n          This page presents a few sample sound components created using React and <a href=\"https://tonejs.github.io\">Tone.js</a>.\n          It is intended to help with the discussion around\n          <a href=\"https://issues.fluidproject.org/browse/C2LC-234\">sonifying the coding environment</a>.\n        </p>\n\n        <h2>Starting / Stopping Sounds</h2>\n\n        <p>\n          The most basic thing we need to do is play an incidental sound.  For this I used the\n          <a href=\"https://tonejs.github.io/docs/14.7.39/Player\">Player</a> class provided by Tone.js.  Here is a simple\n          demonstration of sound playback.  Click (or hit enter) on the button to play the sound.  Click (or hit enter)\n          on the button to stop the sound.\n          </p>\n\n        <SampleSoundButton\n          name=\"Phone Dial\"\n          path=\"./sounds/fisher-price-dial.wav\"\n          toneStarted={this.state.toneStarted}\n          toneStartHook={this.toneStartHook}\n        />\n\n        <p>\n          Here is a sound that loops, it will not stop and the button UI will not update until you click (or hit enter)\n          on the button again.\n        </p>\n\n        <SampleSoundButton\n          name=\"Bass Drone\"\n          path=\"./sounds/analog-lab-bass-drone.wav\"\n          loop={true}\n          toneStarted={this.state.toneStarted}\n          toneStartHook={this.toneStartHook}\n        />\n\n        <h2>Sound Picker</h2>\n\n        <p>\n          Here is a \"picker\" that lets you try all of the sample sounds in this directory.  It also demonstrates making key\n          parameters configurable in real time.  When you change the sound, the previous sound will stop playing, and\n          a new sound will be loaded asynchronously.  This kind of reloading could be useful in allowing users to select\n          a sound theme without requiring them to download the sounds for all themes.\n        </p>\n\n        <SoundPicker toneStarted={this.state.toneStarted} toneStartHook={this.toneStartHook}/>\n\n        <h2>Using a Panned Loop to Suggest Direction</h2>\n\n        <p>\n          Here is a sound loop that is repeatedly \"panned\" from one ear to the other.  It is timed to match the tempo\n          of the sequence so that each \"beat\" appears to be traveling from one ear to the other.  The oscillator that\n          we use for this is a sine wave, we change the starting phase so that played notes occur on the right part of\n          the \"slope\".\n        </p>\n\n        <PanningSampleSoundButton\n            name=\"Panned Loop (L -> R)\"\n            path=\"./sounds/wavestation-intoamaze.wav\"\n            loop={true}\n            toneStarted={this.state.toneStarted}\n            toneStartHook={this.toneStartHook}\n        />\n\n        <p>Here's another sound loop with the phase shifted so that the direction appears to be reversed.</p>\n\n        <PanningSampleSoundButton\n            name=\"Panned Loop (L <- R)\"\n            path=\"./sounds/analog-lab-bass-drone.wav\"\n            oscPhase={270}\n            loop={true}\n            toneStarted={this.state.toneStarted}\n            toneStartHook={this.toneStartHook}\n        />\n\n        <p>\n          Although somewhat effective, this seems unlikely to be precisely readable enough to convey something like\n          speed, and is a bit tiring to listen to for more than a few seconds.\n        </p>\n\n\n        <h2>Suggesting Position</h2>\n\n        <p>\n          One of the key challenges in sonifying the coding environment is representing the position of various objects\n          using sound.  This next section explores a few strategies for doing so, using a series of grid environments\n          with \"in bound\" squares (white), \"out of bounds\" areas (black), and a \"cursor\" (red).  Focus on a demo and\n          use the arrow and enter keys to change the position.\n        </p>\n\n        <h3>Suggesting Position Using Pitch</h3>\n\n        <p>\n          Some MIDI grid controllers are tuned so that the lowest note is on the bottom left, and the highest note is\n          on the upper right.  Each cell corresponds to a single note.  In some tunings, the cell to the right of\n          a given cell corresponds to the next highest note, either a single step higher or the next note in a\n          particular key.  In some tunings, the next highest row of cells can be thought of like the next set of keys\n          on a piano keyboard.  For example, if there are eight columns in the grid, the next cell up is eight steps (or\n          notes in a key) higher.  In other tunings, the next cell up is an octave higher.\n        </p>\n\n        <p>\n          My initial thinking about easily representing a specific sound for each cell in our grid was to use two of\n          these conventions. Each cell would be one note higher than the cell to the left, and one octave higher than\n          the cell above it, as demonstrated in the following examples.\n        </p>\n\n        <p>\n          With a short percussive sound, the range of octaves scales well enough, but is a bit soft on the ends of the\n          range.\n        </p>\n\n        <GridStrument/>\n\n        <p>\n          A longer sound is more difficult to scale over the range, even if you loop or record long samples, the higher\n          octaves quickly become unintelligible.\n        </p>\n\n        <GridStrument samplerURLs= {{ \"E2\": \"analog-lab-bass-drone.wav\" }} />\n          \n        <h3>Suggesting Position Using Pitch and Panning</h3>\n\n        <p>\n          The above approach gives each cell a distinct pitch, but ends up covering a huge range of notes.  It might\n          be difficult to find an instrument that is audible and pleasant to listen to over the whole range.  If we\n          reserve pitch for the rows and use panning to represent how far left or right the column is, then each\n          character's voice can stay roughly within the same octave.  This lends itself to approaches like giving\n          each character their own distinct range.  Here's an example with a short percussive sound.\n        </p>\n\n        <PanningGridStrument/>\n\n        <p>\n          Here's an example with a longer sound.\n        </p>\n\n        <PanningGridStrument samplerURLs= {{ \"E2\": \"analog-lab-robotic-sequence.wav\" }} />\n\n       <h3>Representing Boundaries</h3>\n\n       <p>\n         The grid used in the last few examples has boundaries, i.e. cells that are \"in bounds\" (white) and cells that\n         are \"out of bounds\" (black).  This section demonstrates strategies for changing the sound to reflect whether\n         (and how far) out of bounds the cursor is.\n        </p>\n\n        <h3>Suggesting Boundaries Using Sound Volume</h3>\n\n        <p>\n          One strategy to represent distance is to lower the volume of distant sounds.  I used the\n          <a href=\"https://tonejs.github.io/docs/14.7.39/Gain\">Gain</a> class provided by Tone.js for this purpose.\n          Here is a demonstration of that approach, note that the sound drops off as you move \"out of bounds\".\n        </p>\n\n        <BoundedPanningGridStrument gainCutoffOutOfBounds=\"0.4\"/>\n\n        <h3>Suggesting Boundaries Using Reverb</h3>\n\n        <p>\n          In the team discussion, one idea that came up for representing boundaries was to add reverb when the cursor\n          is \"out of bounds\".  This approximates the sound of approaching a wall that might echo back the sound.  I used\n          the <a href=\"https://tonejs.github.io/docs/14.7.39/Reverb\">Reverb</a> class provided by Tone.js for this\n          purpose.  Here is a demonstration of that approach.\n        </p>\n\n        <BoundedPanningGridStrument reverbWetnessOutOfBounds={0.35}/>\n\n        <h3>Suggesting Boundaries Using a Low Pass Filter</h3>\n\n        <p>\n          In the team discussion, another suggestion was to use a low pass filter to approximate the way in which lower\n          frequencies do not carry as far.  I used the <a href=\"https://tonejs.github.io/docs/14.7.39/LowpassCombFilter\">LowPassCombFilter</a>\n          class provided by Tone.js for this.  As you can hear in the following demonstration, as the cursor moves out\n          of bounds, a kind of crunchy tone creeps into the sound.  I was less happy with this by itself, but as you'll\n          hear in later demos, it works well when used in combination with lowering the volume.\n        </p>\n\n        <BoundedPanningGridStrument lowpassResonanceOutOfBounds={0.25}/>\n\n        <h3>Suggesting Boundaries Using All Three</h3>\n\n        <p>Here is a demonstration that uses all three strategies at the same time.</p>\n\n        <BoundedPanningGridStrument gainCutoffOutOfBounds=\"0.4\" reverbWetnessOutOfBounds={0.35} lowpassResonanceOutOfBounds={0.35}/>\n\n        <h3>Transitioning Effects More Gradually</h3>\n\n        <p>\n          Many of the adjustable parameters in various effects offer the ability to transition over time.  For an\n          example, see <a href=\"https://tonejs.github.io/docs/14.7.39/Gain#gain\">the documentation for the gain parameter</a>\n          of the Gain class provided by Tone.js.  Although I found the effect less crisp, for the purposes of discussion\n          I made the transitions configurable.  Here is a demonstration with the transition time set to three quarters\n          of a second (slightly shorter than the sample used).\n        </p>\n\n        <BoundedPanningGridStrument gainCutoffOutOfBounds=\"0.4\" reverbWetnessOutOfBounds={0.35} lowpassResonanceOutOfBounds={0.35} rampToDuration={0.75}/>\n\n        <p>\n          If you want to hear the difference, listen to the sound that plays when you use an arrow key to move out of\n          bounds.  Then, hit enter to play the sound that corresponds to the current position.  As the effects have\n          already transitioned to the values for a given square, repeating the note is the same as playing without\n          any transition.\n        </p>\n\n        <h3>Adding the Ability to \"Loop\" Sounds</h3>\n\n        <p>\n          One of my ideas about our soundscape is that we would use non-repeating sounds for things like bouncing off\n          an obstacle.  My idea was to use looped sounds for things coupled with animation, or that take place over\n          time, such as turning, moving, moving while drawing.  This proved to be a small challenge with Tone.js.\n        </p>\n\n        <p>\n          Unlike the similar <a href=\"https://tonejs.github.io/docs/14.7.39/Player\">Player</a> class provided by Tone.js,\n          The <a href=\"https://tonejs.github.io/docs/14.7.39/Sampler\">Sampler</a> class does\n          not include the option to loop playback.  To work around this, I wrote a wrapper around their\n          <a href=\"https://tonejs.github.io/docs/14.7.39/Players\">Players</a> class that adds the ability to loop the\n          sound. Here is a demonstration that uses a repeated loop (hit enter to stop playback).\n        </p>\n\n        <BoundedPanningGridStrument\n          loop={true}\n          gainCutoffOutOfBounds=\"0.4\"\n          reverbWetnessOutOfBounds={0.35}\n          lowpassResonanceOutOfBounds={0.35}\n          samplerURLs= {{ \"C2\": \"glissando/al-metalic-vs-robotic-up.wav\"}}\n        />\n\n        <h3>Smoothing Transitions Between Pitched Sounds</h3>\n\n        <p>\n          If you transition quickly from one cell to the next in the previous demo, you may notice that the sound\n          restarts on each transition.  This leads to a kind of stuttering effect.  I added an option to calculate\n          the position in the previous sound and start the next sound at the same position.  Although it's not perfect,\n          it does give the appearance of smoother transitions.\n        </p>\n\n        <BoundedPanningGridStrument\n          loop={true}\n          gainCutoffOutOfBounds=\"0.4\"\n          reverbWetnessOutOfBounds={0.35}\n          lowpassResonanceOutOfBounds={0.35}\n          samplerURLs= {{ \"C2\": \"glissando/al-metalic-vs-robotic-up.wav\"}}\n          useOffsets={true}\n        />\n\n\n        <h2>Configurable Real Time Demo</h2>\n\n        <p>\n          The final demonstration adds the ability to configure various parameters in real time, so that you can try\n          combinations of effects.  This also demonstrates using <a href=\"https://github.com/rakannimer/react-nexusui\">React NexusUI</a>,\n          which provides React components for the <a href=\"https://nexus-js.github.io/ui/\">NexusUI</a> library of\n          controls.\n        </p>\n\n        <ConfigurableGridStrument/>\n      </Container>\n    );\n  }\n}\n\n\n// TODO: Confirm whether we can use this, previous failures may have been related to not setting the base URL properly.\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <TonePanel/>\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\nReactDOM.render(<TonePanel/>, document.getElementById('root'));\n"],"sourceRoot":""}