{"version":3,"sources":["SampleSoundButton.js","SoundPicker.js","PanningSampleSoundButton.js","index.js"],"names":["SampleSoundButton","props","onLoaded","setState","isLoaded","onStop","isPlaying","handleClick","event","preventDefault","toggleSound","handleKeyDown","watchedKeys","indexOf","key","player","Player","path","onstop","loop","toDestination","state","prevProps","prevState","this","stop","load","then","toneStarted","toneStartHook","start","className","playingClass","stoppedClass","onKeyDown","onClick","playingLeader","stoppedLeader","name","React","Component","defaultProps","soundDefs","SoundPicker","handlePrevious","selectedSound","length","handleNext","selectedSoundDef","Object","assign","pannerStart","oscFreq","oscType","oscPhase","PanningSampleSoundButton","panner","Panner","osc","Oscillator","frequency","type","phase","connect","pan","disconnect","TonePanel","tonePromise","Fragment","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.93d4da73.chunk.js","sourcesContent":["// TODO: Add flow\nimport React from 'react';\n\nimport {Player} from \"tone\";\n\nimport './SampleSoundButton.css'\n\nexport default class SampleSoundButton extends React.Component {\n    static defaultProps = {\n        name: \"Sound\",\n        playingClass: \"playing\",\n        stoppedClass: \"stopped\",\n        playingLeader: \"Stop\",\n        stoppedLeader: \"Play\",\n        watchedKeys: [\"Enter\", \"Space\"]\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.player = new Player(props.path, this.onLoaded);\n        this.player.onstop = this.onStop;\n        this.player.loop = this.props.loop;\n        this.player.toDestination();\n\n        // TODO: Track whether we're loaded yet.\n\n        this.state = {\n            isLoaded: false,\n            isPlaying: false\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // Make looping independently configurable.\n        this.player.loop = this.props.loop;\n\n        // Reload the sound when the path changes.\n        if (prevProps.path !== this.props.path) {\n            // Stop the sound if it's playing.\n            if (this.player && this.player.state === \"started\") {\n                this.player.stop(); // This will also eventually change isPlaying for us, but we need it sooner.\n                this.setState({ isPlaying: false});\n            }\n\n            this.setState({isLoaded: false });\n            const loadPromise = this.player.load(this.props.path);\n            loadPromise.then(this.onLoaded)\n        }\n    }\n\n    componentWillUnmount () {\n        if (this.player && this.player.state === \"started\") {\n            this.player.stop();\n        }\n    }\n\n    onLoaded = () => {\n        // TODO: This may be hit before the component is actually mounted.\n        this.setState({ isLoaded: true });\n    }\n\n    onStop = () => {\n        this.setState({ isPlaying: false});\n    }\n\n    handleClick = (event) => {\n        event.preventDefault();\n        this.toggleSound();\n    }\n\n    handleKeyDown = (event) => {\n        if (this.props.watchedKeys.indexOf(event.key) !== -1) {\n            event.preventDefault();\n            this.toggleSound();\n        }\n    }\n\n    toggleSound() {\n        if (!this.props.toneStarted && this.props.toneStartHook) {\n            // Start Tone.js asynchronously.\n            const toneStartPromise = this.props.toneStartHook()\n            toneStartPromise.then(() => {\n                // Call ourselves again once the promise returns.\n                this.toggleSound();\n            });\n        }\n        else {\n            if (this.player.state === \"started\") {\n                this.player.stop();\n            }\n            else {\n                this.setState({ isPlaying: true});\n                this.player.start();\n            }\n        }\n    }\n\n    render () {\n        const { isLoaded, isPlaying} = this.state;\n        if (isLoaded) {\n            return(\n                <button\n                    className={ this.state.isPlaying ? this.props.playingClass : this.props.stoppedClass }\n                    onKeyDown={this.handleKeyDown}\n                    onClick={this.handleClick}\n                >\n                    <div className=\"button-text\">\n                        { isPlaying ? this.props.playingLeader : this.props.stoppedLeader} {this.props.name}\n                    </div>\n                </button>\n            )\n        }\n        else {\n            return <div>Loading sound...</div>;\n        }\n    }\n}","import React from 'react';\n\nimport SampleSoundButton from \"./SampleSoundButton\";\n\nimport './SoundPicker.css';\n\nconst soundDefs = [\n    { name: \"Along the Trail\", path: \"./sounds/wavestation-along-the-trail.wav\", loop: true },\n    { name: \"Bass Drone\", path: \"./sounds/analog-lab-bass-drone.wav\", loop: true },\n    { name: \"Bongo\", path: \"./sounds/bongo.wav\" },\n    { name: \"Droid Bass\", path: \"./sounds/wavestation-droid-bass.wav\", loop: true },\n    { name: \"Droid Bass 2\", path: \"./sounds/wavestation-droid-bass-2.wav\", loop: true },\n    { name: \"Euro Percussion Organ\", path: \"./sounds/wavestation-euro-perc-organ.wav\", loop: true },\n    { name: \"Fingernail on Cardboard Tube\", path: \"./sounds/cardboard-tube-fingernail.wav\"},\n    { name: \"Into A Maze\", path: \"./sounds/wavestation-intoamaze.wav\", loop: true },\n    { name: \"Kalimba\", path: \"./sounds/wavestation-kalimba.wav\", loop: true },\n    { name: \"Marimba\", path: \"./sounds/wavestation-marimba.wav\", loop: true },\n    { name: \"Nut Pan Beat\", path: \"./sounds/wavestation-nutpanbeat.wav\", loop: true },\n    { name: \"Ocean Drum (Circles)\", path: \"./sounds/ocean-drum-circles.wav\"},\n    { name: \"Ocean Drum (Pen Cap)\", path: \"./sounds/ocean-drum-pen-cap.wav\"},\n    { name: \"Ocean Drum (Vertical Line)\", path: \"./sounds/ocean-drum-vertical-line.wav\"},\n    { name: \"Pen on Cardboard\", path: \"./sounds/pen-cardboard-lines.wav\", loop: true },\n    { name: \"Pen on Cardboard 2\", path: \"./sounds/pen-cardboard-lines-2.wav\", loop: true},\n    { name: \"Pencil Drawing\", path: \"./sounds/pencil-cardboard-shading.wav\"},\n    { name: \"Phone Dial\", path: \"./sounds/fisher-price-dial.wav\"},\n    { name: \"Phone Dial (Forward)\", path: \"./sounds/fisher-price-phone-dial-forward.wav\"},\n    { name: \"Phone Dial (Release)\", path: \"./sounds/fisher-price-phone-dial-release.wav\"},\n    { name: \"Phone Rolling\", path: \"./sounds/fisher-price-phone-rolling.wav\"},\n    { name: \"Phone Rolling (Backward)\", path: \"./sounds/fisher-price-phone-rolling-backward.wav\"},\n    { name: \"Robotic Sequence\", path: \"./sounds/analog-lab-robotic-sequence.wav\", loop: true },\n    { name: \"Techno Sequence\", path: \"./sounds/analog-lab-techno-sequence.wav\", loop: true },\n    { name: \"Toy Box (Falling)\", path: \"./sounds/wavestation-toy-box-falling.wav\", loop: true },\n];\n\nexport default class SoundPicker extends React.Component {\n    static defaultProps = {\n        watchedKeys: [\"Enter\", \"Space\"]\n    }\n\n    constructor (props) {\n        super(props);\n        this.state = {\n            selectedSound: 0\n        };\n    }\n\n    // TODO: Make both of these support filtered key events.\n    handlePrevious = (event) => {\n        this.setState((prevState, prevProps) => {\n            const nextSelectedSound = prevState.selectedSound === 0 ? (soundDefs.length - 1) : prevState.selectedSound - 1;\n            return { selectedSound: nextSelectedSound};\n        });\n    }\n\n    handleNext = (event) => {\n        this.setState((prevState, prevProps) => {\n            const nextSelectedSound = prevState.selectedSound === (soundDefs.length - 1) ? 0 : prevState.selectedSound + 1;\n            return { selectedSound: nextSelectedSound};\n        });\n    }\n\n    render () {\n        const selectedSoundDef = soundDefs[this.state.selectedSound]\n        return(<div className=\"picker-panel\">\n            <SampleSoundButton\n                name={selectedSoundDef.name}\n                path={selectedSoundDef.path}\n                loop={selectedSoundDef.loop}\n                toneStarted={this.props.toneStarted}\n                toneStartHook={this.props.toneStartHook}\n            />\n            <div>\n                <button className=\"previous\" onClick={this.handlePrevious}>previous</button>\n                <button className=\"next\" onClick={this.handleNext}>next</button>\n            </div>\n        </div>);\n    }\n}\n\n","import SampleSoundButton from './SampleSoundButton';\n\nimport {Panner, Oscillator} from 'tone';\n\n// We cannot pick up the default properties via inheritance, so we extemd them manually.\nconst defaultProps = Object.assign({}, SampleSoundButton.defaultProps, {\n    pannerStart: 0,   // the starting position of the panner, where -1 is hard left, 0 is dead centre, and 1 is hard right.\n\n    oscFreq: 4,       // The frequency of the wave in seconds.\n    oscType: \"sine\",  // Supports \"sine\", \"sawtooth\", and an incredible range other waves.  Also supports partials, like \"sine2\"\n    oscPhase: 90      // Phase in \"degrees\", repeating every 360.    \n});\n\nexport default class PanningSampleSoundButton extends SampleSoundButton {\n    static defaultProps = defaultProps\n\n    constructor (props) {\n        super(props);\n\n        // Rewire initial sound configuration.\n        const panner = new Panner(props.pannerStart).toDestination();\n\n        const osc = new Oscillator({\n            frequency: props.oscFreq,\n            type:      props.oscType,\n            phase:     props.oscPhase\n        });\n        osc.connect(panner.pan);\n        osc.start();\n        this.player.disconnect();\n        this.player.connect(panner);\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport SampleSoundButton from './SampleSoundButton';\nimport SoundPicker from './SoundPicker';\nimport PanningSampleSoundButton from './PanningSampleSoundButton';\n\nimport {start} from 'tone';\n\nimport './index.css';\n\n// An enclosing environment that ensures that Tone is started on the first \n// user input, and that it is only started once.\n\nclass TonePanel extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      toneStarted: false,\n      tonePromise: false\n    };\n  }\n\n  toneStartHook = () => {\n    if (this.state.tonePromise) {\n      return this.state.tonePromise;\n    }\n    else {\n      const tonePromise = start();\n      tonePromise.then(() => {\n        this.setState({ toneStarted: true});\n      });\n      this.setState({ tonePromise: tonePromise});\n      return tonePromise;\n    }\n  }\n\n  render () {\n    return(\n      <React.Fragment>\n        <h1>React + Tone.js Demos</h1>\n\n        <p>This page presents a few sample sound components created using React and <a href=\"https://tonejs.github.io\">Tone.js</a>.</p>\n\n        <h2>Starting / Stopping Sounds</h2>\n\n        <p>Here is a sound that plays once when you click it.  You can stop it manually while it's playing.  The button UI will also update when the sound finishes playing.</p>\n\n        <SampleSoundButton\n          name=\"Phone Dial\"\n          path=\"./sounds/fisher-price-dial.wav\"\n          toneStarted={this.state.toneStarted}\n          toneStartHook={this.toneStartHook}\n        />\n\n        <p>Here is a sound that loops, it will not stop and the button UI will not update until you click the button again.</p>\n\n        <SampleSoundButton\n          name=\"Bass Drone\"\n          path=\"./sounds/analog-lab-bass-drone.wav\"\n          loop={true}\n          toneStarted={this.state.toneStarted}\n          toneStartHook={this.toneStartHook}\n        />\n\n        <h2>Sound Picker</h2>\n\n        <p>\n          Here is a \"picker\" that lets you try all of the sample sounds in this directory.  It also demonstrates making key\n          parameters configurable in real time.  When you change the sound, the previous sound will stop playing.\n        </p>\n\n        <SoundPicker toneStarted={this.state.toneStarted} toneStartHook={this.toneStartHook}/>\n\n        <h2>Panner Demo</h2>\n\n        <p>\n          Here is a sound that is \"panned\" from one ear to the other.  It is timed to match the tempo of the sequence so\n          that each \"beat\" appears to be traveling from one ear to the other.\n        </p>\n\n        <PanningSampleSoundButton\n            name=\"Panned Loop (L -> R)\"\n            path=\"./sounds/wavestation-intoamaze.wav\"\n            loop={true}\n            toneStarted={this.state.toneStarted}\n            toneStartHook={this.toneStartHook}\n        />\n\n        <p>Here's a sequence with the phase shifted so that the direction appears to be reversed.</p>\n\n        <PanningSampleSoundButton\n            name=\"Panned Loop (L <- R)\"\n            path=\"./sounds/analog-lab-bass-drone.wav\"\n            oscPhase={270}\n            loop={true}\n            toneStarted={this.state.toneStarted}\n            toneStartHook={this.toneStartHook}\n        />\n\n        <p>\n          Although somewhat effective, this seems unlikely to be precisely readable enough to convey something like\n          speed, and is a bit tiring to listen to for more than a few seconds.\n        </p>\n      </React.Fragment>\n    )\n  }\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <TonePanel/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}