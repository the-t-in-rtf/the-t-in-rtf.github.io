{"version":3,"sources":["SampleSoundButton.js","SoundPicker.js","PanningSampleSoundButton.js","GridStrument.js","PanningGridStrument.js","BoundedPanningGridStrument.js","index.js"],"names":["SampleSoundButton","props","onLoaded","setState","isLoaded","onStop","isPlaying","handleClick","event","preventDefault","toggleSound","handleKeyDown","watchedKeys","indexOf","key","player","Player","path","onstop","loop","toDestination","state","prevProps","prevState","this","stop","load","then","toneStarted","toneStartHook","start","className","playingClass","stoppedClass","onKeyDown","onClick","playingLeader","stoppedLeader","name","React","Component","defaultProps","soundDefs","SoundPicker","handlePrevious","selectedSound","length","handleNext","selectedSoundDef","Object","assign","pannerStart","oscFreq","oscType","oscPhase","PanningSampleSoundButton","panner","Panner","osc","Oscillator","frequency","type","phase","connect","pan","disconnect","GridStrument","initialiseSampler","sampler","Sampler","urls","samplerURLs","release","samplerRelease","baseUrl","samplerBaseURL","nextCol","cursorCol","minCol","maxCol","nextRow","cursorRow","minRow","maxRow","playNote","octave","samplerBaseOctave","numRows","noteName","noteByColumn","releaseAll","triggerAttack","componentDidUpdate","drawGrid","leftGutterX","topGutterY","gridCells","row","col","numCols","x","cellWidth","y","cellHeight","push","width","height","fill","stroke","strokeWidth","startCol","startRow","cursorCx","cursorCy","Container","Row","Col","md","tabIndex","id","offset","stopColor","cx","cy","r","PanningGridStrument","initialisePanner","noteByRow","middleCol","newPanValue","rampTo","samplerNoteDuration","Gridstrument","boundedPanningGridStrumentDefaults","gainCutoffOutOfBounds","reverbDecayOutOfBounds","reverbWetnessOutOfBounds","lowpassDampening","lowpassDelayTime","lowpassResonanceOutOfBounds","BoundedPanningGridStrument","initialiseBoundaryEffects","gain","Gain","reverb","Reverb","decay","wet","lowpass","LowpassCombFilter","dampening","delayTime","resonance","distanceOutOfBounds","position","numCells","Math","abs","value","colsOutOfBounds","rowsOutOfBounds","cellsOutOfBounds","sqrt","newWetness","min","newGain","newResonance","TonePanel","tonePromise","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7314234e.chunk.js","sourcesContent":["// TODO: Add flow\nimport React from 'react';\n\nimport {Player} from \"tone\";\n\nimport './SampleSoundButton.css'\n\nexport default class SampleSoundButton extends React.Component {\n    static defaultProps = {\n        name: \"Sound\",\n        playingClass: \"playing\",\n        stoppedClass: \"stopped\",\n        playingLeader: \"Stop\",\n        stoppedLeader: \"Play\",\n        watchedKeys: [\"Enter\", \"Space\"]\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.player = new Player(props.path, this.onLoaded);\n        this.player.onstop = this.onStop;\n        this.player.loop = this.props.loop;\n        this.player.toDestination();\n\n        // TODO: Track whether we're loaded yet.\n\n        this.state = {\n            isLoaded: false,\n            isPlaying: false\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // Make looping independently configurable.\n        this.player.loop = this.props.loop;\n\n        // Reload the sound when the path changes.\n        if (prevProps.path !== this.props.path) {\n            // Stop the sound if it's playing.\n            if (this.player && this.player.state === \"started\") {\n                this.player.stop(); // This will also eventually change isPlaying for us, but we need it sooner.\n                this.setState({ isPlaying: false});\n            }\n\n            this.setState({isLoaded: false });\n            const loadPromise = this.player.load(this.props.path);\n            loadPromise.then(this.onLoaded)\n        }\n    }\n\n    componentWillUnmount () {\n        if (this.player && this.player.state === \"started\") {\n            this.player.stop();\n        }\n    }\n\n    onLoaded = () => {\n        // TODO: This may be hit before the component is actually mounted.\n        this.setState({ isLoaded: true });\n    }\n\n    onStop = () => {\n        this.setState({ isPlaying: false});\n    }\n\n    handleClick = (event) => {\n        event.preventDefault();\n        this.toggleSound();\n    }\n\n    handleKeyDown = (event) => {\n        if (this.props.watchedKeys.indexOf(event.key) !== -1) {\n            event.preventDefault();\n            this.toggleSound();\n        }\n    }\n\n    toggleSound() {\n        if (!this.props.toneStarted && this.props.toneStartHook) {\n            // Start Tone.js asynchronously.\n            const toneStartPromise = this.props.toneStartHook()\n            toneStartPromise.then(() => {\n                // Call ourselves again once the promise returns.\n                this.toggleSound();\n            });\n        }\n        else {\n            if (this.player.state === \"started\") {\n                this.player.stop();\n            }\n            else {\n                this.setState({ isPlaying: true});\n                this.player.start();\n            }\n        }\n    }\n\n    render () {\n        const { isLoaded, isPlaying} = this.state;\n        if (isLoaded) {\n            return(\n                <button\n                    className={ this.state.isPlaying ? this.props.playingClass : this.props.stoppedClass }\n                    onKeyDown={this.handleKeyDown}\n                    onClick={this.handleClick}\n                >\n                    <div className=\"button-text\">\n                        { isPlaying ? this.props.playingLeader : this.props.stoppedLeader} {this.props.name}\n                    </div>\n                </button>\n            )\n        }\n        else {\n            return <div>Loading sound...</div>;\n        }\n    }\n}","import React from 'react';\n\nimport SampleSoundButton from \"./SampleSoundButton\";\n\nimport './SoundPicker.css';\n\nconst soundDefs = [\n    { name: \"Along the Trail\", path: \"./sounds/wavestation-along-the-trail.wav\", loop: true },\n    { name: \"Bass Drone\", path: \"./sounds/analog-lab-bass-drone.wav\", loop: true },\n    { name: \"Bongo\", path: \"./sounds/bongo.wav\" },\n    { name: \"Droid Bass\", path: \"./sounds/wavestation-droid-bass.wav\", loop: true },\n    { name: \"Droid Bass 2\", path: \"./sounds/wavestation-droid-bass-2.wav\", loop: true },\n    { name: \"Euro Percussion Organ\", path: \"./sounds/wavestation-euro-perc-organ.wav\", loop: true },\n    { name: \"Fingernail on Cardboard Tube\", path: \"./sounds/cardboard-tube-fingernail.wav\"},\n    { name: \"Into A Maze\", path: \"./sounds/wavestation-intoamaze.wav\", loop: true },\n    { name: \"Kalimba\", path: \"./sounds/wavestation-kalimba.wav\", loop: true },\n    { name: \"Marimba\", path: \"./sounds/wavestation-marimba.wav\", loop: true },\n    { name: \"Nut Pan Beat\", path: \"./sounds/wavestation-nutpanbeat.wav\", loop: true },\n    { name: \"Ocean Drum (Circles)\", path: \"./sounds/ocean-drum-circles.wav\"},\n    { name: \"Ocean Drum (Pen Cap)\", path: \"./sounds/ocean-drum-pen-cap.wav\"},\n    { name: \"Ocean Drum (Vertical Line)\", path: \"./sounds/ocean-drum-vertical-line.wav\"},\n    { name: \"Pen on Cardboard\", path: \"./sounds/pen-cardboard-lines.wav\", loop: true },\n    { name: \"Pen on Cardboard 2\", path: \"./sounds/pen-cardboard-lines-2.wav\", loop: true},\n    { name: \"Pencil Drawing\", path: \"./sounds/pencil-cardboard-shading.wav\"},\n    { name: \"Phone Dial\", path: \"./sounds/fisher-price-dial.wav\"},\n    { name: \"Phone Dial (Forward)\", path: \"./sounds/fisher-price-phone-dial-forward.wav\"},\n    { name: \"Phone Dial (Release)\", path: \"./sounds/fisher-price-phone-dial-release.wav\"},\n    { name: \"Phone Rolling\", path: \"./sounds/fisher-price-phone-rolling.wav\"},\n    { name: \"Phone Rolling (Backward)\", path: \"./sounds/fisher-price-phone-rolling-backward.wav\"},\n    { name: \"Robotic Sequence\", path: \"./sounds/analog-lab-robotic-sequence.wav\", loop: true },\n    { name: \"Techno Sequence\", path: \"./sounds/analog-lab-techno-sequence.wav\", loop: true },\n    { name: \"Toy Box (Falling)\", path: \"./sounds/wavestation-toy-box-falling.wav\", loop: true },\n];\n\nexport default class SoundPicker extends React.Component {\n    static defaultProps = {\n        watchedKeys: [\"Enter\", \"Space\"]\n    }\n\n    constructor (props) {\n        super(props);\n        this.state = {\n            selectedSound: 0\n        };\n    }\n\n    // TODO: Make both of these support filtered key events.\n    handlePrevious = (event) => {\n        this.setState((prevState, prevProps) => {\n            const nextSelectedSound = prevState.selectedSound === 0 ? (soundDefs.length - 1) : prevState.selectedSound - 1;\n            return { selectedSound: nextSelectedSound};\n        });\n    }\n\n    handleNext = (event) => {\n        this.setState((prevState, prevProps) => {\n            const nextSelectedSound = prevState.selectedSound === (soundDefs.length - 1) ? 0 : prevState.selectedSound + 1;\n            return { selectedSound: nextSelectedSound};\n        });\n    }\n\n    render () {\n        const selectedSoundDef = soundDefs[this.state.selectedSound]\n        return(<div className=\"picker-panel\">\n            <SampleSoundButton\n                name={selectedSoundDef.name}\n                path={selectedSoundDef.path}\n                loop={selectedSoundDef.loop}\n                toneStarted={this.props.toneStarted}\n                toneStartHook={this.props.toneStartHook}\n            />\n            <div>\n                <button className=\"previous\" onClick={this.handlePrevious}>previous</button>\n                <button className=\"next\" onClick={this.handleNext}>next</button>\n            </div>\n        </div>);\n    }\n}\n\n","import SampleSoundButton from './SampleSoundButton';\n\nimport {Panner, Oscillator} from 'tone';\n\n// We cannot pick up the default properties via inheritance, so we extemd them manually.\nconst defaultProps = Object.assign({}, SampleSoundButton.defaultProps, {\n    pannerStart: 0,   // the starting position of the panner, where -1 is hard left, 0 is dead centre, and 1 is hard right.\n\n    oscFreq: 4,       // The frequency of the wave in seconds.\n    oscType: \"sine\",  // Supports \"sine\", \"sawtooth\", and an incredible range other waves.  Also supports partials, like \"sine2\"\n    oscPhase: 90      // Phase in \"degrees\", repeating every 360.    \n});\n\nexport default class PanningSampleSoundButton extends SampleSoundButton {\n    static defaultProps = defaultProps\n\n    constructor (props) {\n        super(props);\n\n        // Rewire initial sound configuration.\n        const panner = new Panner(props.pannerStart).toDestination();\n\n        const osc = new Oscillator({\n            frequency: props.oscFreq,\n            type:      props.oscType,\n            phase:     props.oscPhase\n        });\n        osc.connect(panner.pan);\n        osc.start();\n        this.player.disconnect();\n        this.player.connect(panner);\n    }\n}\n","import React from \"react\";\n\nimport {Sampler} from \"tone\";\n\nimport Col from \"react-bootstrap/Col\"\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nimport './GridStrument.css';\n\nexport const gridstrumentDefaultProps = {\n    startRow: 2,\n    startCol: 2,\n    minCol:  -2,\n    maxCol:   6,\n    minRow:  -2,\n    maxRow:   6,\n    numCols:  5,\n    numRows:  5,\n    cellHeight: 30,\n    cellWidth: 30,\n    watchedKeys: [\"ArrowLeft\", \"ArrowRight\", \"ArrowUp\", \"ArrowDown\", \"Enter\"],\n    samplerBaseOctave: 2,\n    samplerBaseURL: \"./sounds/\",\n    samplerRelease: 1,\n    samplerURLs: {\n        \"E2\": \"bongo.wav\"\n    }\n}\n\nexport default class GridStrument extends React.Component {\n    static noteByColumn = {\n        \"-2\": \"C\",\n        \"-1\": \"C#\",\n        \"0\":  \"D\",\n        \"1\":  \"D#\",\n        \"2\":  \"E\",\n        \"3\":  \"F\",\n        \"4\":  \"F#\",\n        \"5\":  \"G\",\n        \"6\":  \"A\"\n    }\n\n    static defaultProps = gridstrumentDefaultProps;\n    \n    constructor (props) {\n        super(props);\n\n        // Initialize sound and filters.\n        this.initialiseSampler(props);\n\n        this.state = {\n            cursorCol: props.startCol,\n            cursorRow: props.startRow\n        };\n    }\n\n    initialiseSampler = (props) => {\n        // TODO: The Sampler doesn't allow you to loop sounds, so we'll probably want to write our own wrapper around Tone.Player with scaling for pitch.\n        this.sampler = new Sampler({\n            urls: props.samplerURLs,\n            release: props.samplerRelease,\n            baseUrl: props.samplerBaseURL\n        });\n        this.sampler.toDestination();\n    }\n\n    handleKeyDown = (event) => {\n        if (event.key && this.props.watchedKeys.indexOf(event.key) !== -1) {\n            event.preventDefault();\n            switch (event.key) {\n                case \"ArrowLeft\":\n                    this.setState((prevState) => {\n                        const nextCol = prevState.cursorCol - 1;\n                        if (nextCol >= this.props.minCol) {\n                            return { cursorCol: nextCol};\n                        }\n                        else {\n                            return null;\n                        }\n                    });\n                    break;\n                case \"ArrowRight\":\n                    this.setState((prevState) => {\n                        const nextCol = prevState.cursorCol + 1;\n                        if (nextCol <= this.props.maxCol) {\n                            return { cursorCol: nextCol};\n                        }\n                        else {\n                            return null;\n                        }\n                    });\n                break;\n                case \"ArrowUp\":\n                this.setState((prevState) => {\n                    const nextRow = prevState.cursorRow - 1;\n                    if (nextRow >= this.props.minRow) {\n                        return { cursorRow: nextRow};\n                    }\n                    else {\n                        return null;\n                    }\n                });\n                break;\n                case \"ArrowDown\":\n                    this.setState((prevState) => {\n                        const nextRow = prevState.cursorRow + 1;\n                        if (nextRow <= this.props.maxRow) {\n                            return { cursorRow: nextRow};\n                        }\n                        else {\n                            return null;\n                        }\n                    });\n                    break;\n                case \"Enter\":\n                    this.playNote();\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n    playNote = () => {\n        const octave = this.props.samplerBaseOctave + (this.props.numRows - this.state.cursorRow);\n        const noteName = GridStrument.noteByColumn[this.state.cursorCol];\n\n        this.sampler.releaseAll();\n        this.sampler.triggerAttack([noteName + octave]);\n    }\n\n    componentDidUpdate = (prevProps, prevState) => {\n        if (prevState.cursorCol !== this.state.cursorCol || prevState.cursorRow !== this.state.cursorRow) {\n            this.playNote();\n        }\n    }\n\n    drawGrid = (leftGutterX, topGutterY) => {\n        const gridCells = [];\n        for (let row = 0; row < this.props.numRows; row++) {\n            for (let col = 0; col < this.props.numCols; col++) {\n                const x = leftGutterX + ((col - 1) * this.props.cellWidth);\n                const y = topGutterY + ((row - 1) * this.props.cellHeight);\n                const key = row + \"-\" + col;\n                gridCells.push(<rect key={key} x={x} y={y} width={this.props.cellWidth} height={this.props.cellHeight} fill=\"white\" stroke=\"black\" strokeWidth=\"2\"/>);\n            }\n        }\n        return gridCells;\n    }\n\n    render() {\n        const totalCols = (this.props.maxCol - this.props.minCol) + 1;\n        const height = totalCols * this.props.cellHeight;\n        const totalRows = (this.props.maxRow - this.props.minRow) + 1;\n        const width = totalRows * this.props.cellWidth;\n\n        const leftGutterX = (1 - this.props.minCol) * this.props.cellWidth; \n        const topGutterY  = (1 - this.props.minRow) * this.props.cellHeight;\n\n        const cursorCx = leftGutterX + (this.props.cellWidth * (this.state.cursorCol - 0.5));\n        const cursorCy = topGutterY + (this.props.cellWidth *  (this.state.cursorRow - 0.5));\n        \n        return(<Container className=\"gridstrument\">\n                <Row>\n                    <Col md=\"6\">\n                        <svg width={width} height={height} tabIndex=\"1\" onKeyDown={this.handleKeyDown}>\n                            <defs>\n                                <radialGradient id=\"boundaries\">\n                                <stop offset=\"35%\" stopColor=\"grey\" />\n                                <stop offset=\"75%\" stopColor=\"black\" />\n                                </radialGradient>\n                            </defs>\n\n                            <rect\n                                x=\"0\"\n                                y=\"0\"\n                                width={width}\n                                height={height}\n                                fill=\"url('#boundaries')\"\n                            />\n\n                            {this.drawGrid(leftGutterX, topGutterY)}\n\n                            <circle\n                                cx={cursorCx}\n                                cy={cursorCy}\n                                r={this.props.cellWidth * 0.3 }\n                                fill=\"#ffcccc\"\n                                stroke=\"#ff0000\"\n                                strokeWidth=\"1%\"\n                            />\n                        </svg>         \n                    </Col>\n                    <Col md=\"6\">\n                        <div className=\"alert alert-dark\">\n                            Focus on the element, then use arrow keys to change position.   The note corresponding to your position will play as you move.  You can also hit the enter key to repeat the note at the current position.\n                        </div>\n                    </Col>\n                </Row>\n            </Container>);\n    }\n}\n\n// TODO: Write a component that plays the note with effects depending on whether we're out of bounds.\n","import Gridstrument from './GridStrument';\n\nimport {Panner} from \"tone\";\n\nexport default class PanningGridStrument extends Gridstrument {\n    static defaultProps = Gridstrument.defaultProps;\n\n    static noteByRow = {\n        \"-2\": \"G#\",\n        \"-1\": \"G\",\n        \"0\":  \"F#\",\n        \"1\":  \"F\",\n        \"2\":  \"E\",\n        \"3\":  \"D#\",\n        \"4\":  \"D\",\n        \"5\":  \"C#\",\n        \"6\":  \"C\"\n    }\n\n    constructor (props) {\n        super(props);\n\n        // Initialize panner.\n        this.initialisePanner(props);\n    }\n\n    initialisePanner = (props) => {\n        this.sampler.disconnect();\n        this.panner = new Panner(0);\n        this.panner.toDestination();\n\n        this.sampler.connect(this.panner);\n    }\n\n    playNote = () => {\n        // This ensures that the last note stops before we play the next, but can result in a stutter.\n        // TODO: When we convert to using Tone.Player, we should ensure that we have a way to play longer sounds (such as sequences) from a particular point in time.\n        this.sampler.releaseAll();\n        const noteName    = PanningGridStrument.noteByRow[this.state.cursorRow];\n        const middleCol   = (this.props.maxCol + this.props.minCol) / 2;\n        const distance    = (this.state.cursorCol - middleCol);\n        const newPanValue = distance/4;\n        this.panner.pan.rampTo(newPanValue, this.props.samplerNoteDuration);\n        this.sampler.triggerAttack([noteName + this.props.samplerBaseOctave]);\n    }\n}","import Gridstrument from './GridStrument';\nimport PanningGridStrument from './PanningGridStrument';\n\nimport {Reverb, Gain, LowpassCombFilter} from 'tone';\n\nconst boundedPanningGridStrumentDefaults = Object.assign({}, Gridstrument.defaultProps, {\n    gainCutoffOutOfBounds: 0,\n    reverbDecayOutOfBounds: 0.4,\n    reverbWetnessOutOfBounds: 0,\n    lowpassDampening : 440,\n    lowpassDelayTime : 0.00003, // Must be non-zero, but we don't want it to \n    lowpassResonanceOutOfBounds: 0\n});\n\nexport default class BoundedPanningGridStrument extends PanningGridStrument {\n    static defaultProps = boundedPanningGridStrumentDefaults;\n\n    constructor (props) {\n        super(props);\n\n        this.initialiseBoundaryEffects(props);\n    }\n\n    initialiseBoundaryEffects = (props) => {\n        this.panner.disconnect();\n        \n        // https://tonejs.github.io/docs/14.7.39/interface/GainOptions\n        this.gain = new Gain({\n            gain: 1\n        });\n\n        this.panner.connect(this.gain);\n        \n        // https://tonejs.github.io/docs/14.7.39/interface/ReverbOptions\n        this.reverb = new Reverb({\n            decay:  this.props.reverbDecayOutOfBounds, \n            wet: 0 // disabled by default.\n        });\n\n        this.gain.connect(this.reverb);\n\n        // https://tonejs.github.io/docs/14.7.39/interface/LowpassCombFilterOptions\n        this.lowpass = new LowpassCombFilter({\n            dampening: this.props.lowpassDampening,\n            delayTime: this.props.lowpassDelayTime,\n            resonance: 0\n        });\n        \n        this.reverb.connect(this.lowpass);\n        this.lowpass.toDestination();\n\n        // TODO: Add Low Pass Filter, and make sure we can enable/ disable combinations of options.\n        // dampening : Frequency\n        // delayTime : Time\n        // resonance : NormalRange\n    }\n\n    distanceOutOfBounds = (position, numCells) => {\n        if (position < 0) { return Math.abs(position);}\n        else if (position > (numCells - 1)) {\n            return position - (numCells - 1);\n        }\n        else {\n            return 0;\n        }\n    }\n\n    playNote = () => {\n        // This ensures that the last note stops before we play the next, but can result in a stutter.\n        // TODO: When we convert to using Tone.Player, we should ensure that we have a way to play longer sounds (such as sequences) from a particular point in time.\n        this.sampler.releaseAll();\n        const noteName    = PanningGridStrument.noteByRow[this.state.cursorRow];\n        const middleCol   = (this.props.maxCol + this.props.minCol) / 2;\n        const distance    = (this.state.cursorCol - middleCol);\n        const newPanValue = distance/4;\n\n        // TODO: Try setting values immediately instead of ramping the values up and down.\n        this.panner.pan.value = newPanValue;\n\n        // Calculate distance out of bounds on both axes and then combine using the square of the sum of the squares (ala pythagoras).\n        const colsOutOfBounds = this.distanceOutOfBounds(this.state.cursorCol, this.props.numCols); \n        const rowsOutOfBounds = this.distanceOutOfBounds(this.state.cursorRow, this.props.numRows);\n        const cellsOutOfBounds = Math.sqrt( (colsOutOfBounds * colsOutOfBounds) + (rowsOutOfBounds * rowsOutOfBounds));\n\n        // Adjust the reverb based on the distance out of bounds.\n        if (this.props.reverbDecayOutOfBounds > 0) {\n            const newWetness = Math.min(1, this.props.reverbWetnessOutOfBounds * cellsOutOfBounds);\n            this.reverb.wet.value = newWetness;\n        }\n\n        // Adjust the volume based on the distance out of bounds.\n        if (this.props.gainCutoffOutOfBounds > 0) {\n            const newGain = 1 - (this.props.gainCutoffOutOfBounds * cellsOutOfBounds);\n            this.gain.gain.value = newGain;\n        }\n\n        // Adjust the lowpass resonance based on the distance out of bounds.\n        if (this.props.lowpassResonanceOutOfBounds > 0) {\n            const newResonance = Math.min(1, (this.props.lowpassResonanceOutOfBounds * cellsOutOfBounds));\n            this.lowpass.resonance.value = newResonance;\n        }\n\n        this.sampler.triggerAttack([noteName + this.props.samplerBaseOctave]);\n    }\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Container from \"react-bootstrap/Container\";\n\nimport SampleSoundButton from './SampleSoundButton';\nimport SoundPicker from './SoundPicker';\nimport PanningSampleSoundButton from './PanningSampleSoundButton';\n\nimport {start} from 'tone';\n\nimport GridStrument from './GridStrument';\nimport PanningGridStrument from './PanningGridStrument';\nimport BoundedPanningGridStrument from './BoundedPanningGridStrument';\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n// An enclosing environment that ensures that Tone is started on the first \n// user input, and that it is only started once.\n\nclass TonePanel extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      toneStarted: false,\n      tonePromise: false\n    };\n  }\n\n  toneStartHook = () => {\n    if (this.state.tonePromise) {\n      return this.state.tonePromise;\n    }\n    else {\n      const tonePromise = start();\n      tonePromise.then(() => {\n        this.setState({ toneStarted: true});\n      });\n      this.setState({ tonePromise: tonePromise});\n      return tonePromise;\n    }\n  }\n\n  render () {\n    return(\n      <Container>\n        <h1>React + Tone.js Demos</h1>\n\n        <p>This page presents a few sample sound components created using React and <a href=\"https://tonejs.github.io\">Tone.js</a>.</p>\n\n        <h2>Starting / Stopping Sounds</h2>\n\n        <p>Here is a sound that plays once when you click it.  You can stop it manually while it's playing.  The button UI will also update when the sound finishes playing.</p>\n\n        <SampleSoundButton\n          name=\"Phone Dial\"\n          path=\"./sounds/fisher-price-dial.wav\"\n          toneStarted={this.state.toneStarted}\n          toneStartHook={this.toneStartHook}\n        />\n\n        <p>Here is a sound that loops, it will not stop and the button UI will not update until you click the button again.</p>\n\n        <SampleSoundButton\n          name=\"Bass Drone\"\n          path=\"./sounds/analog-lab-bass-drone.wav\"\n          loop={true}\n          toneStarted={this.state.toneStarted}\n          toneStartHook={this.toneStartHook}\n        />\n\n        <h2>Sound Picker</h2>\n\n        <p>\n          Here is a \"picker\" that lets you try all of the sample sounds in this directory.  It also demonstrates making key\n          parameters configurable in real time.  When you change the sound, the previous sound will stop playing.\n        </p>\n\n        <SoundPicker toneStarted={this.state.toneStarted} toneStartHook={this.toneStartHook}/>\n\n        <h2>Using a Panned Loop to Suggest Direction</h2>\n\n        <p>\n          Here is a sound loop that is repeatedly \"panned\" from one ear to the other.  It is timed to match the tempo\n          of the sequence so that each \"beat\" appears to be traveling from one ear to the other.  The oscillator that\n          we use for this is a sine wave, we change the starting phase so that played notes occur on the right part of\n          the \"slope\".\n        </p>\n\n        <PanningSampleSoundButton\n            name=\"Panned Loop (L -> R)\"\n            path=\"./sounds/wavestation-intoamaze.wav\"\n            loop={true}\n            toneStarted={this.state.toneStarted}\n            toneStartHook={this.toneStartHook}\n        />\n\n        <p>Here's another sound loop with the phase shifted so that the direction appears to be reversed.</p>\n\n        <PanningSampleSoundButton\n            name=\"Panned Loop (L <- R)\"\n            path=\"./sounds/analog-lab-bass-drone.wav\"\n            oscPhase={270}\n            loop={true}\n            toneStarted={this.state.toneStarted}\n            toneStartHook={this.toneStartHook}\n        />\n\n        <p>\n          Although somewhat effective, this seems unlikely to be precisely readable enough to convey something like\n          speed, and is a bit tiring to listen to for more than a few seconds.\n        </p>\n\n        <h2>Suggesting Position Using Pitch</h2>\n\n        <p>\n          Some MIDI grid controllers are tuned so that the lowest note is on the bottom left, and the highest note is\n          on the upper right.  Each cell corresponds to a single note.  In some tunings, the cell to the right of\n          a given cell corresponds to the next highest note, either a single step higher or the next note in a\n          particular key.  In some tunings, the next highest row of cells can be thought of like the next set of keys\n          on a piano keyboard.  For example, if there are eight columns in the grid, the next cell up is eight steps (or\n          notes in a key) higher.  In other tunings, the next cell up is an octave higher.\n        </p>\n\n        <p>\n          My initial thinking about easily representing a specific sound for each cell in our grid was to use two of\n          these conventions. Each cell would be one note higher than the cell to the left, and one octave higher than\n          the cell above it, as demonstrated in the following examples.\n        </p>\n\n        <h3>Percussive Sound</h3>\n\n        <p>With a short percussive sound, the range of octaves scales well enough, but is a bit soft on the ends of the range.</p>\n\n        <GridStrument/>\n\n        <h3>Arpeggiated Sound</h3>\n\n        <p>A longer sound is more difficult to scale over the range, even if you loop or record long samples, the higher octaves quickly become gibberish.</p>\n\n        <GridStrument samplerURLs= {{ \"E2\": \"analog-lab-bass-drone.wav\" }} />\n          \n        <h2>Suggesting Position Using Pitch and Panning</h2>\n\n        <p>\n          The above approach gives each cell a distinct pitch, but ends up covering a huge range of notes.  It might\n          be difficult to find an instrument that is audible and pleasant to listen to over the whole range.  If we\n          reserve pitch for the rows and use panning to represent how far left or right the column is, then each\n          character's voice can stay roughly within the same octave.  This lends itself to approaches like giving\n          each character their own octave.\n        </p>\n\n        <h3>Percussive Sound</h3>\n\n        <PanningGridStrument/>\n\n        <h3>Arpeggiated Sound</h3>\n\n        <PanningGridStrument samplerURLs= {{ \"E2\": \"analog-lab-robotic-sequence.wav\" }} />\n\n       <h2>Auditising Boundaries</h2>\n\n       <p>\n         The grid used in the last few examples has boundaries, i.e. cells that are \"in bounds\" (white) and cells that\n         are \"out of bounds\" (black).  This section demonstrates strategies for changing the sound to reflect whether\n         (and how far) out of bounds the cursor is.\n        </p>\n\n        <h3>Suggesting Boundaries Using Sound Volume</h3>\n\n        <BoundedPanningGridStrument gainCutoffOutOfBounds=\"0.4\"/>\n\n        <h3>Suggesting Boundaries Using Reverb</h3>\n\n        <BoundedPanningGridStrument reverbWetnessOutOfBounds={0.35}/>\n\n\n        <h3>Suggesting Boundaries Using a Low Pass Filter</h3>\n\n        <BoundedPanningGridStrument lowpassResonanceOutOfBounds={0.35}/>\n        \n\n        <h3>Suggesting Boundaries Using All Three</h3>\n\n        <BoundedPanningGridStrument gainCutoffOutOfBounds=\"0.4\" reverbWetnessOutOfBounds={0.35} lowpassResonanceOutOfBounds={0.35}/>\n      </Container>\n    )\n  }\n}\n\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <TonePanel/>\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\nReactDOM.render(<TonePanel/>, document.getElementById('root'));\n"],"sourceRoot":""}