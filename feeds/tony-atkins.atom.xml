<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The "T" in RtF - Tony Atkins</title><link href="https://the-t-in-rtf.github.io/" rel="alternate"></link><link href="https://the-t-in-rtf.github.io/feeds/tony-atkins.atom.xml" rel="self"></link><id>https://the-t-in-rtf.github.io/</id><updated>2019-11-18T11:00:00+01:00</updated><entry><title>Adding versioning support to the Solutions Registry, Part 1.</title><link href="https://the-t-in-rtf.github.io/lsr-versioning-part-one.html" rel="alternate"></link><published>2019-11-18T11:00:00+01:00</published><updated>2019-11-18T11:00:00+01:00</updated><author><name>Tony Atkins &lt;tony@raisingthefloor.org&gt;</name></author><id>tag:the-t-in-rtf.github.io,2019-11-18:/lsr-versioning-part-one.html</id><summary type="html">&lt;p&gt;A summary of the issues involved in adding versioning support to the Solutions Registry and Morphic.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Morphic takes an expression of a user's needs and wants and reconfigure a machine to reflect those needs and wants as
well as possible.  The user's needs and wants are expressed as "preferences", which may either be a "generic
preference", or specific to a particular application.  These are transformed into "settings", which are expressed in
terms of the specific solutions available on a given machine.&lt;/p&gt;
&lt;p&gt;A "solution" is how we represent a specific piece of software that a setting relates to.  These may be features of the
operating system, or third-party applications.  Each entry within the Solutions Registry defines:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The context (generally operating system) in which a solution may be found.&lt;/li&gt;
&lt;li&gt;How to detect whether the solution is running.&lt;/li&gt;
&lt;li&gt;How to start and stop the solution.&lt;/li&gt;
&lt;li&gt;How the solution's configuration options are controlled.&lt;/li&gt;
&lt;li&gt;The specific configuration options available for the solution.&lt;/li&gt;
&lt;li&gt;Transformations of the application-specific settings to and from "generic preference terms".&lt;/li&gt;
&lt;li&gt;How to describe the solution and settings when presenting information to an end user.&lt;/li&gt;
&lt;li&gt;How to install the solution if it is not available ("Install on Demand").&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each of these pieces of information is currently only defined for a single version of a given solution.  We have &lt;a href="https://issues.gpii.net/browse/GPII-111"&gt;long identified the need to support multiple
versions of a single "solution"&lt;/a&gt;, and this draft outlines a few related
concerns and possible strategies for adding this key feature.&lt;/p&gt;
&lt;h1&gt;The Problem in More Detail&lt;/h1&gt;
&lt;p&gt;Let's start with a simple example in which we wish to configure a handful of settings for a single solution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{
    &amp;quot;flat&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;JAWS&amp;quot;,
        &amp;quot;contexts&amp;quot;: {
            &amp;quot;gpii-default&amp;quot;: {
                &amp;quot;name&amp;quot;: &amp;quot;Sample JAWS preferences&amp;quot;,
                &amp;quot;preferences&amp;quot;: {
                    &amp;quot;http://registry.gpii.net/applications/com.freedomscientific.jaws&amp;quot;: {
                        &amp;quot;HTML.Acronyms&amp;quot;: 1,
                        &amp;quot;ENU-Global.Volume&amp;quot;: 95
                    }
                },
                &amp;quot;http://registry.gpii.net/applications/com.freedomscientific.jaws/enabled&amp;quot;: true
            }
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;com.freedomscientific.jaws&lt;/code&gt; portion of the two keys above is a unique identifier that correspond to an entry in
the Windows portion of the Solutions Registry.  Here is a greatly simplified version of that entry:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{
    &amp;quot;com.freedomscientific.jaws&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;JAWS&amp;quot;,
        &amp;quot;contexts&amp;quot;: {
            &amp;quot;OS&amp;quot;: [
                {
                    &amp;quot;id&amp;quot;: &amp;quot;win32&amp;quot;
                }
            ]
        },
        &amp;quot;capabilities&amp;quot;: [
            &amp;quot;http://registry\\.gpii\\.net/common/screenReaderTTS/enabled&amp;quot;
        ],
        &amp;quot;settingsHandlers&amp;quot;: {
            &amp;quot;configuration1&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;gpii.settingsHandlers.INISettingsHandler&amp;quot;,
                &amp;quot;liveness&amp;quot;: &amp;quot;manualRestart&amp;quot;,
                &amp;quot;options&amp;quot;: {
                    &amp;quot;filename&amp;quot;: &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.APPDATA}\\Freedom Scientific\\JAWS\\2019\\Settings\\enu\\DEFAULT.JCF&amp;quot;
                },
                &amp;quot;supportedSettings&amp;quot;: {
                    &amp;quot;HTML.Acronyms&amp;quot;: {
                        &amp;quot;schema&amp;quot;: {
                            &amp;quot;title&amp;quot;: &amp;quot;Acronyms&amp;quot;,
                            &amp;quot;description&amp;quot;: &amp;quot;If this is enabled, acronyms with a title attribute will have their title read instead of the on screen text.&amp;quot;,
                            &amp;quot;type&amp;quot;: &amp;quot;number&amp;quot;,
                            &amp;quot;default&amp;quot;: 0,
                            &amp;quot;enum&amp;quot;: [
                                0,
                                1
                            ],
                            &amp;quot;enumLabels&amp;quot;: [
                                &amp;quot;off&amp;quot;,
                                &amp;quot;on&amp;quot;
                            ]
                        }
                    },
                }
            },
            &amp;quot;configuration2&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;gpii.settingsHandlers.INISettingsHandler&amp;quot;,
                &amp;quot;liveness&amp;quot;: &amp;quot;manualRestart&amp;quot;,
                &amp;quot;options&amp;quot;: {
                    &amp;quot;filename&amp;quot;: &amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.APPDATA}\\Freedom Scientific\\JAWS\\2019\\Settings\\VoiceProfiles\\GPII.VPF&amp;quot;
                },
                &amp;quot;supportedSettings&amp;quot;: {
                    &amp;quot;ENU-Global.Volume&amp;quot;: {
                        &amp;quot;schema&amp;quot;: {
                            &amp;quot;title&amp;quot;: &amp;quot;Global Volume&amp;quot;,
                            &amp;quot;description&amp;quot;: &amp;quot;The volume for all announcements.&amp;quot;,
                            &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
                            &amp;quot;minimum&amp;quot;: 10,
                            &amp;quot;maximum&amp;quot;: 100,
                            &amp;quot;default&amp;quot;: 100
                        }
                    }
                },
                &amp;quot;capabilitiesTransformations&amp;quot;: {
                    &amp;quot;ENU-Global\\.Volume&amp;quot;: {
                        &amp;quot;transform&amp;quot;: {
                            &amp;quot;type&amp;quot;: &amp;quot;fluid.transforms.linearScale&amp;quot;,
                            &amp;quot;inputPath&amp;quot;: &amp;quot;http://registry\\.gpii\\.net/common/volumeTTS&amp;quot;,
                            &amp;quot;factor&amp;quot;: 100
                        }
                    }
                },
                &amp;quot;inverseCapabilitiesTransformations&amp;quot;: {
                    &amp;quot;http://registry\\.gpii\\.net/common/volumeTTS&amp;quot;: {
                        &amp;quot;transform&amp;quot;: {
                            &amp;quot;type&amp;quot;: &amp;quot;fluid.transforms.linearScale&amp;quot;,
                            &amp;quot;inputPath&amp;quot;: &amp;quot;ENU-Global\\.Volume&amp;quot;,
                            &amp;quot;factor&amp;quot;: 0.01
                        }
                    }
                }
            }
        },
        &amp;quot;launchHandlers&amp;quot;: {
            &amp;quot;launcher&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;gpii.launchHandlers.flexibleHandler&amp;quot;,
                &amp;quot;options&amp;quot;: {
                    &amp;quot;getState&amp;quot;: [
                        {
                            &amp;quot;type&amp;quot;: &amp;quot;gpii.processReporter.find&amp;quot;,
                            &amp;quot;command&amp;quot;: &amp;quot;jfw.exe&amp;quot;
                        }
                    ],
                    &amp;quot;setTrue&amp;quot;: [
                        {
                            &amp;quot;type&amp;quot;: &amp;quot;gpii.launch.exec&amp;quot;,
                            &amp;quot;command&amp;quot;: &amp;quot;\&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;registry&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\JAWS2019.exe\\}\&amp;quot;&amp;quot;
                        }
                    ],
                    &amp;quot;setFalse&amp;quot;: [
                        {
                            &amp;quot;type&amp;quot;: &amp;quot;gpii.windows.closeProcessByName&amp;quot;,
                            &amp;quot;filename&amp;quot;: &amp;quot;jfw.exe&amp;quot;
                        },
                        {
                            &amp;quot;type&amp;quot;: &amp;quot;gpii.windows.closeProcessByName&amp;quot;,
                            &amp;quot;filename&amp;quot;: &amp;quot;fsSynth32.exe&amp;quot;
                        },
                        {
                            &amp;quot;type&amp;quot;: &amp;quot;gpii.windows.closeProcessByName&amp;quot;,
                            &amp;quot;filename&amp;quot;: &amp;quot;jhookldr.exe&amp;quot;
                        },
                        // New for JAWS 2018 and higher.
                        {
                            &amp;quot;type&amp;quot;: &amp;quot;gpii.windows.closeProcessByName&amp;quot;,
                            &amp;quot;filename&amp;quot;: &amp;quot;ScannerHandler.exe&amp;quot;
                        }
                    ]
                }
            }
        },
        &amp;quot;isInstalled&amp;quot;: [
            {
                &amp;quot;type&amp;quot;: &amp;quot;gpii.deviceReporter.registryKeyExists&amp;quot;,
                &amp;quot;hKey&amp;quot;: &amp;quot;HKEY_LOCAL_MACHINE&amp;quot;,
                &amp;quot;path&amp;quot;: &amp;quot;Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\JAWS2019.exe&amp;quot;,
                &amp;quot;subPath&amp;quot;: &amp;quot;&amp;quot;,
                &amp;quot;dataType&amp;quot;: &amp;quot;REG_SZ&amp;quot;
            }
        ]
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That entry contains multiple key pieces of information that are specific to a particular version of JAWS:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The location of the main INI file.&lt;/li&gt;
&lt;li&gt;The location of the voice profile INI file.&lt;/li&gt;
&lt;li&gt;The location in the registry that we use to confirm whether JAWS is installed.&lt;/li&gt;
&lt;li&gt;The path to the JAWS binary used by the launch handler.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each of these mean that we can only work with a single version of JAWS (currently JAWS 2019).  We have discussed
strategies for creating secondary entries for sub versions, but this only solves the problem of sharing common settings
between solutions, and does not address other issues.&lt;/p&gt;
&lt;p&gt;We have discussed addressing this by defining multiple entries, each of which would use the normal Fluid options merging
to overlay the information unique to their version.  Once we have multiple solutions for &lt;code&gt;com.freedomscientific.jaws.12&lt;/code&gt;,
&lt;code&gt;com.freedomscientific.jaws.2017&lt;/code&gt;, &lt;code&gt;com.freedomscientific.jaws.2018&lt;/code&gt;, &lt;code&gt;com.freedomscientific.jaws.2019&lt;/code&gt;, et cetera, 
we need to answer a few questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How do users express their desire to have an application use a particular setting, and have that respected across versions?&lt;/li&gt;
&lt;li&gt;How do we ensure that only one version is launched?  Which version?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Cross-version Settings for Applications&lt;/h2&gt;
&lt;p&gt;The solution id is currently part of the URL used as a key for the application settings.  If we define a new entry for
&lt;code&gt;com.freedom.scientific.jaws.2020&lt;/code&gt;, our only way of expressing settings for that solution/version at the moment is to
include that id in the URL.  So, if we wanted to ensure that JAWS was enabled, we might express the need to launch each
version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{
    &amp;quot;flat&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;JAWS&amp;quot;,
        &amp;quot;contexts&amp;quot;: {
            &amp;quot;gpii-default&amp;quot;: {
                &amp;quot;name&amp;quot;: &amp;quot;Enable JAWS&amp;quot;,
                &amp;quot;http://registry.gpii.net/applications/com.freedomscientific.jaws.12/enabled&amp;quot;: true,
                &amp;quot;http://registry.gpii.net/applications/com.freedomscientific.jaws.2017/enabled&amp;quot;: true,
                &amp;quot;http://registry.gpii.net/applications/com.freedomscientific.jaws.2018/enabled&amp;quot;: true,
                &amp;quot;http://registry.gpii.net/applications/com.freedomscientific.jaws.2019/enabled&amp;quot;: true
            }
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is overly verbose and extremely brittle.  We may be carrying around versions that have long vanished from the wild.
We also have no way of knowing when there are new versions available, and that the previously expressed need to
"enable JAWS" should apply to the new version without the user taking any action.  We also can't always assume that only
one version of a solution is installed on a given machine, and the above might result in our attempting to configure and
launch more than one version of JAWS.&lt;/p&gt;
&lt;p&gt;It seems clear to me that what we need is a way to represent an application more generally.  Instead of the above, we
ideally want for a user to be able to express then need to enable JAWS using something like the following payload:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{
    &amp;quot;flat&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;JAWS&amp;quot;,
        &amp;quot;contexts&amp;quot;: {
            &amp;quot;gpii-default&amp;quot;: {
                &amp;quot;name&amp;quot;: &amp;quot;Enable JAWS&amp;quot;,
                &amp;quot;http://registry.gpii.net/applications/com.freedomscientific.jaws/enabled&amp;quot;: true
            }
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In order for this to work, we need some way to make our way from the &lt;code&gt;com.freedomscientific.jaws&lt;/code&gt; namespace to whichever
version is actually available.  Currently, the list of available solutions looks something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[
    {
        &amp;quot;id&amp;quot;: &amp;quot;com.freedomscientific.jaws&amp;quot;
    },
    {
        &amp;quot;id&amp;quot;: &amp;quot;org.nvda-project&amp;quot;
    }
]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We might simply choose to extend this to use a syntax like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[
    {
        &amp;quot;id&amp;quot;: &amp;quot;com.freedomscientific.jaws&amp;quot;,
        &amp;quot;version&amp;quot;: &amp;quot;com.freedomscientific.jaws.2020&amp;quot;
    },
    {
        &amp;quot;id&amp;quot;: &amp;quot;org.nvda-project&amp;quot;,
        &amp;quot;version&amp;quot;: &amp;quot;org.nvda-project&amp;quot;
    }
]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the first "versioned" example (JAWS), the &lt;code&gt;version&lt;/code&gt; information indicates the grade name of a particular version of
JAWS.  In the second "unversioned" example, the &lt;code&gt;version&lt;/code&gt; information indicates the "general" grade.  This opens up the
possibility of transforming the "general" namespace to and from the "versioned" namespace.  It also allows us to keep
individual solutions fairly simple.  But how do we provide enough information to the device reporter to enable it to
build the improved list of installed solutions? I can see a few ways to do this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;"Version Holding Solutions": Make the "versions" child components of the "general" entry.&lt;/li&gt;
&lt;li&gt;"Application Capabilities": Express each version as a separate solution, but also express the relationship between a version and its "generic"
   equivalent.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Version Holding Solutions&lt;/h3&gt;
&lt;p&gt;In the first scenario, we store the relationship information in the "general" solution itself, perhaps as a simple array
of IDs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{
    &amp;quot;com.freedomscientific.jaws&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;JAWS&amp;quot;,
        &amp;quot;versions&amp;quot;: [
            &amp;quot;http://registry\\.gpii\\.net/application/com\\.freedomscientific\\.jaws\\.2019&amp;quot;,
            &amp;quot;http://registry\\.gpii\\.net/application/com\\.freedomscientific\\.jaws\\.2018&amp;quot;
        ]
        // ...        
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A key strength of this is that it allows us to express a preferred order of resolution, i.e. from newest to  oldest. A
disadvantage is that it requires you to know about versions and to update the "general" version when each version is
added.  Another key thing to note is that if the context of a "general" solution does not match one or more "versioned"
equivalents, you might end up with references to solutions that cannot be installed, and which may have been filtered
out of the set of solutions already.  You would need some mechanism to guard against attempting to retrieve these
"phantom limbs".&lt;/p&gt;
&lt;h3&gt;Application Capabilities&lt;/h3&gt;
&lt;p&gt;Another option here would be to expand the previous &lt;code&gt;capabilities&lt;/code&gt; feature to also cover the "generic" version of the
application.  Here is a skeleton of a JAWS 2020 entry that might build on the example above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{
    &amp;quot;com.freedomscientific.jaws.2020&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;JAWS 2020&amp;quot;,
        &amp;quot;contexts&amp;quot;: {
            &amp;quot;OS&amp;quot;: [{ &amp;quot;id&amp;quot;: &amp;quot;win32&amp;quot; }]
        },
        &amp;quot;capabilities&amp;quot;: [
            &amp;quot;http://registry\\.gpii\\.net/application/com\\.freedomscientific\\.jaws/enabled&amp;quot;
        ]        
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A key strength of this approach is that is that it better supports a "contrib" model, i.e. a volunteer may fill in an
entry for JAWS 2020 in isolation, and can clearly express the relationship without modifying the original entry.&lt;/p&gt;
&lt;p&gt;This approach is also much safer when filtering by context (generally operating system), in that the relationship
between any "versioned" solutions is filtered out along with them when we filter to the context.&lt;/p&gt;
&lt;h3&gt;Changes to the Device Reporter&lt;/h3&gt;
&lt;p&gt;In order for either of these strategies to work, the device reporter (or something that coordinates with the device
reporter) will have to scan through the full range of solution entries for a given platform, and make sense of the
relationships between "versioned" and "general" solutions.  It would also have to make the decision about which version
to report as installed if multiple versions are installed.  We should talk about this in some depth, my assumption is
that we will generally prefer the latest version, and that there will almost always be only one version installed.&lt;/p&gt;
&lt;h3&gt;Which Version to Use/Install?&lt;/h3&gt;
&lt;p&gt;We can either allow people to "pin" settings to a "versioned" solution, or agree that the "general" version is meant to
correspond to the "newest compatible version" for the given context.  I would argue against the former unless we have
strong use cases.&lt;/p&gt;
&lt;p&gt;If we to use the "newest compatible" version of each "general" solution, then how do we define that?  Versions may be
semver, free strings, really anything.  If we decided to have the  "general" solution keep track of all its versions,
then this can be handled with a prioritised map of versions or with simple array ordering.&lt;/p&gt;
&lt;p&gt;An idea that would work with "versioned solutions" is to have our own "internal" version indicator, which indicates
whether the version is older (lower in number) than its peers or newer (higher in number).  The device reporter or
any other part of the system that encounters multiple versions could use the "internal" version indicator to decide
(for example) to install the newest compatible version, or to launch the newest installed version.&lt;/p&gt;
&lt;h3&gt;Install on Demand&lt;/h3&gt;
&lt;p&gt;Steve Grundell is currently working on adding the ability to
&lt;a href="https://github.com/GPII/universal/pull/608"&gt;install solutions on demand&lt;/a&gt;.  This work needs to also be made aware of
the concept of versions, and we need to make the same decision there about which version to install if there are
multiples.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Those are my thoughts on how we might handle versions, I will discuss with the group and flesh things out further.&lt;/p&gt;</content><category term="LSR"></category></entry><entry><title>CI Requirements and Candidate Evaluation.</title><link href="https://the-t-in-rtf.github.io/ci-requirements-and-candidate-evaluation.html" rel="alternate"></link><published>2018-07-25T14:30:00+02:00</published><updated>2018-07-25T14:30:00+02:00</updated><author><name>Tony Atkins &lt;tony@raisingthefloor.org&gt;</name></author><id>tag:the-t-in-rtf.github.io,2018-07-25:/ci-requirements-and-candidate-evaluation.html</id><summary type="html">&lt;p&gt;A comparison of our requirements for CI as a tool in managing changes to our repositories.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Continuous Integration (CI) is a key part of our development process both within the Fluid community and within the
GPII.  CI gives an objective and more or less immediate view of the health of our code, and of the quality of changes we
propose to make to our code.  It is an essential safety net to help distributed teams working on rapidly evolving
systems.&lt;/p&gt;
&lt;p&gt;Within the Fluid community and GPII, we currently have a mixture of legacy Jenkins build configurations, BuildKite
builds (for Infusion) and experiments with tools like GitLab.  This page attempts to compare build requirements with the
features of various tools.&lt;/p&gt;
&lt;p&gt;There are many uses for CI:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Builds that are run to evaluate proposed code changes.&lt;/li&gt;
&lt;li&gt;Nightly builds that guard against problems with changes inherited from dependencies, such as a new version of the
   target platform.&lt;/li&gt;
&lt;li&gt;Build pipelines that result in creating releases, deploying updated containers, et cetera.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For the purposes of this discussion I am focusing on the first, the process of managing changes to our repositories.&lt;/p&gt;
&lt;h2&gt;How We Manage Code Changes&lt;/h2&gt;
&lt;p&gt;Our codebases are hosted in an organisational repository that contains the "target" for changes, generally the "master"
branch of our codebase.  We tend to make changes to our code roughly as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The need for a change (bug fix, new feature) is identified.&lt;/li&gt;
&lt;li&gt;The change is written up and discussed, generally as a JIRA ticket.&lt;/li&gt;
&lt;li&gt;Individuals wishing to make changes:&lt;/li&gt;
&lt;li&gt;Create a JIRA ticket describing their work or take ownership of an existing ticket.&lt;/li&gt;
&lt;li&gt;"Fork" the organisational repository.&lt;/li&gt;
&lt;li&gt;Create a branch in their repository for their work.&lt;/li&gt;
&lt;li&gt;Submit a pull request for their work against a branch in the organisational repository (typically against
      "master).&lt;/li&gt;
&lt;li&gt;Once a pull has been submitted:&lt;/li&gt;
&lt;li&gt;If the request is from a core committer, builds are run automatically.&lt;/li&gt;
&lt;li&gt;Otherwise, someone with access must comment on the issue to trigger a build.&lt;/li&gt;
&lt;li&gt;Build results are displayed inline as part of the discussion thread on the PR.&lt;/li&gt;
&lt;li&gt;For builds that use our legacy Jenkins setup, a build can be retriggered by commenting.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;CI is key for the third step in this process, which is illustrated in the following diagram.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pull request workflow diagram." src="../images/pull-request-details.svg"&gt;&lt;/p&gt;
&lt;p&gt;In this process of reviewing a proposed change, CI builds provide a shared and consistent way to talk about test
failures, coverage reports, log output, et cetera.  Each pull request review often involves many changes and associated
builds.  It is critical that we be able to view the results of a CI build in the context of the associate pull request,
and that we be able to manage the permission checks and triggering of builds from the context of the pull request
itself.&lt;/p&gt;
&lt;h2&gt;CI Requirements&lt;/h2&gt;
&lt;p&gt;In addition to supporting our development workflow (see above), an important key improvement we have discussed is
devolving as much ownership as we can of build configurations to the community contributing changes to each project. 
Although we have experimented with tools that support decentralised build configurations, currently our build
configurations are managed centrally in a separate repository, and there is one build configuration per codebase.&lt;/p&gt;
&lt;p&gt;For the future, we want to have much of the build configuration be part of the codebase, so that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Changes can be tested in isolation without disrupting other ongoing work.&lt;/li&gt;
&lt;li&gt;The developer submitting a change to the build can demonstrate in context that the changes work as expected.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As we will review a comparison chart of a range of solutions, let's break the requirements down and define a shorthand
name for each:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Remote Forks&lt;/strong&gt;: An acceptable solution should be able to monitor pull requests against an organisational repository
  but test against the contributor's repository and branch.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Results in Pull Request&lt;/strong&gt;: The results of a build should be summarised in the PR, with a link to more details.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Access Controls&lt;/strong&gt;: Many of our libraries are open source.  We want to allow nearly anyone to
  contribute, but do not want to allow just anyone to use our build resources.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Restart Builds&lt;/strong&gt;: If a build fails for reasons that seem unique to CI, we commonly restart the build to
  confirm.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;In-branch Configuration&lt;/strong&gt;: The rules that govern the unique parts of a build (dependencies, test commands,
  artifacts, et cetera) should live within the repository, so that changes to the CI configuration can be managed by the
  community of contributors with only minimal support from operations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Local Agents&lt;/strong&gt;: It should be possible to use our own build agents.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Solution Comparison&lt;/h2&gt;
&lt;p&gt;The following legend outlines the rating system we used when evaluating solutions.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Stars&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img alt="Three Stars" src="../images/three-stars.svg"&gt;&lt;/td&gt;
&lt;td&gt;Supports the use case easily (for example, with only configuration options).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img alt="Two Stars" src="../images/two-stars.svg"&gt;&lt;/td&gt;
&lt;td&gt;Supports the use case less well (multiple clicks, plugins required, partial functionality).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img alt="One Stars" src="../images/one-star.svg"&gt;&lt;/td&gt;
&lt;td&gt;May support the use case with custom development.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img alt="No Stars" src="../images/no-stars.svg"&gt;&lt;/td&gt;
&lt;td&gt;Cannot support the use case.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The solutions comparison table below gives a summary of how each of the evaluated CI tools matches our requirements.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Solution&lt;/th&gt;
&lt;th&gt;Remote Forks&lt;/th&gt;
&lt;th&gt;Results in PR&lt;/th&gt;
&lt;th&gt;Access Controls&lt;/th&gt;
&lt;th&gt;Restart Builds&lt;/th&gt;
&lt;th&gt;In-branch Config&lt;/th&gt;
&lt;th&gt;Local Agents&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;BuildKite&lt;/td&gt;
&lt;td&gt;&lt;img alt="One Star" src="../images/one-star.svg"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="Two Stars" src="../images/two-stars.svg"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="One Stars" src="../images/one-star.svg"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="One Stars" src="../images/one-star.svg"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="Three Stars" src="../images/three-stars.svg"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="One Stars" src="../images/one-star.svg"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GitLab&lt;/td&gt;
&lt;td&gt;&lt;img alt="One Stars" src="../images/one-star.svg"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="One Star" src="../images/one-star.svg"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="One Star" src="../images/one-star.svg"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="One Star" src="../images/one-star.svg"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="Three Stars" src="../images/three-stars.svg"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="Three Stars" src="../images/three-stars.svg"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Jenkins (legacy)&lt;/td&gt;
&lt;td&gt;&lt;img alt="Two Stars" src="../images/two-stars.svg"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="Two Stars" src="../images/two-stars.svg"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="Two Stars" src="../images/two-stars.svg"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="Two Stars" src="../images/two-stars.svg"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="One Stars" src="../images/one-star.svg"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="Three Stars" src="../images/three-stars.svg"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Jenkins Pipelines&lt;/td&gt;
&lt;td&gt;&lt;img alt="Three Stars" src="../images/three-stars.svg"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="Three Stars" src="../images/three-stars.svg"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="One Stars" src="../images/one-star.svg"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="Three Stars" src="../images/three-stars.svg"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="Three Stars" src="../images/three-stars.svg"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="Three Stars" src="../images/three-stars.svg"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Travis CI&lt;/td&gt;
&lt;td&gt;&lt;img alt="Three Stars" src="../images/three-stars.svg"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="One Stars" src="../images/one-star.svg"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="One Stars" src="../images/one-star.svg"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="One Stars" src="../images/one-star.svg"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="Three Stars" src="../images/three-stars.svg"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="No Stars" src="../images/no-stars.svg"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Continue reading for a detailed breakdown for each solution evaluated.&lt;/p&gt;
&lt;h3&gt;BuildKite&lt;/h3&gt;
&lt;p&gt;BuildKite does not support the remote fork model we use by default.  BuildKite displays results in a PR, but only as
a webhook results summary.  It does not have the ability to comment.  It does not support the type of access controls
or comment-based restarting of jobs that we are accustomed to.  It only supports a single client by default. In
addition, build results require an account, and you cannot view logs without access.&lt;/p&gt;
&lt;p&gt;Avtar has developed a custom service that we use with webhooks, which closes most of the gaps between the built-in
functionality and our use cases.&lt;/p&gt;
&lt;h3&gt;GitLab&lt;/h3&gt;
&lt;p&gt;GitLab does not directly support the remote fork model we use.  By default, GitLab does not support the type of access
controls we are accustomed to, or retriggering of builds.  GitLab also does not support results as comments, there is
is currently a &lt;a href="https://gitlab.com/gitlab-org/gitlab-ce/issues/23902"&gt;feature request&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We would need to build an external service that closes the gaps.  There is a good API for building services
like this, but we would have to build a new service largely from scratch.&lt;/p&gt;
&lt;h3&gt;Jenkins (legacy)&lt;/h3&gt;
&lt;p&gt;Our Jenkins legacy configuration obviously satisfies all of our use cases.  However, although we have traditionally used
Jenkins and the multi-job plugin, there are supportability concerns about that long term.  It was not owned or supported
for some time, and although development has resumed, there are still concerns about using that versus something built by
and supported by the Jenkins team.&lt;/p&gt;
&lt;h3&gt;Jenkins Pipelines&lt;/h3&gt;
&lt;p&gt;Jenkins Pipelines offer key improvements over the legacy solution in that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;they provide their own robust declarative syntax&lt;/li&gt;
&lt;li&gt;they have support for complex chaining of builds, including a try/catch/finally construct that ensures that a
   sequence of builds stops on the first failure, but that teardown steps are still allowed to execute.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Jenkins Pipelines support the remote fork model we use.  They offer the type of access controls we require, but
permission checks are only respected when retriggering builds from a comment.  The ability to hold off on an initial
build (or a rebuild when a new commit is made).&lt;/p&gt;
&lt;p&gt;As with many other solutions, Jenkins Pipelines would require some custom development.  However, they have the concept
of a "trait", and you can add new "traits" to change the behaviour of existing features.   This suggests that the
development effort involved would be lower, especially since as far as we know we only need to close a single major gap.&lt;/p&gt;
&lt;h3&gt;Travis CI&lt;/h3&gt;
&lt;p&gt;Travis CI does not support the types of custom build agents we require.  It also would require significantly more
development to close a range of gaps.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Jenkins Pipelines plus limited custom development seems to be the best approach for us moving forward.&lt;/p&gt;</content><category term="CI"></category></entry><entry><title>Infusion and JSON Schemas, Part 5: Reuse and Extension, Part Two</title><link href="https://the-t-in-rtf.github.io/infusion-and-json-schema-reuse-two.html" rel="alternate"></link><published>2018-03-27T15:30:00+02:00</published><updated>2018-03-27T15:30:00+02:00</updated><author><name>Tony Atkins &lt;tony@raisingthefloor.org&gt;</name></author><id>tag:the-t-in-rtf.github.io,2018-03-27:/infusion-and-json-schema-reuse-two.html</id><summary type="html">&lt;p&gt;An updated discussion of the issues involved in reusing and extending JSON Schemas between components.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Earlier in this series (late 2017), I wrote up some approaches to &lt;a href="https://the-t-in-rtf.github.io/infusion-and-json-schema-reuse.html"&gt;extending and reusing JSON Schema
definitions&lt;/a&gt;, talking about how a child grade might modify the JSON Schema defined
by its parent or other more distant ancestors.&lt;/p&gt;
&lt;p&gt;In other discussions, we have tended to err on the side of working with component options in the way we have in the
past, i.e. with full access to merging, expansion, options distribution, et cetera.  In this post, I will outline
various ways in which a child grade might wish to modify a parent schema, and illustrate how they might be handled with
a combination of options merging and &lt;code&gt;mergePolicy&lt;/code&gt; rules.&lt;/p&gt;
&lt;p&gt;The examples in this post will be using &lt;a href="http://json-schema.org/draft-07/schema"&gt;draft v7&lt;/a&gt; of the JSON Schema standard.  If you have not worked
with JSON Schemas in a while, I would strongly encourage you to review the recent changes.&lt;/p&gt;
&lt;p&gt;Although this is far from settled, for the purposes of these examples, I will assume that the top-level &lt;code&gt;schema&lt;/code&gt;
option is used to define or modify the effective schema, as in this base grade I will use in most of the examples below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.validatable.grade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This will more likely inherit from a base grade common to all schema-validated components.&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fluid.component&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/draft-07/schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;minLength&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Changing Values&lt;/h1&gt;
&lt;p&gt;Changing individual values is simple to accomplish with options merging.  Say for example that we want to update the
&lt;code&gt;$schema&lt;/code&gt; and test the merged schema against a different version of the JSON Schema draft standard.  We might create a
derived grade like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.newer.grade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.validatable.grade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/draft-06/schema&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This offers the possibility to add a particular version of the draft standard to the base grade, and have that be
inherited by the "schema snippets" used in existing work.&lt;/p&gt;
&lt;h1&gt;Adding Additional Properties&lt;/h1&gt;
&lt;p&gt;Starting with the original base grade, options merging can also reasonably add new properties just through the default
options merging:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.grade.with.additional.properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.validatable.grade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;address&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The merged schema would effectively be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/draft-07/schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;minLength&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;address&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This basic example does not require the author to specify any hints about options merging in order to produce a valid
schema.&lt;/p&gt;
&lt;h1&gt;Changing Types&lt;/h1&gt;
&lt;p&gt;Let's say that we wish to evolve a free-form string inherited from a parent grade into a sub-object, i.e. to add more
structure to a previously unstructured field.  For example, we might wish to break out the previously defined &lt;code&gt;name&lt;/code&gt;
field into sub-fields:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.grade.new.type.polluting&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.validatable.grade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;first&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;middle&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;last&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;first&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;last&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we handle this using simple options merging, the resulting schema is polluted with the leftover &lt;code&gt;minLength&lt;/code&gt; attribute:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/draft-07/schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;first&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;middle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;last&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;first&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;last&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;minLength&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Although, some validators will ignore the additional material, many conform more closely to the standard and report the
schema itself as invalid.  This is where we start using &lt;code&gt;mergePolicy&lt;/code&gt; hints to improve on the default merging:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.grade.new.type.clean&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.validatable.grade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;mergePolicy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;schema.properties.name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;replace&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;first&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;middle&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;last&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;first&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;last&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This ensures that the "name" attribute is completely replaced, and that the invalid straggling &lt;code&gt;minLength&lt;/code&gt; value is not
preserved.&lt;/p&gt;
&lt;h1&gt;Changing the "Required" Fields&lt;/h1&gt;
&lt;p&gt;As shown in the above examples, the &lt;code&gt;required&lt;/code&gt; attribute specifies the fields that must be contained as an array of
keys relative to their enclosing object.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.grade.required.nohints&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.validatable.grade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Depending on how familiar you are with array merging, you might be surprised at the results of the merge:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/draft-07/schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;minLength&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To properly replace the &lt;code&gt;required&lt;/code&gt; attribute with an empty array, we need another hint, as in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.grade.required.nohints&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.validatable.grade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;mergePolicy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;schema.required&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;replace&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Removing Properties Altogether&lt;/h1&gt;
&lt;p&gt;Thus far we have dodged the issue of deleting material by using the "replace" merge strategy.  We have either entirely
replaced the object containing the material to be removed, or in the case of an array, replaced it with an empty array.&lt;/p&gt;
&lt;p&gt;What if we want to remove an inherited property altogether?  Take this as our starting grade, and assume we want to
disallow the use of the &lt;code&gt;state&lt;/code&gt; field:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.overly.verbose.grade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This will more likely inherit from a base grade common to all schema-validated components.&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fluid.component&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/draft-07/schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;address&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;city&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;state&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;postCode&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We could for example mangle its definition so that it's not possible to ever enter the field correctly, as in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.definition.mangling.grade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.overly.verbose.grade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;state&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;minLength&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;maxLength&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This has the effect of making it impossible to use the option, but is not ideal, as in the case of UI generation, an
input might still be displayed onscreen.  How can we remove material using &lt;code&gt;mergePolicy&lt;/code&gt; hints?&lt;/p&gt;
&lt;p&gt;In addition to keywords like "nomerge", "noexpand", you can also &lt;a href="https://docs.fluidproject.org/infusion/development/OptionsMerging.html#structure-of-the-merge-policy-object"&gt;supply a function as the right side of a merge
policy&lt;/a&gt;.
One strategy I have explored &lt;a href="https://codepen.io/the-t-in-rtf/pen/Zxaxrm?editors=1011"&gt;in this CodePen&lt;/a&gt; is to supply a
"noop" function for a given target path, which results in the material being removed, as in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.definition.removing.grade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.overly.verbose.grade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;mergePolicy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;schema.properties.state&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This results in the removal of &lt;code&gt;schema.properties.state&lt;/code&gt;, but does have implications for derived grades.  Once we extend
the above grade, it is impossible to supply a value for &lt;code&gt;schema.properties.state&lt;/code&gt;, unless we add an implicit rule to
restore the merging of the variable, as in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.definition.restoring.grade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.definition.removing.grade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;mergePolicy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;schema.properties.state&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{that}.options.schema.properties.state&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;minLength&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The updated mergePolicy restores the underlying field removed by the intermediate grade, and will also allow us to merge
in additional options, both in the "restoring" grade, and in any derived grades.&lt;/p&gt;
&lt;h1&gt;When and How to Validate&lt;/h1&gt;
&lt;p&gt;In the upcoming &lt;a href="https://issues.fluidproject.org/browse/FLUID-6148"&gt;"Potentia II"&lt;/a&gt; work on Infusion, we will gain
the ability to bind actions to early parts of the component lifecycle, and to  prevent component creation from
proceeding further if there are problems.  As Antranig hinted at in a previous meeting, we might use this to bind one or
more validation passes. I would propose that we do the following after options expansion and merging:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Validate the merged, expanded schema definition itself against its meta schema (typically a particular version of the
   JSON Schema draft standard).&lt;/li&gt;
&lt;li&gt;Validate the component options against the schema.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first step would immediately and dramatically make it clear to authors when they have merged schema definitions in a
way that requires the addition of &lt;code&gt;mergePolicy&lt;/code&gt; rules.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In summary, I am proposing that we:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use options merging and expansion in combination with &lt;code&gt;mergePolicy&lt;/code&gt; rules to allow us to express schema definitions within component options.&lt;/li&gt;
&lt;li&gt;After options expansion and merging, validate the merged schema first, and if there are no errors, validate the component options using the merged schema.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Although this draft outlines a handful of ways we might proceed, it's meant as a starting point for discussion.  I will
write up the conclusions we reach and proceed to sketch out "schema validated components" based on what we agree. &lt;/p&gt;</content><category term="JSON Schema"></category></entry><entry><title>Infusion and JSON Schemas, Part 4: End User Feedback, Redux</title><link href="https://the-t-in-rtf.github.io/infusion-and-json-schema-feedback-two.html" rel="alternate"></link><published>2018-03-26T15:30:00+02:00</published><updated>2018-03-26T15:30:00+02:00</updated><author><name>Tony Atkins &lt;tony@raisingthefloor.org&gt;</name></author><id>tag:the-t-in-rtf.github.io,2018-03-26:/infusion-and-json-schema-feedback-two.html</id><summary type="html">&lt;p&gt;An updated discussion of the issues involved in providing end-user feedback when validation options using a JSON Schema.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In previous posts like &lt;a href="https://the-t-in-rtf.github.io/infusion-and-json-schema-feedback.html"&gt;this one&lt;/a&gt;, I wrote about a JSON (meta)schema-based approach to
adding key information useful in working with JSON Schemas and UIs:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Expressing UI hints such as instructions and field labels that should be displayed near an input or control.&lt;/li&gt;
&lt;li&gt;Customising raw validation errors, for example, by replacing them with localised or internationalised output.&lt;/li&gt;
&lt;li&gt;Internationalising and localising both of the above.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The core standard does not provide a means to accomplish either.  There are various efforts to add error specific or UI
specific keywords, but in order to accomplish this properly, we would need to create and maintain a metaschema
&lt;a href="https://the-t-in-rtf.github.io/infusion-and-json-schema-feedback.html"&gt;as outlined here&lt;/a&gt;.  This is non-trivial work, as it requires:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Carefully reviewing each draft of the JSON Schema standard and reusing definitions from it in a new metaschema.&lt;/li&gt;
&lt;li&gt;Working carefully to preserve the type of circular references used in the underlying draft standard (every object may contain objects, for example).&lt;/li&gt;
&lt;li&gt;Testing our metaschema with various validators.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In recent discussions, we have leaned more towards storing i18n message keys within component options.  In addition to
helping us avoid the work of writing and maintaining metaschemas, this approach is also more natural for experienced
component authors vs. expressing UI concerns in a new format, one that is not immediately visible when working with the
component itself.&lt;/p&gt;
&lt;p&gt;This article reviews the information provided by our current validator, and outlines how we might use that in
combination in a "component-centric" approach.&lt;/p&gt;
&lt;h1&gt;Providing UI Hints&lt;/h1&gt;
&lt;p&gt;Let's start with a simpler use case, adding UI hints (instructions, labels, etc.) to a schema.  As we do not have to
ever deal with validator output or JSON Pointers, we can use a similar model to gpii-binder, and provide both a "short"
and a "long" strategy for describing the "path to variable" and the UI metadata, as in this crude mockup:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.ui.grade.short&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fluid.ViewComponent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;hints&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;path.to.variable&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;i18n-key-for-variable-hint&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.ui.grade.long&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fluid.ViewComponent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;hints&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;myHint&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;modelPath&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;path.to.variable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;hintKey&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;i18n-key-for-variable-hint&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However we choose to assemble message bundles, the "hints" are defined in the same way, i.e. as message keys.&lt;/p&gt;
&lt;p&gt;One issue we have not addressed with regards to gpii-binder is merging "short" and "long" notations, we should discuss
whether a "short" notation is valuable enough to make it worth writing function(s) to handle the merging of the above
examples.&lt;/p&gt;
&lt;h1&gt;Evolving Validation Errors&lt;/h1&gt;
&lt;h2&gt;AJV&lt;/h2&gt;
&lt;p&gt;Before we can discuss how we might localise and/or internationalise validation errors, we should understand what they
look like by default.  We currently use the validator &lt;a href="https://github.com/epoberezkin/ajv"&gt;AJV&lt;/a&gt;, so I wanted to use that
to provide some sample validation errors and talk about the key concerns.  For the first two examples, let's assume
we're using a schema like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/draft-07/schema#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Deep schema to test variable nesting and paths.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;deep&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;boolean&amp;quot;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's say we try to validate the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;quot;deep&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a string&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;AJV returns an error like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;keyword&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;dataPath&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.deep.required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;schemaPath&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#/properties/deep/properties/required/type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;params&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;boolean&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;should be boolean&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;dataPath&lt;/code&gt; is the path to the failing data.  With the exception of the leading dot, that path closely matches an EL
path relative to the root of the object that was validated.  The &lt;code&gt;schemaPath&lt;/code&gt; value represents the path to the rule that
was broken.  This is a JSON Pointer expressed relative to the root of the schema (#).   In the example above, that JSON
Pointer resolves to the string &lt;code&gt;"boolean"&lt;/code&gt;.  The &lt;code&gt;message&lt;/code&gt; value purports to give details about the validation error,
but is expressed in English sentence fragments that are especially hairy when dealing with regular expression pattern
matching failures, as in this example from the tests in the gpii-json-schema package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;keyword&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pattern&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;dataPath&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.rawMultiple&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;schemaPath&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#/properties/rawMultiple/allOf/1/pattern&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;params&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;pattern&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[A-Z]+&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;should match pattern \&amp;quot;[A-Z]+\&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here's another example for the same schema mentioned earlier in this section.  Let's say we leave out the "deep" required field and attempt to validate
the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;AJV reports an error like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;keyword&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;dataPath&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.deep&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;schemaPath&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#/properties/deep/required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;params&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;missingProperty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;should have required property &amp;#39;required&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This demonstrates a key point.  Since draft v4 of the standard, JSON Schemas define missing required fields in terms of
the containing element (previously each field had a true/false &lt;code&gt;required&lt;/code&gt; property).  The &lt;code&gt;schemaPath&lt;/code&gt; in this case is
relative to the enclosing object, and the JSON pointer points to the array of ALL required fields, i.e. there is no
effort made to say that required field #2 is the specific field that's missing.&lt;/p&gt;
&lt;p&gt;There is also the special case of the "anyOf" and "allOf" constructs, which are arrays where the index of the failing
rule is considered.  Let's say we have a schema like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/draft-07/schema#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="s2"&gt;&amp;quot;password.json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="s2"&gt;&amp;quot;Password Validation Schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Password must be 8 or more characters, and have at least one uppercase letter, at least one lowercase letter, and at least one number or special character.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;quot;allOf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;minLength&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;pattern&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[A-Z]+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;pattern&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[a-z]+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;pattern&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[^a-zA-Z]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's say we try to validate the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2Short&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;AJV will return an error like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;keyword&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;minLength&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;dataPath&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;schemaPath&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#/properties/password/allOf/0/minLength&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;params&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;limit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;should NOT be shorter than 8 characters&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;schemaPath&lt;/code&gt; pointer refers to the numeric value &lt;code&gt;8&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;Standardising Validation Errors&lt;/h1&gt;
&lt;p&gt;Now that we know what we have (at least if we choose to continue using AJV), let's talk about the key questions we need
to be able to answer:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What information is invalid?&lt;/li&gt;
&lt;li&gt;What rule(s) does it break?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can fairly easily represent the path to the invalid information. A simple transform of the &lt;code&gt;dataPath&lt;/code&gt; value can
produce an EL path that can be used to find the offending value using &lt;code&gt;fluid.get&lt;/code&gt;.  This breaks down somewhat when
dealing with required fields, but can use a slightly more complex transform to standardise those paths.&lt;/p&gt;
&lt;p&gt;Things get more complex when we want to represent which rule(s) were broken.  We can start to simplify the problem space
by constructing a JSON Schema snippet that represents the failing rule.  We can do this by looking at the last segment
of the &lt;code&gt;schemaPath&lt;/code&gt; JSON Pointer (or AJV's equivalent &lt;code&gt;keyword&lt;/code&gt; value) and the value that the &lt;code&gt;schemaPath&lt;/code&gt; pointer
references within the schema, as in:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{ "type": "boolean"} // #/properties/deep/properties/required/type =&amp;gt; "boolean"&lt;/code&gt;
&lt;code&gt;{ "minLength": 8}    // #/properties/password/allOf/0/minLength =&amp;gt; 8&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As each of these failing rules will ultimately reduce to a keyword representing the broken rule, our intermediate
validation error format might look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;failurePath&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;deep.required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;rule&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;boolean&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once we have flattened out the failures relative to the failing material, we can represent error message keys using
notation like the following (again, both "short" and "long" examples are provided):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.validating.component&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fluid.component&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;mailOptions.sender&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sender-invalid-generic-message-key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;quot;short&amp;quot; notation for all errors.&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;mailOptions.recipient&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// &amp;quot;long&amp;quot; notation&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;format&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;recipient-invalid-format-invalid-key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Custom message for a specific error.&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;recipient-invalid-key&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;// We can still provide a single message for all remaining errors.&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;recipient-invalid-format-invalid-key&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The email address &amp;#39;%mailOptions.recipient&amp;#39; is invalid.&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The validator can still return the specifics of the failing rule, but component authors would only have to be aware of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The EL path to the failing material.&lt;/li&gt;
&lt;li&gt;The message key they wish to use in place of the underlying error.&lt;/li&gt;
&lt;li&gt;(Optionally) Specific validation keywords they wish to provide separate error messages for.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The message templates themselves should be able to include variables that refer to the offending material.  Rather than
deal in relative paths, I would suggest that all string templates for error messages use the full EL path within the
object being validated, as shown above.  This offers good flexibility versus schemes like only offering access to the
failing data itself.&lt;/p&gt;
&lt;h2&gt;Required Fields&lt;/h2&gt;
&lt;p&gt;So, how do we deal with the special case of required fields?  I would suggest that our intermediate validation error
format follow the JSON Schema draft v3 convention, and make &lt;code&gt;required&lt;/code&gt; a property of the missing material itself, as in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;failurePath&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;path.to.requiredField&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;rule&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can then represent all variations relative to the missing material, as in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.validating.component&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fluid.component&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;mailOptions.sender&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sender-invalid-generic-message-key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;quot;short&amp;quot; notation for all errors.&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;mailOptions.recipient&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// &amp;quot;long&amp;quot; notation&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;format&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;recipient-invalid-format-invalid-key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Custom message for a specific error.&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;recipient-required-key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;recipient-invalid-key&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;// We can still provide a single message for all remaining errors.&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;recipient-invalid-format-invalid-key&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The email address &amp;#39;%mailOptions.recipient&amp;#39; is invalid.&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As long as we can agree on this flattened structure, the authoring of error message hints becomes fairly
straightforward.&lt;/p&gt;
&lt;h2&gt;"Dereferencing" Schemas&lt;/h2&gt;
&lt;p&gt;All of my examples above have presented schemas that define all properties directly.  Many schema
authors (including myself) follow the best practice of using "definitions" to allow easier reuse within the schema, and
from other schemas, as in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/draft-07/schema#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;definitions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;format&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;from&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#/definitions/email&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;to&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#/definitions/email&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In gpii-json-schema, we use &lt;a href="https://www.npmjs.com/package/json-schema-deref"&gt;json-schema-deref&lt;/a&gt; to "dereference" this
into something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/draft-07/schema#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;definitions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;format&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;from&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;format&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;email&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;to&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;format&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;email&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;$ref&lt;/code&gt; values used into the original are replaced with the full definition.  This allows us to more simply follow
the strategy outlined above of representing a rule that has been broken in terms of a schema snippet.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In summary, I am proposing that we:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Represent UI hints using a structure that relates "path to material" to the appropriate message key.&lt;/li&gt;
&lt;li&gt;Represent validation error messages using a structure that relates "path to material" and "failing rule" to the appropriate message key.&lt;/li&gt;
&lt;li&gt;Agree upon and transform the raw AJV output to our own validation error format.&lt;/li&gt;
&lt;li&gt;Dereference schemas before using them for validation purposes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My goal here is to provide a proposal as a starting point, and detailed enough examples to spur a good discussion.  I
plan to write up the group consensus and use that as part of upcoming work in the gpii-json-schema package.&lt;/p&gt;</content><category term="JSON Schema"></category></entry><entry><title>Infusion and JSON Schema...</title><link href="https://the-t-in-rtf.github.io/infusion-and-json-schema.html" rel="alternate"></link><published>2017-05-16T10:00:00+02:00</published><updated>2017-05-16T10:00:00+02:00</updated><author><name>Tony Atkins &lt;tony@raisingthefloor.org&gt;</name></author><id>tag:the-t-in-rtf.github.io,2017-05-16:/infusion-and-json-schema.html</id><summary type="html">&lt;p&gt;An overview of the combined use of Infusion and JSON Schema and the conversation to date.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In recent discussions in the offsite and in previous PCP API meetings, we have been talking through a few different strategies for validating settings (and component options in general) using &lt;a href="http://json-schema.org/"&gt;JSON Schemas&lt;/a&gt;.  In this collection of articles, I will attempt to summarise a range of approaches.  My hope is that with clearer examples, we can make an informed decision about which choices make sense to proceed with.  I say "choices" because I believe, as with so many of our choices (&lt;a href="https://github.com/SeleniumHQ/selenium/tree/master/javascript/node/selenium-webdriver"&gt;webdriver&lt;/a&gt; vs. &lt;a href="https://github.com/testem/testem"&gt;Testem&lt;/a&gt;, for example), there may be room for more than one approach within the larger community.&lt;/p&gt;
&lt;h1&gt;Why are we even talking about this?&lt;/h1&gt;
&lt;p&gt;There are a few specific projects currently under development where the ability to validate options using JSON Schemas is directly relevant:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://issues.gpii.net/browse/UX-180"&gt;The UI portion of the PCP API&lt;/a&gt; that Bern, Javi and others are working on.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sgithens/gpii-devpmt"&gt;The "Dev PMT" Steve is working on.&lt;/a&gt;, where settings are input based on the associated JSON Schema (for now, just the overall "type").&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/the-t-in-rtf/gpii-live-registries"&gt;The "Live Registries"&lt;/a&gt;, which proposes breaking down the existing solutions data in universal into a separate repository with versioned releases.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In addition, there have been previous efforts within the community to use JSON Schemas, for example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JSON Schemas are used within the &lt;a href="https://github.com/GPII/first-discovery-server/blob/master/src/js/configUtils.js#L41"&gt;First Discovery Server&lt;/a&gt; to validate component options.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://github.com/GPII/gpii-json-schema"&gt;gpii-json-schema library)&lt;/a&gt; is used within the Unified Listing and PTD to perform both client and server-side validation of model data.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Between our legacy and ongoing work, we have a need to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Validate user input and give appropriate feedback.&lt;/li&gt;
&lt;li&gt;Validate component options.&lt;/li&gt;
&lt;li&gt;Generate UIs based on schemas.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;So where do we go from here?&lt;/h1&gt;
&lt;p&gt;Among other things, we still need at least tentative agreement regarding:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How we can reuse and extend schema validation rules.&lt;/li&gt;
&lt;li&gt;How to provide end-user-friendly feedback, both regarding the purpose of a field (instructions), and feedback when data is invalid (errors).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I will attempt to summarise the approaches suggested to date for each of these in subsequent sections, which are intended to be read in no particular order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://the-t-in-rtf.github.io/infusion-and-json-schema-reuse.html"&gt;Reusing and Extending Schema Rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://the-t-in-rtf.github.io/infusion-and-json-schema-feedback.html"&gt;Providing End User Feedback&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Within each of these, I will attempt to demonstrate a range of approaches:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A more "component centric" approach, where schema information is written directly in component options.&lt;/li&gt;
&lt;li&gt;A more "schema centric" approach, where common schema information is stored in external files.&lt;/li&gt;
&lt;li&gt;Options for working somewhere between the two, for example, writing inline schemas that link to external files as needed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There will be a summary in each of the above sections, but this document will not attempt to present any decisions or make strong recommendations.  Rather, it is intended to serve as a starting point for the next few rounds of conversation.&lt;/p&gt;</content><category term="JSON Schema"></category></entry><entry><title>Infusion and JSON Schemas, Part 3: End User Feedback</title><link href="https://the-t-in-rtf.github.io/infusion-and-json-schema-feedback.html" rel="alternate"></link><published>2017-05-16T10:00:00+02:00</published><updated>2017-05-16T10:00:00+02:00</updated><author><name>Tony Atkins &lt;tony@raisingthefloor.org&gt;</name></author><id>tag:the-t-in-rtf.github.io,2017-05-16:/infusion-and-json-schema-feedback.html</id><summary type="html">&lt;p&gt;A detailed comparison of the issues involved in providing end-user feedback when validation options using a JSON Schema.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This page will cover a range of issues involved in presenting end-user feedback as users input data, based on fields
defined in a JSON schema and/or our own layer of component metadata.  For a general overview of the broader topic and 
use cases, please review the &lt;a href="introduction"&gt;{content}/infusion-and-json-schema/introduction.md&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the three use cases we are concerned with at the moment, we need to be able to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Provide human-readable instructions for a given field in a schema.&lt;/li&gt;
&lt;li&gt;Provide human-readable feedback for validation errors.&lt;/li&gt;
&lt;li&gt;Internationalise both of the above.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Error Feedback&lt;/h1&gt;
&lt;p&gt;Validation tools like &lt;a href="https://github.com/epoberezkin/ajv"&gt;AJV&lt;/a&gt; produce very detailed information about what particular
rule in the schema has been validated, and about the piece of the validated object that fails the check.  However, this
information is not typically in a form that is suitable for presenting to end users.  Here, for example, are a few error
messages returned by AJV:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;keyword&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;dataPath&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.field1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;schemaPath&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;base.json#field1/type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;params&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;should be string&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;keyword&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;dataPath&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;schemaPath&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#/required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;params&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;missingProperty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;field2&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;should have required property &amp;#39;field2&amp;#39;&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For full details on the meaning of individual properties in the validation output, see
&lt;a href="https://github.com/epoberezkin/ajv#validation-errors"&gt;the AJV documentation&lt;/a&gt;.  For the purposes of this discussion, 
I will focus on the &lt;code&gt;dataPath&lt;/code&gt;, &lt;code&gt;schemaPath&lt;/code&gt;, and &lt;code&gt;message&lt;/code&gt;  properties.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;dataPath&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;dataPath&lt;/code&gt; field gives us a path to material within the validated content that failed to validate.  By default, 
&lt;code&gt;dataPath&lt;/code&gt; is presented in a "Javascript object notation" format, which we can use with 
&lt;a href="http://docs.fluidproject.org/infusion/development/CoreAPI.html#fluid-get-model-path-"&gt;&lt;code&gt;fluid.get&lt;/code&gt;&lt;/a&gt;
(we would typically strip the leading dot).&lt;/p&gt;
&lt;p&gt;Note that "required" fields are a special case, in that the enclosing object is the target, and not the missing field
itself.  This is a key side-effect of an early design decision regarding the JSON Schema standard.  As of draft v3,
&lt;a href="https://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.7"&gt;it was possible to specify within the field definition itself that the field was required&lt;/a&gt;.
In draft v4 and beyond, the enclosing field is now responsible for indicating which fields are required.  In practice,
we will likely want to add special handling for "required" failures, so that we have the choice to display an 
error in the context of the missing field.  With AJV, we can do this by checking for a value in &lt;code&gt;params.missingProperty&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;schemaPath&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;schemaPath&lt;/code&gt; field gives us a &lt;a href="https://tools.ietf.org/html/rfc6901"&gt;JSON pointer&lt;/a&gt; which points to the failing rule
within the schema.  If we have the full content of a given schema, we can use a tool like &lt;a href="https://github.com/alexeykuzmin/jsonpointer.js/"&gt;&lt;code&gt;jsonpointer.js&lt;/code&gt;&lt;/a&gt;
to retrieve details regarding the failing rule.  So, to continue the above example, the &lt;code&gt;schemaPath&lt;/code&gt; &lt;code&gt;base.json#field1/type&lt;/code&gt;
points to the value &lt;code&gt;string&lt;/code&gt;.  In later examples we will discuss how we can use these pointers in combination with our 
own &lt;code&gt;keyword&lt;/code&gt; to provide better end-user feedback.&lt;/p&gt;
&lt;p&gt;So, to keep the example relatively simple, I have avoided using the &lt;code&gt;$ref&lt;/code&gt; keyword discussed in the 
&lt;a href="https://the-t-in-rtf.github.io/infusion-and-json-schema-reuse.html"&gt;"reuse" article in this series&lt;/a&gt;.  At least in &lt;code&gt;gpii-json-schema&lt;/code&gt;, we 
&lt;a href="https://github.com/BigstickCarpet/json-schema-ref-parser/blob/master/docs/ref-parser.md#dereferenceschema-options-callback"&gt;dereference&lt;/a&gt;
each schema before using it for validation.  Dereferencing replaces all &lt;code&gt;$ref&lt;/code&gt; values with 
their linked definitions, and merges any local rules.  Regardless of how complex our reuse strategy is, it is as though
we had only ever used "simple" definitions.  This makes the &lt;code&gt;schemaPath&lt;/code&gt; values more predictable, in that we will always
receive failures relative to a property or sub-property.  It also ensures that we ourselves do not need to look up
&lt;code&gt;$ref&lt;/code&gt; values, which may point to external files and require additional network calls.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;message&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This is the raw feedback on the failure, in string form.  It is typically not presented as a complete sentence, and
lacks capitalisation and punctuation.&lt;/p&gt;
&lt;p&gt;Feedback like &lt;code&gt;should be string&lt;/code&gt; is accurate, but typically we would rather provide more graceful feedback like &lt;code&gt;Please
enter a string&lt;/code&gt;.  Feedback like &lt;code&gt;should have required property 'field2'&lt;/code&gt; is more problematic, in that the feedback is
presented in terms of the raw field name within the object being validated, and not in terms of a label that is
meaningful to the end user, as in &lt;code&gt;You are required to enter an email address&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As we will discuss below, the key in evolving this is to start with what we have (path within the validated object,
path to the failing rule) and overlay more human readable messages.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;data&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;In earlier versions of AJV, by default the failing data was also included under the &lt;code&gt;data&lt;/code&gt; keyword.  So, for example,
validation errors for a password would routinely include the password as a string.  Thankfully this is now disabled by
default.&lt;/p&gt;
&lt;h2&gt;Approach 1: Overlaying Error Information via Component Options&lt;/h2&gt;
&lt;p&gt;In this approach, we assume that we have a block of options which includes information about potential errors.  We can
either associate these messages with a path to options, or with the failing rule.  Although we will likely use
inheritance to abstract some of this out, for the purposes of clarity, I will write out all rules as though the complete
schema had already been dereferenced or otherwise reduced to simple rules.&lt;/p&gt;
&lt;h2&gt;Approach 1a: "path to invalid option"&lt;/h2&gt;
&lt;p&gt;First, let's look at the "path to invalid option" approach, which might look like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.inline.withEvolvedErrors.viaDotPath&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.inline&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;errorMessages&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You must enter a string.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;deep.field2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You must enter a number.&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/schema#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;field1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="nx"&gt;deep&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;field2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;number&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;field2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/schema#&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="nx"&gt;errorMessages&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;patternProperties&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;[a-zA-Z0-9\.]+&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;additionalProperties&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;deep&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A few notes on validating the error messages:  We haven't previously mentioned
&lt;a href="https://spacetelescope.github.io/understanding-json-schema/reference/object.html#pattern-properties"&gt;the &lt;code&gt;patternProperties&lt;/code&gt; option&lt;/a&gt;,
which is used here to control what keys are acceptable.  It's likely that we would use a slightly more nuanced regexp
pattern, to protect against keys like &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;.path.to.content&lt;/code&gt;.  We've indicated that the "right side" of each key/value
pair is a string, which means that deep structures are not allowed.&lt;/p&gt;
&lt;p&gt;When dealing with validation errors other than "required field" errors, we would use &lt;code&gt;dataPath&lt;/code&gt; (minus the leading dot,
see above)  to look up the error message, perhaps with some kind of templating.  For "required" field errors, we would
combine &lt;code&gt;dataPath&lt;/code&gt; with &lt;code&gt;params.missingField&lt;/code&gt; (see above) to look up the error message.&lt;/p&gt;
&lt;p&gt;As we have discussed in meetings, this method sacrifices specificity for the sake of simplicity.  We would only be able
to specify one error message per field.  However, we would not have to specify one error for each rule, as is required
with approaches outlined below.&lt;/p&gt;
&lt;p&gt;As was also pointed out in our meetings, this method further entangles actual options and metadata regarding options.
Instead of only having one field (&lt;code&gt;schema&lt;/code&gt;) that must be validated by the schema itself, we would now have two
constructs (&lt;code&gt;schema&lt;/code&gt; and &lt;code&gt;errorMessages&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This method is also problematic with regards to reuse, in that error messages cannot be reused or inherited unless
the path exactly matches what is defined in &lt;code&gt;errorMessages&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Although it isn't demonstrated here, templating can be easily added to this construct (and approach 1b) using existing
concepts like &lt;a href="http://docs.fluidproject.org/infusion/development/ExpansionOfComponentOptions.html#expanders"&gt;&lt;code&gt;expanders&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Approach 1b: "path to failing rule"&lt;/h3&gt;
&lt;p&gt;Let's look at the same example expressed in terms of the path (JSON pointer) to the failing rule:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.inline.withEvolvedErrors.viaJsonPointer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.inline&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;errorMessages&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;#/properties/required/0&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You must enter a string.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;#/properties/field1/type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You must enter a string.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;#/properties/deep/properties/required/0&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You must enter a number.&amp;quot;&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;#/properties/deep/properties/field2/type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You must enter a number.&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/schema#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;field1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="nx"&gt;deep&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;field2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;number&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;field2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/schema#&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="nx"&gt;errorMessages&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;patternProperties&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;(http://)?([a-z]\.+/)\#[a-zA-Z0-9\/]+&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;additionalProperties&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;deep&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;patternProperties&lt;/code&gt; regexp has not been tested at all, but is meant to suggest that we would require a relative
or absolute URI for the left hand side of the equation.  You can see in the above example that we now have specificity,
but that we now have to provide feedback for multiple rules.  We can mitigate this using expanders or IoC references,
but the format will still be more verbose than Approach 1a.&lt;/p&gt;
&lt;p&gt;This approach has the unique advantage of allowing us to overlay messages on the deep structure of our rules.  This 
allows us to overlay internationalised messages on an existing schema, as shown in the following examples:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.inline.withEvolvedErrors.viaJsonPointer.inline&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.inline.withEvolvedErrors.viaJsonPointer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;errorMessages&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;#/properties/required/0&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You must enter a string.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;#/properties/field1/type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You must enter a string.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;#/properties/deep/properties/required/0&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You must enter a number.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;#/properties/deep/properties/field2/type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You must enter a number.&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.inline.withEvolvedErrors.viaJsonPointer.external&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.external&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;errorMessages&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;#/properties/required/0&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You must enter a string.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;#/properties/field1/type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You must enter a string.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;#/properties/deep/properties/required/0&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You must enter a number.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;#/properties/deep/properties/field2/type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You must enter a number.&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://my.site/schemas/external.json&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.inline.withEvolvedErrors.viaJsonPointer.hybrid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.hybrid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;errorMessages&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;#/properties/required/0&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You must enter a string.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;#/properties/field1/type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You must enter a string.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;#/properties/deep/properties/required/0&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You must enter a number.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;#/properties/deep/properties/field2/type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You must enter a number.&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/schema#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://my.site/schemas/external.json&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the first "inline" example, we are merging options with an underlying grade, and simply overlaying error messages.
In the second "external" example, we point to an external JSON Schema and overlay our rules over that.  In the third
"hybrid" example, we point to the external schema within our options, and then overlay our rules as in all other
examples.&lt;/p&gt;
&lt;h2&gt;Approach 2: Overlaying Error Information via One or More Custom Keywords&lt;/h2&gt;
&lt;p&gt;There are various ways of accomplishing this, but the general approach is the same:  make it possible to use new
keywords within the schema definition (inline or otherwise).  These keywords would define custom error messages in
the exact context of the failing rule, as shown in the following examples.&lt;/p&gt;
&lt;p&gt;This is the rough approach that is under consideration as &lt;a href="https://github.com/json-schema-org/json-schema-spec/issues/67"&gt;a proposed JSON Schema UI extension&lt;/a&gt;.
In the absence of a (proposed) standard, there are other projects that also follow similar a pattern of using custom keywords
within a schema.  For example, &lt;a href="https://github.com/mozilla-services/react-jsonschema-form"&gt;react-jsonschema-form&lt;/a&gt;,
which is highlighted here mainly because there is clear documentation and a live playground to help illustrate their
approach.&lt;/p&gt;
&lt;h2&gt;Approach 2a: ajv-errors&lt;/h2&gt;
&lt;p&gt;The maintainer of AJV has recently released a library called &lt;a href="https://github.com/epoberezkin/ajv-errors"&gt;&lt;code&gt;ajv-errors&lt;/code&gt;&lt;/a&gt;
that adds a custom &lt;code&gt;errorMessages&lt;/code&gt; keyword.  This is used as demonstrated below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/schema#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;$id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my-base-schema.json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;$id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/field1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;errorMessage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You must enter a string value (base error).&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;field2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;deep&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;quot;errorMessage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;I can&amp;#39;t work with the value you provided (base error).&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;deep2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;errorMessage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You must enter a value for field1 (base error).&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Within a given property (including the root object), you can define in context a map of failing rule segments and custom
error messages.  These custom error messages remain associated with the property when overriding schemas or reusing 
parts of a schema in a new schema.&lt;/p&gt;
&lt;p&gt;The current &lt;code&gt;ajv-errors&lt;/code&gt; implementation supports &lt;a href="https://github.com/epoberezkin/ajv-errors#templates"&gt;templates&lt;/a&gt;, which
may include references to the object being validated.  You cannot reference material from the schema itself, which 
limits the ability to define an error message once and reuse it as a variable in multiple templates.&lt;/p&gt;
&lt;p&gt;Although the &lt;code&gt;ajv-errors&lt;/code&gt; package does not currently have tests for complex reuse scenarios, in theory any inheritance
constructs supported by the language itself can be used to override individual inherited &lt;code&gt;errorMessages&lt;/code&gt;, or to add new
&lt;code&gt;errorMessages&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Approach 2b: Our Own Custom Keyword&lt;/h2&gt;
&lt;p&gt;We can also define our own keyword(s) that are allowed in our variant of the JSON Schema language.  As an example, let's
add support for the same &lt;code&gt;errorMesssages&lt;/code&gt; construct defined by &lt;code&gt;ajv-errors&lt;/code&gt;.  There are two ways to make AJV aware of
our own custom keyword(s).&lt;/p&gt;
&lt;p&gt;The first is to define our own metaschema.  A metaschema uses a version of the JSON Schema language to define what
keywords are allowed in writing schemas.  Unfortunately, with the current state of affairs, we would basically have to
fork the draft standard, and rewrite all the parts that use circular references.  The 
&lt;a href="https://github.com/epoberezkin/ajv-errors/blob/master/index.js#L22"&gt;metaschema snippet used by &lt;code&gt;ajv-error&lt;/code&gt; to add the &lt;code&gt;errorMessages&lt;/code&gt; construct&lt;/a&gt;
might also be represented as a custom metaschema like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;custom-metaschema.json#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;$id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;custom-metaschema.json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Custom metaschema (extending draft v6)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Provides additional &amp;#39;UI hints&amp;#39;...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;definitions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;schemaArray&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;array&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;minItems&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;items&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/draft-06/schema#&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;errorMessages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#/definitions/stringMap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;items&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#/definitions/stringList&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#/definitions/stringOrMap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;dependencies&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#/definitions/stringOrMap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;additionalProperties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;definitions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;stringMap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;quot;additionalProperties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;stringOrMap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;quot;additionalProperties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;stringList&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;array&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;quot;items&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;additionalItems&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;items&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;anyOf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#/definitions/schemaArray&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;contains&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;additionalProperties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;definitions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;additionalProperties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;additionalProperties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;patternProperties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;additionalProperties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;dependencies&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;additionalProperties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;anyOf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/draft-06/schema#/definitions/stringArray&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;propertyNames&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;not&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;allOf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#/definitions/schemaArray&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;anyOf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#/definitions/schemaArray&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;oneOf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#/definitions/schemaArray&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In summary, the above extends the draft v6 schema, but replaces all of its circular references (&lt;code&gt;$ref&lt;/code&gt; values of &lt;code&gt;#&lt;/code&gt;)
with ones that include our custom &lt;code&gt;errorMessages&lt;/code&gt; keyword.  Once we have a custom metaschema, we would need to 
&lt;a href="https://github.com/epoberezkin/ajv#addmetaschemaarrayobjectobject-schema--string-key"&gt;make AJV aware of it&lt;/a&gt;
before we can load our schemas or validate any content.  Although AJV has the best support for metaschemas, defining our
own metaschema is at least in theory something we can more reasonably expect other validators will eventually support.
Another key advantage is that our schemas could clearly indicate in their top-level &lt;code&gt;$schema&lt;/code&gt; value that they are using 
a custom language, and not the unaltered core JSON Schema language.&lt;/p&gt;
&lt;p&gt;The second approach (which &lt;code&gt;ajv-errors&lt;/code&gt; itself uses) is to tell AJV that we have &lt;a href="https://github.com/epoberezkin/ajv#defining-custom-keywords"&gt;a new keyword which is allowed for any property&lt;/a&gt;.
This avoids our having to write and maintain a (recursive) custom metaschema that reuses material from the latest draft
metaschema.  Given that the default metaschemas allow &lt;a href="https://spacetelescope.github.io/understanding-json-schema/reference/object.html#properties"&gt;additional properties&lt;/a&gt;, 
our schemas would even validate.  However, their &lt;code&gt;$schema&lt;/code&gt; variable would be somewhat misleading, in that it does not
describe our language additions or give any guidance as to acceptable values for our keywords.&lt;/p&gt;
&lt;p&gt;In both cases, our schemas would look the same as the &lt;code&gt;ajv-errors&lt;/code&gt; example above.  As we will discuss below, a key
advantage of either of these approaches is that we are not limited to what &lt;code&gt;ajv-errors&lt;/code&gt; provides.  We can support 
multiple types of UI hints, nest them within a combined structure, or whatever makes the most sense to us.&lt;/p&gt;
&lt;h1&gt;Internationalisation&lt;/h1&gt;
&lt;p&gt;Whatever route we choose, we need some means of replacing messages according to the locale.  We must also consider how
&lt;a href="https://the-t-in-rtf.github.io/infusion-and-json-schema-reuse.html"&gt;reuse and inheritance&lt;/a&gt; affect i18n messages.&lt;/p&gt;
&lt;h2&gt;Message Keys and Lookup&lt;/h2&gt;
&lt;p&gt;The first solution is to store message keys as the values in the right side of the above example, as in this 
snippet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;errorMessages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;#/properties/required/0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my.message.bundle.enter.string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;#/properties/field1/type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my.message.bundle.enter.string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;#/properties/deep/properties/required/0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my.message.bundle.enter.number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;#/properties/deep/properties/field2/type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my.message.bundle.enter.number&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We would then have a default message bundle, and one for each supported language.  Depending on the user's locale,
we would display different text instead of the message key.  There might optionally be templating involved, as described
in &lt;a href="https://issues.gpii.net/browse/GPII-2444"&gt;GPII-2444&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This requires additional work when rendering content, as we are not simply retrieving a string value from the schema.
It also makes the schemas somewhat less readable for developers and integrators, as they cannot directly see the
text in context.&lt;/p&gt;
&lt;h2&gt;Schema Overlays&lt;/h2&gt;
&lt;p&gt;In this approach, we embed the default language in the "core" schema, and "overlay" alternate wordings in
language-specific schemas.  Just for the sake of simplicity, I'll assume we're working with the same &lt;code&gt;errorMessages&lt;/code&gt;
construct outlined in previous examples.  Let's assume we want to replace the error messages in the following example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/schema#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;$id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my-base-schema.json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;$id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/field1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;errorMessage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You must enter a string value (base error).&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;errorMessage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;You must enter a value for field1 (base error).&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Although you might want to merge in replacement keys with the "Message Keys and Lookup" strategy, the viability of the
"Schema Overlays" approach depends heavily on the ability to merge content.  One way to accomplish this is by using the
custom &lt;code&gt;$merge&lt;/code&gt; and &lt;code&gt;$patch&lt;/code&gt; keywords provided by &lt;a href="https://github.com/epoberezkin/ajv-merge-patch"&gt;ajv-merge-patch&lt;/a&gt;,
which add support for the mechanisms outlined in the RFCs for &lt;a href="https://tools.ietf.org/html/rfc7396"&gt;JSON Merge Patch&lt;/a&gt; and
&lt;a href="https://tools.ietf.org/html/rfc6902"&gt;JSON Patch&lt;/a&gt;.  With that, we could prepare an "overlay" like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/schema#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;$id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my-base-schema-LOCALE.json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;$patch&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;source&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my-base-schema.json&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;with&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;op&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;replace&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/properties/field1/errorMessage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;replacement field message for LOCALE.&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;op&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;replace&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/errorMessage/required/field1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;replacement required message for LOCALE.&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This approach also assumes that we have some convention for looking up the locale-specific schema, for example, suffixing the core
schema with a language code.&lt;/p&gt;
&lt;h2&gt;"Hybrid" Approach&lt;/h2&gt;
&lt;p&gt;It should also be possible to follow the first "Message Keys" approach, and use a utility to generate "patched" schemas
for each known locale.&lt;/p&gt;</content></entry><entry><title>Infusion and JSON Schemas, Part 2: Reuse</title><link href="https://the-t-in-rtf.github.io/infusion-and-json-schema-reuse.html" rel="alternate"></link><published>2017-05-16T10:00:00+02:00</published><updated>2017-05-16T10:00:00+02:00</updated><author><name>Tony Atkins &lt;tony@raisingthefloor.org&gt;</name></author><id>tag:the-t-in-rtf.github.io,2017-05-16:/infusion-and-json-schema-reuse.html</id><summary type="html">&lt;p&gt;A detailed comparison of the inheritance and reuse issues involved in using JSON Schemas to validate Infusion component options.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This page provides an overview of the mechanisms in Infusion and JSON Schema that support reuse and extension, and how each might be used to associate options blocks with validation rules.&lt;/p&gt;
&lt;p&gt;For a general overview of the broader topic and use cases, please review the &lt;a href="introduction"&gt;{content}/infusion-and-json-schema/introduction.md&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;The Inheritance Mechanisms Provided by Infusion&lt;/h1&gt;
&lt;h2&gt;Options Merging&lt;/h2&gt;
&lt;p&gt;The first inheritance mechanism we should discuss is &lt;a href="http://docs.fluidproject.org/infusion/development/OptionsMerging.html"&gt;options merging&lt;/a&gt; is the mechanism by which options are combined from one or more "parent" grades (and their "parents").&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="s2"&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fluid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;infusion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.awesome.grade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fluid.component&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;medium&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;green&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;rankings&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;cats&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rule&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;dogs&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;drool&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.awesome.extension&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.awesome.grade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;extra large&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cotton&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;rankings&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;dogs&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;also rule&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that both shallow (&lt;code&gt;size&lt;/code&gt;) and deep (&lt;code&gt;rankings.dogs&lt;/code&gt;) values can be replaced, and that all types of values can be easily added (&lt;code&gt;material&lt;/code&gt;).  There are some limitations when merging arrays.  In the above example, the merged value of &lt;code&gt;colors&lt;/code&gt; becomes &lt;code&gt;["blue", "green"]&lt;/code&gt;.  In practice, we have moved to using &lt;a href="http://docs.fluidproject.org/infusion/development/Priorities.html"&gt;prioritised&lt;/a&gt; and namespaced maps instead of arrays in many places.  This makes it possible to selectively add and replace material, but also to control the ordering (something that maps themselves do not guarantee).  As we will see later, the issues surrounding the use of arrays in options are directly relevant when we talk about portions of the JSON Schema standard (&lt;code&gt;required&lt;/code&gt;, &lt;code&gt;allOf&lt;/code&gt;, &lt;code&gt;anyOf&lt;/code&gt;) that are represented as arrays.&lt;/p&gt;
&lt;p&gt;It is possible to &lt;a href="http://docs.fluidproject.org/infusion/development/OptionsMerging.html#structure-of-the-merge-policy-object"&gt;indicate that particular options should not be merged at all&lt;/a&gt;, but this would greatly reduce the options for reuse and extension, as grades would have to completely redefine the schema to change it.  Although we may choose to disable options merging for schemas, for the rest of this section we will explore what is possible if we extend and reuse schema material in combination with options merging.&lt;/p&gt;
&lt;h2&gt;IoC References and Options Distribution&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://docs.fluidproject.org/infusion/development/IoCReferences.html"&gt;IoC references&lt;/a&gt; are a means of referring to another option.  Used on their own, they provide an easy way of exposing the same options in multiple places, as in the following example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.ioc.parent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fluid.modelComponent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;parentVar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;is set&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;fluid.modelComponent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;childVar&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{parent}.model.parentVar&amp;quot;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This type of operation is duplicative, i.e. both the parent and child can see the same variable.  When we talk about reusing and reorganizing schemas, we will need some way to relocate options, to change their location.  A key mechanism that supports this is &lt;a href="http://docs.fluidproject.org/infusion/development/IoCSS.html#distributeoptions-format"&gt;options distribution&lt;/a&gt;.  Through the use of the &lt;code&gt;removeSource&lt;/code&gt; option, it is possible to relocate options, as shown in the following example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.disorganized.grade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;country&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Freelandia&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;street&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;123 Main Street.&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.reorganized.grade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.disorganized.grade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;distributeOptions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{that}.options.country&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{that}.options.address.country&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;removeSource&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We will demonstrate some practical examples of using this to reorganize existing material in the third set of examples below.&lt;/p&gt;
&lt;h1&gt;The Inheritance Mechanisms Provided by JSON Schema&lt;/h1&gt;
&lt;p&gt;The JSON Schema standard provides two key mechanisms to support reuse.  &lt;/p&gt;
&lt;h2&gt;The &lt;code&gt;$ref&lt;/code&gt; keyword&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;$ref&lt;/code&gt; keyword is a URI (full or partial) that points to validation rules elsewhere.  Although these URIs can point to material in another schema, for the purposes of this discussion, I will demonstrate the use of internal references.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/schema#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;definitions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;format&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#/definitions/email&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The property &lt;code&gt;email&lt;/code&gt; uses its &lt;code&gt;$ref&lt;/code&gt; keyword to indicate that it is defined elsewhere.  As with HTML anchors, the &lt;code&gt;#/&lt;/code&gt; at the beginning of the URI indicates a link relative to the root of the current context, i.e. this schema.  Although it is by no means required, in my own work, I tend to use the above pattern to support reuse, general definitions that can be referred to both within the schema, and from other documents.&lt;/p&gt;
&lt;p&gt;These references can be used circularly.  Let's assume we're defining a "person" record, and that we might want to (within that record) describe other people related to a given person.  For the purposes of brevity, I will avoid the definitions pattern used above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/schema#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
  &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;family&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;middle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;given&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;format&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;relatives&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;array&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;items&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;family&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;given&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;family&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;given&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First, we use &lt;code&gt;$ref&lt;/code&gt; to indicate that this &lt;a href="https://spacetelescope.github.io/understanding-json-schema/reference/array.html"&gt;array&lt;/a&gt; contains one or more other people. &lt;code&gt;#&lt;/code&gt; in this context means that all definitions from the root of the schema down apply here.  So, for example, our &lt;code&gt;relatives&lt;/code&gt; can also have &lt;code&gt;relatives&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We also override the &lt;code&gt;required&lt;/code&gt; keyword to indicate that for &lt;code&gt;relatives&lt;/code&gt;, only the family and given name are required.  In JSON Schemas, directly overriding an array value like &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;anyOf&lt;/code&gt;, &lt;code&gt;allOf&lt;/code&gt; completely replaces its previous value. We will see examples of how this can be avoided for &lt;code&gt;anyOf&lt;/code&gt; and &lt;code&gt;allOf&lt;/code&gt; in later examples, but as &lt;code&gt;required&lt;/code&gt; is a basic control we are likely to use often, I will use that in later examples of working with arrays.&lt;/p&gt;
&lt;h2&gt;The &lt;code&gt;$id&lt;/code&gt; keyword&lt;/h2&gt;
&lt;p&gt;The second mechanism that supports reuse is the &lt;code&gt;$id&lt;/code&gt; keyword, which provides a means of naming the path to a portion of a schema.  The &lt;code&gt;$id&lt;/code&gt; keyword can be used to provide shortcuts to a deep path within a schema, comparable to a named anchor.  &lt;/p&gt;
&lt;p&gt;First, &lt;code&gt;$id&lt;/code&gt; can (and should) be used for the root of the schema itself:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/schema#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;$id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mySchema.json&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In practice, I tend to store schemas in a single directory, and have the &lt;code&gt;$id&lt;/code&gt; match the filename, but we have many options for using whatever URI conventions we wish.  We are not constrained by what file the material is store in, where (or whether) it is hosted.  We do however need to make the validator aware of the schema that contains the ID before it is asked to resolve a URI that references it.&lt;/p&gt;
&lt;p&gt;So, beyond simply identifying the schema, the primary purpose of the &lt;code&gt;$id&lt;/code&gt; field is to give us a clear way to address schema material from a URI used with a &lt;code&gt;$ref&lt;/code&gt; keyword.  Let's look at a simplified version of the first example above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/schema#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;definitions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;$id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;format&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#email&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Regardless of where the rules that define the &lt;code&gt;email&lt;/code&gt; field are located, we can always refer to it using the &lt;code&gt;$ref&lt;/code&gt; &lt;code&gt;#email&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can also include path information on the right side of the hash tag, which allows us to organize the URI space a bit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/schema#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;definitions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;pet-animal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;$id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#/animals/pet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;A companion animal.&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;pet-verb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;$id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#/verbs/pet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;boolean&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Is it a good idea to handle the companion animal?&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;$id&lt;/code&gt; keyword can also include information on the left side of the hash sign, which form a kind of "virtual" schemas, as shown here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/schema#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;definitions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;pet-animal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;$id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;animals.json#pet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;A companion animal.&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;pet-verb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;$id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://bogus.host/schemas/verbs.json#pet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;boolean&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Is it a good idea to handle the companion animal?&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once a validator has been made aware of the above, there are in essence two additional known URIs for schemas.  The first ("animals.json") is in the same base namespace as the enclosing schema.  The second ("verbs.json") includes hostname and path information on the left side.  At least for these two fiels, AJV will use the information provided above instead of attempting to retrieve the schema from the portion of the URI on the left side of the hash sign.&lt;/p&gt;
&lt;p&gt;This offers interesting possibilities for working with early draft updates to schemas locally, but also highlights how important it is that we have control over and trust all of the schemas we load.  Any schema can in essence take control of any URI it likes, regardless of where it is actually stored.&lt;/p&gt;
&lt;h1&gt;Examples&lt;/h1&gt;
&lt;p&gt;So, I have tried to give a partial overview of two pretty complex technologies above, identifying the tools that I see as being helpful in achieving practical goals.  Let's look at some of these practical goals with specific examples.  For each example, I will illustrate the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What we can accomplish purely with inline schemas and options merging ("inline").&lt;/li&gt;
&lt;li&gt;What we can accomplish purely with external JSON Schema files ("external").&lt;/li&gt;
&lt;li&gt;What we can accomplish with a combination of the two ("hybrid").&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Example Set 0: Our Initial Schema, Component, and Starting Assumptions&lt;/h2&gt;
&lt;h3&gt;"Inline"&lt;/h3&gt;
&lt;p&gt;For all "inline" examples, I will assume a base grade called &lt;code&gt;gpii.schema.inline&lt;/code&gt;, that looks like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.inline&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fluid.component&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/schema#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;$id&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;schemaComponent.json#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;schema&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;$id&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#/options/schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/schema#&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All we are saying here is that we must have a &lt;code&gt;schema&lt;/code&gt; option, and that it must be valid according to the (currently draft v6) standard located at &lt;code&gt;http://json-schema.org/schema#&lt;/code&gt;, which is a real URL that we can download the standard from.&lt;/p&gt;
&lt;p&gt;I have added &lt;code&gt;$id&lt;/code&gt; values in the above, and wanted to point out a few things.  First, the path to the &lt;code&gt;schema&lt;/code&gt; keyword is not a recommendation.  Rather, it is an example of the flexibility we have.  Even though we must use &lt;code&gt;definitions&lt;/code&gt; and &lt;code&gt;properties&lt;/code&gt; when defining schemas, we are not required to use those in our URIs if we feel like &lt;code&gt;options&lt;/code&gt; are a better fit.&lt;/p&gt;
&lt;p&gt;This approach has key advantages in that it is immediately familiar to Infusion developers, and that only one chain of inheritance (from parent grades) needs to be managed.&lt;/p&gt;
&lt;h3&gt;"External"&lt;/h3&gt;
&lt;p&gt;Although we have range of options, the hardest form of "external" schemas would simply use a URI to refer to a schema.  The schema associated with the base grade for the "external" strategy would look slightly different:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/schema#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;$id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;schemaComponent.json#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;$id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#/options/schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;format&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;uri&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The component options might look something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.external&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fluid.component&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;schemaComponent.json#&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This approach requires us to either make the validator aware of one or more "core" schemas, or to host them somewhere they can be retrieved.  We must also define a new schema that extends the base schema, i.e. we must manage two chains of inheritance.&lt;/p&gt;
&lt;h3&gt;"Hybrid"&lt;/h3&gt;
&lt;p&gt;In the "hybrid" approach, we use external files as needed, for example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When we have a set of "common" definitions that it would be convenient to represent externally.&lt;/li&gt;
&lt;li&gt;When we encounter a situation where simple options merging cannot accomplish the desired goal (or when it accomplishes the goal in a way that is overly cumbersome).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Although we should discuss where to draw the line, for the purposes of illustration, let's assume that the base grade itself uses an external schema, which looks like the "inline" schema's contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/schema#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;quot;$id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;schemaComponent.json#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;$id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#/options/schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/schema#&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The component might look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.hybrid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fluid.component&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;schemaComponent.json#&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;    
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This approach still requires us to either make the validator aware of one or more "core" schemas, or to host them somewhere they can be retrieved.  However, simple options merging now cooperates better with JSON Schema inheritance.  As long as we do not redefine the top-level &lt;code&gt;$ref&lt;/code&gt; keyword within the schema, we inherit the underlying validation rules.&lt;/p&gt;
&lt;h2&gt;Example Set 1: Adding a New Field&lt;/h2&gt;
&lt;h3&gt;"Inline"&lt;/h3&gt;
&lt;p&gt;A grade following the "inline" strategy might add a single field as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.inline.example1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.inline&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;field1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simple options merging would ensure that the new property is added, and we can similarly merge an associated definition if we wish to work in that way.  Note that because of the way in which arrays are merged, we must include any material from the base &lt;code&gt;required&lt;/code&gt; keyword that we wish to preserve.  We must also ensure that our entry for &lt;code&gt;required&lt;/code&gt; is at least as long as any base grade, otherwise we will end up with a mixture of our required fields and remaining fields from base grades with a longer set of &lt;code&gt;required&lt;/code&gt; fields.&lt;/p&gt;
&lt;h3&gt;"External"&lt;/h3&gt;
&lt;p&gt;Following the "external" strategy, before we can write our new component, we need to 
make a new schema, or add an entry to an existing schema that is loaded ahead of time, as in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/schema#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;externalSchema.json#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;$id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;myUniqueSchema.json#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Like the "inline" example, we must completely redefine the &lt;code&gt;required&lt;/code&gt; keyword in the schema.  Unlike the "inline" example, it does not matter whether there are zero or a thousand entries in our base schema.&lt;/p&gt;
&lt;p&gt;The associated component might look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.external.example1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fluid.component&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;myUniqueSchema.json#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;field1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;"Hybrid"&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.hybrid.example1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.hybrid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;field1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that this is nearly identical to the "inline" example.&lt;/p&gt;
&lt;h2&gt;Example Set 2: Making a Required Field Optional&lt;/h2&gt;
&lt;p&gt;Let's build on the previous examples, and assume we want to make derived component that does not require &lt;code&gt;field1&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;"Inline"&lt;/h3&gt;
&lt;p&gt;As we cannot remove an array entry using options merging, we need to abstract out a "base" grade, then make the "required" field unique to a specific grade, as in the following example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.inline.example1.base&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.inline&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;string&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;field1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.inline.example1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.inline.example1.base&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;


&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.inline.example2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.inline.example1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With that, our derived grade can extend the "base" grade and avoid requiring &lt;code&gt;field1&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;"External"&lt;/h3&gt;
&lt;p&gt;In JSON Schema, an array value with the same name completely replaces what was there previously.  We can use the &lt;code&gt;$ref&lt;/code&gt; keyword to extend an existing schema, and then override the value of the &lt;code&gt;required&lt;/code&gt; keyword.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/schema#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;myUniqueSchema.json#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;$id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;myUniqueSchema2.json#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that as in all previous examples, we must explicitly preserve the "schema" requirement.  Once we've created the schema, our component must both extend and replace the schema option for the parent grade, as in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.external.example2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.external.example1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;myUniqueSchema2.json#&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;"Hybrid"&lt;/h3&gt;
&lt;p&gt;As in the "inline" approach, the "hybrid" approach also requires abstracting out a base grade that lacks the "required" option, and then deriving from that.&lt;/p&gt;
&lt;h2&gt;Example Set 3: Reusing Existing Definitions within a Larger Structure&lt;/h2&gt;
&lt;p&gt;Thus far we have looked at individual blocks of options, which can be represented as a single component.  We also commonly works with "sets of options", for example a preference set that contains values for multiple individual settings, or a "capabilities" block, that describes multiple settings a solution supports.&lt;/p&gt;
&lt;h3&gt;"Inline"&lt;/h3&gt;
&lt;p&gt;In the inline method, groups of schema-validated options are represented as individual subcomponents, as in 
the following example.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.enclosing.grade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gradeNames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gpii.schema.inline.enclosing&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;enclosingOption1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;enclosed1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;gpii.schema.inline.enclosed1&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nx"&gt;enclosed2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;gpii.schema.inline.enclosed2&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this approach, from the enclosing component we can use tools like &lt;a href="https://github.com/fluid-project/infusion/blob/master/src/framework/core/js/FluidIoC.js#L378"&gt;&lt;code&gt;fluid.queryIoCSelector&lt;/code&gt;&lt;/a&gt;
to pick out schema validated components from other required components (for example, a shared validator instance).  This
can also be used to give an enclosing grade control over which particular classes of child grades it chooses to perform
a given action on.  There are no mechanisms for controlling the number of child grades that are required.&lt;/p&gt;
&lt;h3&gt;"External"&lt;/h3&gt;
&lt;p&gt;The JSON Schema standard provides the ability to define arrays containing material that matches either local definitions
or a reference to an external schema, as shown in the following example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://json-schema.org/schema#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;$id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;myWrenchSet.json#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;wrenches&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;array&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;items&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;quot;$ref&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;myWrench.json#&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;minItems&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;maxItems&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;wrenches&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have the ability to indicate what type(s) of material we accept and how many items.&lt;/p&gt;</content><category term="JSON Schema"></category></entry><entry><title>The best of both worlds: Free text and structured searching in the same CouchDb-Lucene search.</title><link href="https://the-t-in-rtf.github.io/couch-lucene.html" rel="alternate"></link><published>2014-08-15T12:00:00+02:00</published><updated>2014-08-15T12:00:00+02:00</updated><author><name>Tony Atkins &lt;tony@raisingthefloor.org&gt;</name></author><id>tag:the-t-in-rtf.github.io,2014-08-15:/couch-lucene.html</id><summary type="html">&lt;p&gt;Lucene and Couch are great together once you break them in a bit...&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;One of the key requirements for the Preference Terms Dictionary (nee Common Terms Registry) is that we allow users to search using their own language and help them find common terms.&lt;/p&gt;
&lt;p&gt;As outlined in &lt;a href="https://the-t-in-rtf.github.io/relationships-complicated.html"&gt;my previous blog on our combined record structure&lt;/a&gt;, we use Lucene (specifically &lt;a href="https://github.com/rnewson/couchdb-lucene"&gt;couchdb-lucene&lt;/a&gt;) to add full-text searching of our records.&lt;/p&gt;
&lt;p&gt;Recently, in demonstrating the search in a meeting, I noticed some problems in executing seemingly simple searches, and did a bit of investigating.  I wanted to share what I learned.&lt;/p&gt;
&lt;p&gt;It turns out that with the great power of Lucene comes great responsibility.   Namely, to take best advantage of Lucene's power, you need to understand and configure its analyzers.&lt;/p&gt;
&lt;h1&gt;Our requirements&lt;/h1&gt;
&lt;p&gt;As you can see in &lt;a href="https://github.com/the-t-in-rtf/common-terms-registry/blob/master/express/api/ctr.md"&gt;our API docs&lt;/a&gt;, the Preference Terms Dictionary provides a powerful search, that includes the ability to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Search the full text of all records and find terms and aliases that match anywhere in their definition, term label, uniqueId, et cetera.&lt;/li&gt;
&lt;li&gt;Filter and order search results using structured field data (for example, only displaying records with the right status, or sorting by uniqueId).&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;The promise of (and problems with) CouchDB-Lucene&lt;/h1&gt;
&lt;p&gt;CouchdB-lucene integration seems like it should help greatly with this.  It provides high performance full-text searching from within a couch view (proxied through a separate server running as a java process).&lt;/p&gt;
&lt;p&gt;Initially, I put a high priority on "stemming" words that might appear in the definition.  "Display" is a good example.  You might have definitions like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;"stop displaying on-screen feedback"&lt;/li&gt;
&lt;li&gt;"change the number of columns displayed"&lt;/li&gt;
&lt;li&gt;"speak all text that appears on the primary display"&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In each case, you would want "display" to match all three.  For this, we use one of the "stemming" analyzers included with Lucene, namely the "porter" analyzer.  This worked well enough, as it would match all three variations.  However, it caused two problems:&lt;/p&gt;
&lt;p&gt;First, uniqueIds like "8DotComputerBrailleTable" and "org.gnome.packagekit.ignored-dbus-requests" were broken down into their component parts and stripped of "blocked" terms like "8".  This made it difficult to precisely match a specific uniqueId.&lt;/p&gt;
&lt;p&gt;Second, the query itself was parsed using the analyzer, which would truncate a search for "computer" to "comput".  This is fine when comparing apples to apples, i.e. if the definition contains "displayed", and that becomes "displai" in the index, then it doesn't matter if the query is also searching for "displai" instead of "display".  They'll still match.&lt;/p&gt;
&lt;p&gt;The problem comes when you're trying to search for something like a uniqueId that contains a className.  The className will be broken up into individual words at every period, and then "stop words" will be stripped.  Both "8DotComputerBraille" and "6DotComputerBraille" will be converted to "dot computer braille", which makes it impossible to search for one but not the other.&lt;/p&gt;
&lt;p&gt;So how did this get fixed?&lt;/p&gt;
&lt;h1&gt;Different types of data, different approaches&lt;/h1&gt;
&lt;p&gt;To recap, we had to balance two concerns:  We needed to prevent lucene from mangling values like uniqueIds in both our indexes and our queries.  We also wanted stemming for definitions and other free text.&lt;/p&gt;
&lt;p&gt;There is no single Lucene analyzer that will do this well.  Instead, you need to use the "perfield" wrapper and specify which analyzer to use for each field.   Here's what our analyzer setting in couchdb-lucene finally ended up looking like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;perfield:
    {
        default: &amp;quot;porter&amp;quot;,
        uniqueId: &amp;quot;keyword&amp;quot;,
        aliasOf: &amp;quot;keyword&amp;quot;,
        translationOf: &amp;quot;keyword&amp;quot;
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The default analyzer is "porter" so that we're matching "stems".  Plural and singular work interchangeably.  Past and present tense work as well.  This is perfect for the default search field, in which we put every piece of searchable information.&lt;/p&gt;
&lt;p&gt;For the fields we want to be treated literally, we use the "keyword" analyzer.  The beauty of this is that the analyzer is applied per field, &lt;em&gt;even for the query itself&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Here's a sample search URL from my local instance that illustrates how nicely this works:&lt;/p&gt;
&lt;p&gt;http://localhost:5984/_fti/local/tr/_design/lucene/by_content?q=display+termLabel:display+uniqueId:display&lt;/p&gt;
&lt;p&gt;That's the word "display" three times in the same query, once without a field prefix, once with the "termLabel" field prefix, and once with the "uniqueId" prefix.  Couchdb-lucene helpfully shows us what the final parsed query looks like, and the results are instructive:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;quot;q&amp;quot;: &amp;quot;default:displai termLabel:displai uniqueId:display&amp;quot;,
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Both the unqualified term and the term that is prefixed with the "termLabel" field are transformed so that all stemmed variations are correctly matched.  For the "uniqueId" field, which needs to be a literal, the value is left alone.&lt;/p&gt;
&lt;p&gt;So we end up with exactly what we want, which is to have an inclusive search that stems out and matches variation on your starting language, but which can be cleanly filtered using exact field values.&lt;/p&gt;</content><category term="Couchdb"></category><category term="Lucene"></category></entry><entry><title>Adding a revision history (with comments) to CouchDB...</title><link href="https://the-t-in-rtf.github.io/couch-history.html" rel="alternate"></link><published>2014-06-12T12:00:00+02:00</published><updated>2014-06-12T12:00:00+02:00</updated><author><name>Tony Atkins &lt;tony@raisingthefloor.org&gt;</name></author><id>tag:the-t-in-rtf.github.io,2014-06-12:/couch-history.html</id><summary type="html">&lt;p&gt;Using a combination of attachments and a light sprinkling of sensible conventions, we can add a scalable version history and comments to Couchdb records.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I shared this with our mailing list a while back, but wanted to put out a more complete and formal document for further review.&lt;/p&gt;
&lt;p&gt;For the Common Terms Registry (and presumably for the Unified Listing), we will need a fuller change history than Couchdb (our back-end data store) provides.&lt;/p&gt;
&lt;h1&gt;Our requirements&lt;/h1&gt;
&lt;p&gt;We need:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To preserve the change history even if the database is compacted and cleaned up.&lt;/li&gt;
&lt;li&gt;To preserve a record of the author of each change.&lt;/li&gt;
&lt;li&gt;To allow versions to be submitted as proposed changes and later approved by moderators.&lt;/li&gt;
&lt;li&gt;To allow a comment on what was changed in each version and why.&lt;/li&gt;
&lt;li&gt;To provide the ability to leave a new comment (or respond to an existing comment) without making an additional change.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Versions as attachments&lt;/h1&gt;
&lt;p&gt;To satisfy these requirements, I propose extending the "version as attachment" method outlined in &lt;a href="http://jchris.ic.ht/drl/_design/sofa/_list/post/post-page?startkey=[%22Versioning-docs-in-CouchDB%22]"&gt;"jchris" blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In that approach, whenever there is a change, the old content of the document is added as an attachment.  The attachment is just a JSON file, which makes reading and writing simple.&lt;/p&gt;
&lt;p&gt;This approach has a few key strengths:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It absolutely and clearly associates versions with a single document.&lt;/li&gt;
&lt;li&gt;It reuses a core feature of CouchDB (attachments) rather than introducing an entirely new data structure.&lt;/li&gt;
&lt;li&gt;It only introduces complexity when it's needed.  Depending on what you're trying to do, you can:&lt;ul&gt;
&lt;li&gt;Retrieve a single record without any attachments (the default)&lt;/li&gt;
&lt;li&gt;Retrieve a record with a list of attachments, and then retrieve each attachment as desired.&lt;/li&gt;
&lt;li&gt;Retrieve a record and all attachments in a single call.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There is a limitation to this approach, in that when using lists and views, you only have access to the list of attachments, meaning that you cannot retrieve the full version history of all documents in a single request.  This is not a huge problem in that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CouchDB itself only allows you to retrieve the version history for a single document (we'd be in the same boat with CouchDB, in other words).&lt;/li&gt;
&lt;li&gt;We are most interested in presenting the current published version of each document in list views, and in presenting the full version history when viewing or editing a single document.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;How I propose to implement versions&lt;/h1&gt;
&lt;p&gt;So here are the specifics I propose to glue this all together and meet our requirements.&lt;/p&gt;
&lt;p&gt;We need a way to keep track of version numbers.  We can't use CouchDB's version structures (&lt;code&gt;_rev&lt;/code&gt; and &lt;code&gt;revpos&lt;/code&gt;) to keep track of versions.  The &lt;code&gt;_rev&lt;/code&gt; value is overwritten as soon as we add an attachment.  We could retrieve the current record and change history, and save the previous version to the history, but we could never store the current record's &lt;code&gt;_rev&lt;/code&gt; value, as we wouldn't know it up front.  We could choose to store just past versions in the history, but that would mean that we can't really keep track of unpublished drafts using the same mechanism.&lt;/p&gt;
&lt;p&gt;The solution is to assign and reuse our own version numbers for documents.  Because we know what the current version is when making updates, we can store the current version in the change history.  This is slightly redundant for records in which the published version is also the latest version, but is key in adding support for unpublished changes.  If the current document has a version number of 6 and there is a version 7 attached, then version 7 is by definition an unpublished draft.&lt;/p&gt;
&lt;p&gt;For convenience, we store the document version twice in the history.  Once in the document itself, and once in the name of the attachment, as in &lt;code&gt;versions/NUMBER&lt;/code&gt;.  Having the version in the list of attachments allows us to see where we are in history without loading the version history.  It also allows us to figure out what the next version number in the series should be without loading the version history.  It also lends itself to easy natural ordering of edits.&lt;/p&gt;
&lt;h2&gt;Edits only at the end&lt;/h2&gt;
&lt;p&gt;As a reminder, the document itself represents the latest published version.  There may be later unpublished versions, but the proposed changes are chained.&lt;/p&gt;
&lt;p&gt;If the last published version is version 6, and someone proposes a change, that becomes version 7.  If someone else wishes to make an update, they are in essence starting with version 7 when creating version 8.&lt;/p&gt;
&lt;p&gt;This makes it fairly clean to publish a proposed change.  If we like version 8, that content replaces the current document.  Given that both version 6 (the old version) and version 8 (the new version) are already in the change history, that history does not need to be updated.&lt;/p&gt;
&lt;p&gt;If, on the other hand, version 8 is rejected, and we want to approve version 7, we use the same mechanism as we would for any "revert" operation.  We copy the content of version 7 to version 9, update the version history to include that content, and add a comment (see below) indicating that the content was cloned from version 7.&lt;/p&gt;
&lt;h1&gt;So what about comments?&lt;/h1&gt;
&lt;p&gt;As mentioned in our requirements, we also need to support a back and forth dialog between contributors and moderators.  I would propose a similar approach as we used with versions.&lt;/p&gt;
&lt;p&gt;Comments should be stored as attachments, and named with respect to the version they are associated with (for example: &lt;code&gt;versions/1/comments/1&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Because the list of attachments returned with the original CouchDB document is a flat structure that includes path information, we can extract the full list of comments as well as their position in the hierarchy.  In that way we can trivially do things like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Associate comments with an individual revision, for example when paging through the change history.&lt;/li&gt;
&lt;li&gt;Also keep the full comment history as a separate object.&lt;/li&gt;
&lt;li&gt;Clearly indicate that comments that were relevant to an older version.&lt;/li&gt;
&lt;li&gt;Filter comments displayed to those entered against the last version or versions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We may not choose to build a UI that relies on all of those features, but the simple naming convention gives us all of those options and more.&lt;/p&gt;
&lt;h1&gt;Putting it all together&lt;/h1&gt;
&lt;p&gt;So, if you're still reading, what will this all look like?&lt;/p&gt;
&lt;p&gt;Here is a single sample record with two versions and two comment threads, as it would be presented in CouchDB, with the list of attachments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{
   &amp;quot;_id&amp;quot;: &amp;quot;0069b020043147f58eeda6d72c9845f4&amp;quot;,
   &amp;quot;_rev&amp;quot;: &amp;quot;60-8e50635398074f9eff7f7875a01fad6f&amp;quot;,
   &amp;quot;type&amp;quot;: &amp;quot;GENERAL&amp;quot;,
   &amp;quot;uniqueId&amp;quot;: &amp;quot;soundActive&amp;quot;,
   &amp;quot;defaultValue&amp;quot;: &amp;quot;TRUE&amp;quot;,
   &amp;quot;definition&amp;quot;: &amp;quot;Undefined...&amp;quot;,
   &amp;quot;status&amp;quot;: &amp;quot;active&amp;quot;,
   &amp;quot;source&amp;quot;: &amp;quot;gpii&amp;quot;,
   &amp;quot;version&amp;quot;: &amp;quot;2&amp;quot;,
   &amp;quot;updated&amp;quot;: &amp;quot;2014-05-22T10:01:33.655Z&amp;quot;,
   &amp;quot;_attachments&amp;quot;: {
       &amp;quot;versions/2/comments/1&amp;quot;: {
           &amp;quot;content_type&amp;quot;: &amp;quot;application/json&amp;quot;,
           &amp;quot;revpos&amp;quot;: 58,
           &amp;quot;digest&amp;quot;: &amp;quot;md5-zHlXptYHwLkBg9yCDhmTCg==&amp;quot;,
           &amp;quot;length&amp;quot;: 242,
           &amp;quot;stub&amp;quot;: true
       },
       &amp;quot;versions/2&amp;quot;: {
           &amp;quot;content_type&amp;quot;: &amp;quot;application/json&amp;quot;,
           &amp;quot;revpos&amp;quot;: 60,
           &amp;quot;digest&amp;quot;: &amp;quot;md5-zHlXptYHwLkBg9yCDhmTCg==&amp;quot;,
           &amp;quot;length&amp;quot;: 242,
           &amp;quot;stub&amp;quot;: true
       },
       &amp;quot;versions/1/comments/1&amp;quot;: {
           &amp;quot;content_type&amp;quot;: &amp;quot;application/json&amp;quot;,
           &amp;quot;revpos&amp;quot;: 58,
           &amp;quot;digest&amp;quot;: &amp;quot;md5-zHlXptYHwLkBg9yCDhmTCg==&amp;quot;,
           &amp;quot;length&amp;quot;: 242,
           &amp;quot;stub&amp;quot;: true
       },
       &amp;quot;versions/1&amp;quot;: {
           &amp;quot;content_type&amp;quot;: &amp;quot;application/json&amp;quot;,
           &amp;quot;revpos&amp;quot;: 59,
           &amp;quot;digest&amp;quot;: &amp;quot;md5-zHlXptYHwLkBg9yCDhmTCg==&amp;quot;,
           &amp;quot;length&amp;quot;: 242,
           &amp;quot;stub&amp;quot;: true
       }
   }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the &lt;code&gt;?attachments=true&lt;/code&gt; parameter is passed, the results will also include MIME-encoded attachment content, so we can get everything we care about in a single request.  We'd decode the attachments using a library like &lt;a href="https://github.com/FooBarWidget/multipart-parser"&gt;multipart-parser&lt;/a&gt; or &lt;a href="https://github.com/felixge/node-formidable"&gt;node-formidable&lt;/a&gt;, from that point it's just JSON data.&lt;/p&gt;
&lt;p&gt;Using the above information and the attachment content, here is the same record as I would propose to display it via our API (which would include query parameters to show/hide both versions and comments):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{
    &amp;quot;type&amp;quot;: &amp;quot;GENERAL&amp;quot;,
    &amp;quot;uniqueId&amp;quot;: &amp;quot;soundActive&amp;quot;,
    &amp;quot;defaultValue&amp;quot;: &amp;quot;TRUE&amp;quot;,
    &amp;quot;definition&amp;quot;: &amp;quot;Undefined...&amp;quot;,
    &amp;quot;status&amp;quot;: &amp;quot;active&amp;quot;,
    &amp;quot;source&amp;quot;: &amp;quot;gpii&amp;quot;,
    &amp;quot;version&amp;quot;: &amp;quot;2&amp;quot;,
    &amp;quot;author&amp;quot;: &amp;quot;aatkins&amp;quot;,
    &amp;quot;updated&amp;quot;: &amp;quot;2014-05-22T10:01:33.655Z&amp;quot;,
    &amp;quot;versions&amp;quot;: [
        {
            &amp;quot;type&amp;quot;: &amp;quot;GENERAL&amp;quot;,
            &amp;quot;uniqueId&amp;quot;: &amp;quot;soundActive&amp;quot;,
            &amp;quot;defaultValue&amp;quot;: &amp;quot;TRUE&amp;quot;,
            &amp;quot;definition&amp;quot;: &amp;quot;Undefined...&amp;quot;,
            &amp;quot;status&amp;quot;: &amp;quot;unreviewed&amp;quot;,
            &amp;quot;source&amp;quot;: &amp;quot;gpii&amp;quot;,
            &amp;quot;version&amp;quot;: &amp;quot;1&amp;quot;,
            &amp;quot;author&amp;quot;: &amp;quot;aatkins&amp;quot;,
            &amp;quot;updated&amp;quot;: &amp;quot;2014-05-22T10:01:33.655Z&amp;quot;,
            &amp;quot;comments&amp;quot;: [
                {
                    &amp;quot;comment&amp;quot;: &amp;quot;Submitted new unreviewed record.&amp;quot;,
                    &amp;quot;version&amp;quot;: &amp;quot;1&amp;quot;,
                    &amp;quot;author&amp;quot;: &amp;quot;aatkins&amp;quot;,
                    &amp;quot;updated&amp;quot;: &amp;quot;2014-05-22T10:01:33.655Z&amp;quot;
                }
            ]
        },
        {
            &amp;quot;type&amp;quot;: &amp;quot;GENERAL&amp;quot;,
            &amp;quot;uniqueId&amp;quot;: &amp;quot;soundActive&amp;quot;,
            &amp;quot;defaultValue&amp;quot;: &amp;quot;TRUE&amp;quot;,
            &amp;quot;definition&amp;quot;: &amp;quot;Undefined...&amp;quot;,
            &amp;quot;status&amp;quot;: &amp;quot;active&amp;quot;,
            &amp;quot;source&amp;quot;: &amp;quot;gpii&amp;quot;,
            &amp;quot;version&amp;quot;: &amp;quot;2&amp;quot;,
            &amp;quot;author&amp;quot;: &amp;quot;aatkins&amp;quot;,
            &amp;quot;updated&amp;quot;: &amp;quot;2014-05-23T10:01:33.655Z&amp;quot;,
            &amp;quot;comments&amp;quot;: [
                {
                    &amp;quot;comment&amp;quot;: &amp;quot;Published record after review.&amp;quot;,
                    &amp;quot;version&amp;quot;: &amp;quot;2&amp;quot;,
                    &amp;quot;author&amp;quot;: &amp;quot;aatkins&amp;quot;,
                    &amp;quot;updated&amp;quot;: &amp;quot;2014-05-23T10:01:33.655Z&amp;quot;
                }
            ]
        }
    ],
    &amp;quot;comments&amp;quot;: [
        {
            &amp;quot;comment&amp;quot;: &amp;quot;Submitted new unreviewed record.&amp;quot;,
            &amp;quot;version&amp;quot;: &amp;quot;1&amp;quot;,
            &amp;quot;author&amp;quot;: &amp;quot;aatkins&amp;quot;,
            &amp;quot;updated&amp;quot;: &amp;quot;2014-05-22T10:01:33.655Z&amp;quot;
        },
        {
            &amp;quot;comment&amp;quot;: &amp;quot;Published record after review.&amp;quot;,
            &amp;quot;version&amp;quot;: &amp;quot;2&amp;quot;,
            &amp;quot;author&amp;quot;: &amp;quot;aatkins&amp;quot;,
            &amp;quot;updated&amp;quot;: &amp;quot;2014-05-23T10:01:33.655Z&amp;quot;
        }
    ]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For those of you familiar with the CTR record structure, the "version" and "author" fields are managed entirely by the system, and are not required to look up or add records.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I hope that gives you a good sense of how I'm proposing to handle versions (and comments on versions).  Please review and comment.&lt;/p&gt;
&lt;div class="alert alert-info"&gt;
&lt;h1&gt;Update&lt;/h1&gt;
&lt;p&gt;For more information, check out &lt;a href="http://lists.gpii.net/pipermail/architecture/2014-June/002413.html" target="_BLANK"&gt;the discussion on the mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><category term="Couchdb"></category></entry><entry><title>Modularizing APIs in Express 4.x</title><link href="https://the-t-in-rtf.github.io/modular-express.html" rel="alternate"></link><published>2014-05-01T13:50:00+02:00</published><updated>2014-05-01T13:50:00+02:00</updated><author><name>Tony Atkins &lt;tony@raisingthefloor.org&gt;</name></author><id>tag:the-t-in-rtf.github.io,2014-05-01:/modular-express.html</id><summary type="html">&lt;p&gt;Express 4.x makes it nice and easy to create modular and reusable handlers...&lt;/p&gt;</summary><content type="html">&lt;h1&gt;A bit of background...&lt;/h1&gt;
&lt;p&gt;In some ways, &lt;a href="http://expressjs.com/"&gt;express&lt;/a&gt; is very modular, just like node itself.  You can easily bring in any of a large collection of standard modules to help in building your applications, and many of them are well known to anyone working with node.js.  Your dependencies can manage their own dependencies, it's all very civilized.&lt;/p&gt;
&lt;p&gt;This all starts to fall apart when you want to build a set of nested modules that expect to handle requests for part of the overall path (routes, in express terminology). &lt;a href="http://justjs.com/posts/creating-reusable-express-modules-with-their-own-routes-views-and-static-assets"&gt;Here's a blog that covers some of the pitfalls&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In summary, you need to wire your routes (which control which code handles which path) together entirely from the top, and either:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Configure all your routes from your main app.js file.&lt;/li&gt;
&lt;li&gt;Pass the top-level app object to a module and let the module add its own paths (and hopefully be smart enough to avoid path conflicts while doing so).&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;So, if it's not possible, I assume you wouldn't even be writing about it...&lt;/h1&gt;
&lt;p&gt;The thing is, those limitations were very much true of the 3.x version of express, but now that express 4 is available, there is a much better option.  Express 4 adds the concept of an explicit &lt;a href="http://expressjs.com/4x/api.html#router"&gt;router object&lt;/a&gt;, and makes it easy to create nested modules that add their own routes relative to their parent.&lt;/p&gt;
&lt;p&gt;Here's just one way you can use it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Let's say that you are a lazy programmer (you'd be in &lt;a href="http://threevirtues.com/"&gt;good company&lt;/a&gt;).  You have an API that needs (among other things) to have user management functions.&lt;/li&gt;
&lt;li&gt;Someone has already written a third-party library (&lt;a href="https://github.com/twilson63/express-couchUser"&gt;express-couchUser&lt;/a&gt;) that handles user management, and you want to use that instead of writing your own.&lt;/li&gt;
&lt;li&gt;Your app.js file requires and instantiates your API module (let's call it &lt;code&gt;api&lt;/code&gt;) and associates that with the path /api&lt;/li&gt;
&lt;li&gt;Your &lt;code&gt;api&lt;/code&gt; module requires express-couchUser and associates that with the path /user.&lt;/li&gt;
&lt;li&gt;express-couchUser becomes available under /api/user instead of /user.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That's just a simple example of why you'd want such a thing.  There are many other benefits that help with managing your code over time. Let's say (like me) you're working on an API.  As your API matures, you can move things around cleanly.  If tomorrow you decide to start having versioned API paths, you can easily move your existing API to /api/v1/, and all of the versioned paths will continue working without any changes in lower-level modules.  With this approach , you can reuse whatever modules that make sense when creating /api/v2/, or even when quickly setting up legacy links for the original non-versioned API.&lt;/p&gt;
&lt;p&gt;Finally, because the modules work with relative paths, you can test every module in complete isolation from other modules.  This is much saner for testing.  It doesn't matter that you'll add the module three levels deep in the path in your final app.  You just write a simple test that mounts your module at the top level and fire away.&lt;/p&gt;
&lt;p&gt;You can manage the versions for each module separately, keeping each module clean and small and focused on a clear part of the problem.&lt;/p&gt;
&lt;h1&gt;Code or it didn't happen...&lt;/h1&gt;
&lt;p&gt;So, how do you make this work?  Let's start with the simplest app.js imaginable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;express&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sample application&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./child&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/child&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello from the root of &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Express server listening on port &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's look at the contents of &lt;code&gt;./child/index.js&lt;/code&gt; (which could just as easily be a module):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;express&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;grandchild&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./grandchild&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/grandchild&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;grandchild&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// TODO:  Add a redirect to the api docs if someone request the root of the API, or at least an informative note.&lt;/span&gt;
    &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello from the child of &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And here's the "grandchild" module, &lt;code&gt;./child/grandchild/index.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;express&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello from the grandchild of &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you run &lt;code&gt;node app&lt;/code&gt;, each level returns the expected output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl http://localhost:5972/
Hello from the root of sample application.

&lt;span class="nv"&gt;$ &lt;/span&gt;curl http://localhost:5972/child/
Hello from the child of sample application.

&lt;span class="nv"&gt;$ &lt;/span&gt;curl http://localhost:5972/child/grandchild
Hello from the grandchild of sample application.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the syntax remains the same all the way down.  You just worry about passing things to the next link in the chain, and not about what the whole chain looks like.  As I needed to do so when developing this approach, I included the passing of a top-level config object as an example of how the chaining ideally works.&lt;/p&gt;
&lt;p&gt;Just in case you'd like to try it out on your own, I've published &lt;a href="https://github.com/the-t-in-rtf/express-module-tutorial"&gt;the source for this tutorial on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;A few more notes...&lt;/h1&gt;
&lt;p&gt;Here are a few things I found helpful in using this technique to modularize my existing express app.&lt;/p&gt;
&lt;p&gt;The new router object supports the same HTTP method shortcuts as the app object in express, so you can adapt old code by replacing your old app variable with a router in many cases.  The only exception is the DELETE method, which is aliased to app.del, but is available as router.delete.  The latter makes more sense anyway, as it actually matches the HTTP method.&lt;/p&gt;
&lt;p&gt;Also, although not pictured here, I have also seen modules that use an express "app" object instead of a router.  That approach works fine in 4.x, and has the added benefit of letting you easily use another templating language in a module without rolling your own.&lt;/p&gt;
&lt;p&gt;As a final caveat, upgrading to Express 4.x is not all that difficult, but does require some follow through.  For starters, a lot of modules have been moved out of express/connect, which means you have to explicitly bring them in.  For a good primer, check out this page:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://scotch.io/bar-talk/expressjs-4-0-new-features-and-upgrading-from-3-0"&gt;http://scotch.io/bar-talk/expressjs-4-0-new-features-and-upgrading-from-3-0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can also read the links provided when you try to run express with an old module, which are pretty descriptive, and link to documentation.  If you follow the right link, there's even a quick list of equivalents for the old built-ins:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/senchalabs/connect/blob/master/Readme.md#middleware"&gt;https://github.com/senchalabs/connect/blob/master/Readme.md#middleware&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Anyway, I hope that's useful for people who are also trying to work with nested modules in express.&lt;/p&gt;</content><category term="Express"></category></entry><entry><title>Relationships in CouchDb: It's Complicated</title><link href="https://the-t-in-rtf.github.io/relationships-complicated.html" rel="alternate"></link><published>2014-04-24T13:00:00+02:00</published><updated>2014-04-24T13:00:00+02:00</updated><author><name>Tony Atkins &lt;tony@raisingthefloor.org&gt;</name></author><id>tag:the-t-in-rtf.github.io,2014-04-24:/relationships-complicated.html</id><summary type="html">&lt;p&gt;Couch is great for somethings, but not at relationships.  This post describes how we can have both Couch and relationships.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;The Common Tools Registry is All About Relationships&lt;/h1&gt;
&lt;p&gt;One of the &lt;a href="wiki.gpii.net/index.php/Common_Terms_Registry"&gt;requirements&lt;/a&gt; for the &lt;a href="https://terms.raisingthefloor.org/"&gt;Common Terms Registry&lt;/a&gt; is that we store records in a flat format.  For this, &lt;a href="http://couchdb.apache.org/"&gt;CouchDb&lt;/a&gt; is perfect.&lt;/p&gt;
&lt;p&gt;However, another core requirement is that we clearly represent the relationship between standard terms and variations on those terms (aliases and translations, for example).  This is not something CouchDb is good at handling.&lt;/p&gt;
&lt;p&gt;There is &lt;a href="http://www.cmlenz.net/archives/2007/10/couchdb-joins"&gt;a blog article by Christopher Lenz&lt;/a&gt; that goes over a few strategies to handle relationships in CouchDb.  We took that as our starting point, tried a few approaches in depth, and ended up using a combination of CouchDb, Lucene, and Express to meet all of our requirements.&lt;/p&gt;
&lt;h1&gt;Our Requirements&lt;/h1&gt;
&lt;p&gt;So, what are our requirements as regards relationships?  We need to be able to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make it easy to find a standard term and its variations all at once.&lt;/li&gt;
&lt;li&gt;Ensure that the relationship is valid, i.e. that the "parent" record actually exists.&lt;/li&gt;
&lt;li&gt;Preserve the relationship when either the parent or the child is updated.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'll start with the second two, which are a bit simpler to describe.&lt;/p&gt;
&lt;h2&gt;Referential Integrity&lt;/h2&gt;
&lt;p&gt;In SQL, this would be simply a matter of defining a foreign key constraint.  Once that's done, it would not be possible to either create a link to a non-existent record or to delete a record that other records refer to.&lt;/p&gt;
&lt;p&gt;Couchdb helpfully provides &lt;a href="https://wiki.apache.org/couchdb/Document_Update_Validation"&gt;a mechanism to validate records as they are added, updated or deleted&lt;/a&gt;.  Couchdb does not, however, provide a means to check for the existence of a related record, which means that we can't provide either of the safety checks that a foreign key constraint provides.&lt;/p&gt;
&lt;p&gt;Our solution to this is to have &lt;a href="expressjs.com"&gt;Express&lt;/a&gt; handle the adding, editing, and deleting of records.  Express can perform the necessary checks when manipulating both child and parent records.&lt;/p&gt;
&lt;h2&gt;Preserving the Relationship&lt;/h2&gt;
&lt;p&gt;Our initial approach was to store the list of child records in the parent record (see "cmlenz" blog for details).  This makes it easy to search for standard terms based on words mentioned in a variation on that term.  However, it introduces serious drawbacks when editing both parent and child records.&lt;/p&gt;
&lt;p&gt;When editing a child record, if you change the link to the parent record, you need to regenerate the child data for both the old and the new parent record.  This means you may have to make as many as three updates for an edit.&lt;/p&gt;
&lt;p&gt;When editing a parent record, you have to make sure to preserve the current child data.  This is certainly possible, but introduces unnecessary complexity.  If you allow changes to the key used to link records, you also need to trigger an update for all child records, which is a much more open ended set of cascading updates.&lt;/p&gt;
&lt;p&gt;To solve both problems, we will rely on Express to help us disentangle the data as it is stored in Couch from the format we deliver via our REST interfaces. That's covered in detail below, to summarize as it relates to preserving the relationship, the key is that only the child record actually stores a link to the parent record, and that link is validated when the record is added or updated.&lt;/p&gt;
&lt;h2&gt;Enabling reasonable searching using a combined record format&lt;/h2&gt;
&lt;p&gt;If we are looking for settings related to "color", we also want to see settings related to "colour".  More importantly, we want to know which is the standard term, and which is the alias.  We will not have a single field that has only the word "color" or "colour" in it, so we need full text searching of a range of fields (label, description, etc.).&lt;/p&gt;
&lt;p&gt;The most obvious choice for full text searching is &lt;a href="https://github.com/rnewson/couchdb-lucene"&gt;CouchDb Lucene&lt;/a&gt;, which brings the power of &lt;a href="https://lucene.apache.org/"&gt;Lucene&lt;/a&gt; to Couch.  Lucene indexes the raw records directly with hints from a particular type of design document.  This means that it will return search results that are a mix of parent and child records, ordered by how well they match the search terms provided by the user, or whatever sort terms the user provides.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Diagram of record format presented by Lucene." src="/images/2014-04-24-lucene-diagram.png"&gt;&lt;/p&gt;
&lt;p&gt;We need to convert this to a list of standard terms that include their child records.  To do this, we use Express to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Execute the requested search.&lt;/li&gt;
&lt;li&gt;Retrieve the underlying record data for the search results.&lt;/li&gt;
&lt;li&gt;Knit together the mixed list of parent and child records into a unique list of parent records.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The output will look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Diagram of final record format as presented by Express." src="/images/2014-04-24-express-diagram.png"&gt;&lt;/p&gt;
&lt;h3&gt;Sorting&lt;/h3&gt;
&lt;p&gt;Because only Express has access to the final format, it has to handle sorting and paging.&lt;/p&gt;
&lt;p&gt;To take advantage of the sorting in Lucene, we apply two simple rules as we evolve the raw search results:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If a child record appears in the search results, we display the parent record in its place.&lt;/li&gt;
&lt;li&gt;If a parent record (or its children) appear in multiple places in the search results, we only display the first match.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Paging&lt;/h3&gt;
&lt;p&gt;That still leaves us with the problem of paging results.  Lucene doesn't know about the final order or record count, so it can't handle the paging.  Again, we handle this in Express.  In the proof of concept work done so far, we generate the full list of results every time and return only the requested slice of that set.  For the real implementation, we will cache the search results using a library like &lt;a href="https://www.npmjs.org/package/node-cache"&gt;node-cache&lt;/a&gt;.  As we have two lookups, I would propose two caches:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;For individual searches, we would cache the search results returned by Lucene under the full query string (or hashed equivalent).  Those search results would only contain a list of matching uniqueIds for the parent record.&lt;/li&gt;
&lt;li&gt;We would cache parent records by uniqueIds.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With that approach, we can check for cache misses for just the paged set of results and make a single call to look up and cache all of the misses.&lt;/p&gt;
&lt;p&gt;This should limit the amount of memory used by the caches and ensure that only one instance of each parent record is stored in the cache at a time.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Why am I writing this down (besides the fact that my shoulder angel told me to)?&lt;/p&gt;
&lt;p&gt;Because we want feedback on whether this is a sane and complete approach before we go much further with it.  Please comment if you have ideas about how to do what we're trying to do.&lt;/p&gt;</content><category term="Couchdb"></category><category term="Express"></category><category term="Lucene"></category></entry><entry><title>Why Pelican?</title><link href="https://the-t-in-rtf.github.io/why-pelican.html" rel="alternate"></link><published>2014-01-13T23:00:00+01:00</published><updated>2014-01-13T23:00:00+01:00</updated><author><name>Tony Atkins &lt;tony@raisingthefloor.org&gt;</name></author><id>tag:the-t-in-rtf.github.io,2014-01-13:/why-pelican.html</id><summary type="html">&lt;p&gt;So, why did I pick Pelican for this site?  Read on for a brief bit of background.&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are blogs used by the team I'm working with, but in talking with Avtar, he was suggesting that they are not happy with their current solution and are exploring static site generation tools.&lt;/p&gt;
&lt;p&gt;Static site generation tools give some great options for building a full web site from a bit of content and a few template files, and for refactoring an entire site easily to suit changing requirements.&lt;/p&gt;
&lt;p&gt;Avtar recommended &lt;a href="http://blog.getpelican.com/" title="Pelican"&gt;Pelican&lt;/a&gt;, a content generation tool written in Python.  Before committing, I wanted to review the full range of options to see what suited me best.&lt;/p&gt;
&lt;p&gt;In my initial research, I found &lt;a href="http://staticsitegenerators.net/" title="Static Site Generators"&gt;Static Site Generators&lt;/a&gt;, a site that includes both a listing of the site generators out there as well as the raw JSON data used to generate the site.  The analyst in me loves getting access to the raw data, although I ended up mostly sticking to their simple sortable table.&lt;/p&gt;
&lt;p&gt;I was looking for something lightweight, that let me get the most for the least effort.  I didn't want to fight the template language or data formatting conventions too much.  I also wanted something with a good theme system, that I could see myself adapting for use with our &lt;a href="http://fluidproject.org/products/infusion/" title="Fluid component library"&gt;Fluid component library&lt;/a&gt; down the road.&lt;/p&gt;
&lt;p&gt;Since the list is over two hundred entries long, I let the wisdom of the crowd do my first cull for me and sorted by the number of stars each solution had received.  I worked my way down, skipping now and then if I saw something that piqued my interest or that I had already heard of.  I read up on &lt;a href="http://harpjs.com/" title="Harp"&gt;Harp&lt;/a&gt;, &lt;a href="http://wintersmith.io/" title="WinterSmith"&gt;WinterSmith&lt;/a&gt;, &lt;a href="http://laktek.github.com/punch" title="Punch"&gt;Punch&lt;/a&gt;, and others.  I looked through their available template languages (no Jade, please), their conventions for storing blog and page content, the size of their community, the language they were based on.&lt;/p&gt;
&lt;p&gt;I ended up finally coming back to Pelican, just as Avtar had recommended.&lt;/p&gt;
&lt;p&gt;Why commit to Pelican?  Even though I like its features and overall ease of use, ultimately I chose Pelican because of its community.  As I said, support for themes was one of my key criteria.  Of the top tools I tried, Pelican was the only one I saw that not only supported themes, but that had a clear community of people contributing themes, and a showcase for those themes.&lt;/p&gt;
&lt;p&gt;That tells me that care not only about features, but about how people use them, about showcasing the work of their community.  Want confirmation?  Check out &lt;a href="https://github.com/getpelican/pelican-themes/graphs/contributors" title="the graph of contributors"&gt;the graph of contributors&lt;/a&gt;.  They have a steady stream of people keeping the software alive.&lt;/p&gt;
&lt;p&gt;Once they had me, I was impressed with the quality of their documentation and the polish of their bundled tools.  I encountered only small glitches, and those were either obvious or easily Googleable.&lt;/p&gt;
&lt;p&gt;That's basically it.  Convince me your project is alive, and don't turn me off too badly as I'm getting started.&lt;/p&gt;</content><category term="HTML"></category></entry><entry><title>Hello, everyone...</title><link href="https://the-t-in-rtf.github.io/hello-everyone.html" rel="alternate"></link><published>2014-01-12T20:15:00+01:00</published><updated>2014-01-12T20:15:00+01:00</updated><author><name>Tony Atkins &lt;tony@raisingthefloor.org&gt;</name></author><id>tag:the-t-in-rtf.github.io,2014-01-12:/hello-everyone.html</id><summary type="html">&lt;p&gt;Hello, everyone...&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello, everyone.  I've just started working with &lt;a href="http://raisingthefloor.org/" title="Raising the Floor"&gt;Raising the Floor&lt;/a&gt;.  I'm currently working on the &lt;a href="http://wiki.gpii.net/index.php/Common_Terms_Registry" title="Common Terms Registry"&gt;Common Terms Registry&lt;/a&gt;, and will soon be working on the &lt;a href="http://wiki.gpii.net/index.php/Unified_Listing" title="Unified Listing"&gt;Unified Listing&lt;/a&gt;.  I will be using this blog to share things I learn as part of my journey with the team.&lt;/p&gt;</content></entry></feed>