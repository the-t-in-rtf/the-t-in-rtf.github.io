<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The "T" in RtF - Tony Atkins</title><link href="http://the-t-in-rtf.github.io/" rel="alternate"></link><link href="http://the-t-in-rtf.github.io/feeds/tony-atkins.atom.xml" rel="self"></link><id>http://the-t-in-rtf.github.io/</id><updated>2014-08-15T12:00:00+02:00</updated><entry><title>The best of both worlds: Free text and structured searching in the same CouchDb-Lucene search.</title><link href="http://the-t-in-rtf.github.io/couch-lucene.html" rel="alternate"></link><published>2014-08-15T12:00:00+02:00</published><updated>2014-08-15T12:00:00+02:00</updated><author><name>Tony Atkins &lt;tony@raisingthefloor.org&gt;</name></author><id>tag:the-t-in-rtf.github.io,2014-08-15:/couch-lucene.html</id><summary type="html">&lt;p&gt;Lucene and Couch are great together once you break them in a bit...&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;One of the key requirements for the Preference Terms Dictionary (nee Common Terms Registry) is that we allow users to search using their own language and help them find common terms.&lt;/p&gt;
&lt;p&gt;As outlined in &lt;a href="http://the-t-in-rtf.github.io/relationships-complicated.html"&gt;my previous blog on our combined record structure&lt;/a&gt;, we use Lucene (specifically &lt;a href="https://github.com/rnewson/couchdb-lucene"&gt;couchdb-lucene&lt;/a&gt;) to add full-text searching of our records.&lt;/p&gt;
&lt;p&gt;Recently, in demonstrating the search in a meeting, I noticed some problems in executing seemingly simple searches, and did a bit of investigating.  I wanted to share what I learned.&lt;/p&gt;
&lt;p&gt;It turns out that with the great power of Lucene comes great responsibility.   Namely, to take best advantage of Lucene's power, you need to understand and configure its analyzers.&lt;/p&gt;
&lt;h1&gt;Our requirements&lt;/h1&gt;
&lt;p&gt;As you can see in &lt;a href="https://github.com/the-t-in-rtf/common-terms-registry/blob/master/express/api/ctr.md"&gt;our API docs&lt;/a&gt;, the Preference Terms Dictionary provides a powerful search, that includes the ability to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Search the full text of all records and find terms and aliases that match anywhere in their definition, term label, uniqueId, et cetera.&lt;/li&gt;
&lt;li&gt;Filter and order search results using structured field data (for example, only displaying records with the right status, or sorting by uniqueId).&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;The promise of (and problems with) CouchDB-Lucene&lt;/h1&gt;
&lt;p&gt;CouchdB-lucene integration seems like it should help greatly with this.  It provides high performance full-text searching from within a couch view (proxied through a separate server running as a java process).&lt;/p&gt;
&lt;p&gt;Initially, I put a high priority on "stemming" words that might appear in the definition.  "Display" is a good example.  You might have definitions like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;"stop displaying on-screen feedback"&lt;/li&gt;
&lt;li&gt;"change the number of columns displayed"&lt;/li&gt;
&lt;li&gt;"speak all text that appears on the primary display"&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In each case, you would want "display" to match all three.  For this, we use one of the "stemming" analyzers included with Lucene, namely the "porter" analyzer.  This worked well enough, as it would match all three variations.  However, it caused two problems:&lt;/p&gt;
&lt;p&gt;First, uniqueIds like "8DotComputerBrailleTable" and "org.gnome.packagekit.ignored-dbus-requests" were broken down into their component parts and stripped of "blocked" terms like "8".  This made it difficult to precisely match a specific uniqueId.&lt;/p&gt;
&lt;p&gt;Second, the query itself was parsed using the analyzer, which would truncate a search for "computer" to "comput".  This is fine when comparing apples to apples, i.e. if the definition contains "displayed", and that becomes "displai" in the index, then it doesn't matter if the query is also searching for "displai" instead of "display".  They'll still match.&lt;/p&gt;
&lt;p&gt;The problem comes when you're trying to search for something like a uniqueId that contains a className.  The className will be broken up into individual words at every period, and then "stop words" will be stripped.  Both "8DotComputerBraille" and "6DotComputerBraille" will be converted to "dot computer braille", which makes it impossible to search for one but not the other.&lt;/p&gt;
&lt;p&gt;So how did this get fixed?&lt;/p&gt;
&lt;h1&gt;Different types of data, different approaches&lt;/h1&gt;
&lt;p&gt;To recap, we had to balance two concerns:  We needed to prevent lucene from mangling values like uniqueIds in both our indexes and our queries.  We also wanted stemming for definitions and other free text.&lt;/p&gt;
&lt;p&gt;There is no single Lucene analyzer that will do this well.  Instead, you need to use the "perfield" wrapper and specify which analyzer to use for each field.   Here's what our analyzer setting in couchdb-lucene finally ended up looking like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;perfield:
    {
        default: &amp;quot;porter&amp;quot;,
        uniqueId: &amp;quot;keyword&amp;quot;,
        aliasOf: &amp;quot;keyword&amp;quot;,
        translationOf: &amp;quot;keyword&amp;quot;
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The default analyzer is "porter" so that we're matching "stems".  Plural and singular work interchangeably.  Past and present tense work as well.  This is perfect for the default search field, in which we put every piece of searchable information.&lt;/p&gt;
&lt;p&gt;For the fields we want to be treated literally, we use the "keyword" analyzer.  The beauty of this is that the analyzer is applied per field, &lt;em&gt;even for the query itself&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Here's a sample search URL from my local instance that illustrates how nicely this works:&lt;/p&gt;
&lt;p&gt;http://localhost:5984/_fti/local/tr/_design/lucene/by_content?q=display+termLabel:display+uniqueId:display&lt;/p&gt;
&lt;p&gt;That's the word "display" three times in the same query, once without a field prefix, once with the "termLabel" field prefix, and once with the "uniqueId" prefix.  Couchdb-lucene helpfully shows us what the final parsed query looks like, and the results are instructive:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;quot;q&amp;quot;: &amp;quot;default:displai termLabel:displai uniqueId:display&amp;quot;,
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Both the unqualified term and the term that is prefixed with the "termLabel" field are transformed so that all stemmed variations are correctly matched.  For the "uniqueId" field, which needs to be a literal, the value is left alone.&lt;/p&gt;
&lt;p&gt;So we end up with exactly what we want, which is to have an inclusive search that stems out and matches variation on your starting language, but which can be cleanly filtered using exact field values.&lt;/p&gt;</content><category term="Couchdb"></category><category term="Lucene"></category></entry><entry><title>Adding a revision history (with comments) to CouchDB...</title><link href="http://the-t-in-rtf.github.io/couch-history.html" rel="alternate"></link><published>2014-06-12T12:00:00+02:00</published><updated>2014-06-12T12:00:00+02:00</updated><author><name>Tony Atkins &lt;tony@raisingthefloor.org&gt;</name></author><id>tag:the-t-in-rtf.github.io,2014-06-12:/couch-history.html</id><summary type="html">&lt;p&gt;Using a combination of attachments and a light sprinkling of sensible conventions, we can add a scalable version history and comments to Couchdb records.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I shared this with our mailing list a while back, but wanted to put out a more complete and formal document for further review.&lt;/p&gt;
&lt;p&gt;For the Common Terms Registry (and presumably for the Unified Listing), we will need a fuller change history than Couchdb (our back-end data store) provides.&lt;/p&gt;
&lt;h1&gt;Our requirements&lt;/h1&gt;
&lt;p&gt;We need:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To preserve the change history even if the database is compacted and cleaned up.&lt;/li&gt;
&lt;li&gt;To preserve a record of the author of each change.&lt;/li&gt;
&lt;li&gt;To allow versions to be submitted as proposed changes and later approved by moderators.&lt;/li&gt;
&lt;li&gt;To allow a comment on what was changed in each version and why.&lt;/li&gt;
&lt;li&gt;To provide the ability to leave a new comment (or respond to an existing comment) without making an additional change.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Versions as attachments&lt;/h1&gt;
&lt;p&gt;To satisfy these requirements, I propose extending the "version as attachment" method outlined in &lt;a href="http://jchris.ic.ht/drl/_design/sofa/_list/post/post-page?startkey=[%22Versioning-docs-in-CouchDB%22]"&gt;"jchris" blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In that approach, whenever there is a change, the old content of the document is added as an attachment.  The attachment is just a JSON file, which makes reading and writing simple.&lt;/p&gt;
&lt;p&gt;This approach has a few key strengths:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It absolutely and clearly associates versions with a single document.&lt;/li&gt;
&lt;li&gt;It reuses a core feature of CouchDB (attachments) rather than introducing an entirely new data structure.&lt;/li&gt;
&lt;li&gt;It only introduces complexity when it's needed.  Depending on what you're trying to do, you can:&lt;ul&gt;
&lt;li&gt;Retrieve a single record without any attachments (the default)&lt;/li&gt;
&lt;li&gt;Retrieve a record with a list of attachments, and then retrieve each attachment as desired.&lt;/li&gt;
&lt;li&gt;Retrieve a record and all attachments in a single call.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There is a limitation to this approach, in that when using lists and views, you only have access to the list of attachments, meaning that you cannot retrieve the full version history of all documents in a single request.  This is not a huge problem in that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CouchDB itself only allows you to retrieve the version history for a single document (we'd be in the same boat with CouchDB, in other words).&lt;/li&gt;
&lt;li&gt;We are most interested in presenting the current published version of each document in list views, and in presenting the full version history when viewing or editing a single document.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;How I propose to implement versions&lt;/h1&gt;
&lt;p&gt;So here are the specifics I propose to glue this all together and meet our requirements.&lt;/p&gt;
&lt;p&gt;We need a way to keep track of version numbers.  We can't use CouchDB's version structures (&lt;code&gt;_rev&lt;/code&gt; and &lt;code&gt;revpos&lt;/code&gt;) to keep track of versions.  The &lt;code&gt;_rev&lt;/code&gt; value is overwritten as soon as we add an attachment.  We could retrieve the current record and change history, and save the previous version to the history, but we could never store the current record's &lt;code&gt;_rev&lt;/code&gt; value, as we wouldn't know it up front.  We could choose to store just past versions in the history, but that would mean that we can't really keep track of unpublished drafts using the same mechanism.&lt;/p&gt;
&lt;p&gt;The solution is to assign and reuse our own version numbers for documents.  Because we know what the current version is when making updates, we can store the current version in the change history.  This is slightly redundant for records in which the published version is also the latest version, but is key in adding support for unpublished changes.  If the current document has a version number of 6 and there is a version 7 attached, then version 7 is by definition an unpublished draft.&lt;/p&gt;
&lt;p&gt;For convenience, we store the document version twice in the history.  Once in the document itself, and once in the name of the attachment, as in &lt;code&gt;versions/NUMBER&lt;/code&gt;.  Having the version in the list of attachments allows us to see where we are in history without loading the version history.  It also allows us to figure out what the next version number in the series should be without loading the version history.  It also lends itself to easy natural ordering of edits.&lt;/p&gt;
&lt;h2&gt;Edits only at the end&lt;/h2&gt;
&lt;p&gt;As a reminder, the document itself represents the latest published version.  There may be later unpublished versions, but the proposed changes are chained.&lt;/p&gt;
&lt;p&gt;If the last published version is version 6, and someone proposes a change, that becomes version 7.  If someone else wishes to make an update, they are in essence starting with version 7 when creating version 8.&lt;/p&gt;
&lt;p&gt;This makes it fairly clean to publish a proposed change.  If we like version 8, that content replaces the current document.  Given that both version 6 (the old version) and version 8 (the new version) are already in the change history, that history does not need to be updated.&lt;/p&gt;
&lt;p&gt;If, on the other hand, version 8 is rejected, and we want to approve version 7, we use the same mechanism as we would for any "revert" operation.  We copy the content of version 7 to version 9, update the version history to include that content, and add a comment (see below) indicating that the content was cloned from version 7.&lt;/p&gt;
&lt;h1&gt;So what about comments?&lt;/h1&gt;
&lt;p&gt;As mentioned in our requirements, we also need to support a back and forth dialog between contributors and moderators.  I would propose a similar approach as we used with versions.&lt;/p&gt;
&lt;p&gt;Comments should be stored as attachments, and named with respect to the version they are associated with (for example: &lt;code&gt;versions/1/comments/1&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Because the list of attachments returned with the original CouchDB document is a flat structure that includes path information, we can extract the full list of comments as well as their position in the hierarchy.  In that way we can trivially do things like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Associate comments with an individual revision, for example when paging through the change history.&lt;/li&gt;
&lt;li&gt;Also keep the full comment history as a separate object.&lt;/li&gt;
&lt;li&gt;Clearly indicate that comments that were relevant to an older version.&lt;/li&gt;
&lt;li&gt;Filter comments displayed to those entered against the last version or versions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We may not choose to build a UI that relies on all of those features, but the simple naming convention gives us all of those options and more.&lt;/p&gt;
&lt;h1&gt;Putting it all together&lt;/h1&gt;
&lt;p&gt;So, if you're still reading, what will this all look like?&lt;/p&gt;
&lt;p&gt;Here is a single sample record with two versions and two comment threads, as it would be presented in CouchDB, with the list of attachments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{
   &amp;quot;_id&amp;quot;: &amp;quot;0069b020043147f58eeda6d72c9845f4&amp;quot;,
   &amp;quot;_rev&amp;quot;: &amp;quot;60-8e50635398074f9eff7f7875a01fad6f&amp;quot;,
   &amp;quot;type&amp;quot;: &amp;quot;GENERAL&amp;quot;,
   &amp;quot;uniqueId&amp;quot;: &amp;quot;soundActive&amp;quot;,
   &amp;quot;defaultValue&amp;quot;: &amp;quot;TRUE&amp;quot;,
   &amp;quot;definition&amp;quot;: &amp;quot;Undefined...&amp;quot;,
   &amp;quot;status&amp;quot;: &amp;quot;active&amp;quot;,
   &amp;quot;source&amp;quot;: &amp;quot;gpii&amp;quot;,
   &amp;quot;version&amp;quot;: &amp;quot;2&amp;quot;,
   &amp;quot;updated&amp;quot;: &amp;quot;2014-05-22T10:01:33.655Z&amp;quot;,
   &amp;quot;_attachments&amp;quot;: {
       &amp;quot;versions/2/comments/1&amp;quot;: {
           &amp;quot;content_type&amp;quot;: &amp;quot;application/json&amp;quot;,
           &amp;quot;revpos&amp;quot;: 58,
           &amp;quot;digest&amp;quot;: &amp;quot;md5-zHlXptYHwLkBg9yCDhmTCg==&amp;quot;,
           &amp;quot;length&amp;quot;: 242,
           &amp;quot;stub&amp;quot;: true
       },
       &amp;quot;versions/2&amp;quot;: {
           &amp;quot;content_type&amp;quot;: &amp;quot;application/json&amp;quot;,
           &amp;quot;revpos&amp;quot;: 60,
           &amp;quot;digest&amp;quot;: &amp;quot;md5-zHlXptYHwLkBg9yCDhmTCg==&amp;quot;,
           &amp;quot;length&amp;quot;: 242,
           &amp;quot;stub&amp;quot;: true
       },
       &amp;quot;versions/1/comments/1&amp;quot;: {
           &amp;quot;content_type&amp;quot;: &amp;quot;application/json&amp;quot;,
           &amp;quot;revpos&amp;quot;: 58,
           &amp;quot;digest&amp;quot;: &amp;quot;md5-zHlXptYHwLkBg9yCDhmTCg==&amp;quot;,
           &amp;quot;length&amp;quot;: 242,
           &amp;quot;stub&amp;quot;: true
       },
       &amp;quot;versions/1&amp;quot;: {
           &amp;quot;content_type&amp;quot;: &amp;quot;application/json&amp;quot;,
           &amp;quot;revpos&amp;quot;: 59,
           &amp;quot;digest&amp;quot;: &amp;quot;md5-zHlXptYHwLkBg9yCDhmTCg==&amp;quot;,
           &amp;quot;length&amp;quot;: 242,
           &amp;quot;stub&amp;quot;: true
       }
   }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the &lt;code&gt;?attachments=true&lt;/code&gt; parameter is passed, the results will also include MIME-encoded attachment content, so we can get everything we care about in a single request.  We'd decode the attachments using a library like &lt;a href="https://github.com/FooBarWidget/multipart-parser"&gt;multipart-parser&lt;/a&gt; or &lt;a href="https://github.com/felixge/node-formidable"&gt;node-formidable&lt;/a&gt;, from that point it's just JSON data.&lt;/p&gt;
&lt;p&gt;Using the above information and the attachment content, here is the same record as I would propose to display it via our API (which would include query parameters to show/hide both versions and comments):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{
    &amp;quot;type&amp;quot;: &amp;quot;GENERAL&amp;quot;,
    &amp;quot;uniqueId&amp;quot;: &amp;quot;soundActive&amp;quot;,
    &amp;quot;defaultValue&amp;quot;: &amp;quot;TRUE&amp;quot;,
    &amp;quot;definition&amp;quot;: &amp;quot;Undefined...&amp;quot;,
    &amp;quot;status&amp;quot;: &amp;quot;active&amp;quot;,
    &amp;quot;source&amp;quot;: &amp;quot;gpii&amp;quot;,
    &amp;quot;version&amp;quot;: &amp;quot;2&amp;quot;,
    &amp;quot;author&amp;quot;: &amp;quot;aatkins&amp;quot;,
    &amp;quot;updated&amp;quot;: &amp;quot;2014-05-22T10:01:33.655Z&amp;quot;,
    &amp;quot;versions&amp;quot;: [
        {
            &amp;quot;type&amp;quot;: &amp;quot;GENERAL&amp;quot;,
            &amp;quot;uniqueId&amp;quot;: &amp;quot;soundActive&amp;quot;,
            &amp;quot;defaultValue&amp;quot;: &amp;quot;TRUE&amp;quot;,
            &amp;quot;definition&amp;quot;: &amp;quot;Undefined...&amp;quot;,
            &amp;quot;status&amp;quot;: &amp;quot;unreviewed&amp;quot;,
            &amp;quot;source&amp;quot;: &amp;quot;gpii&amp;quot;,
            &amp;quot;version&amp;quot;: &amp;quot;1&amp;quot;,
            &amp;quot;author&amp;quot;: &amp;quot;aatkins&amp;quot;,
            &amp;quot;updated&amp;quot;: &amp;quot;2014-05-22T10:01:33.655Z&amp;quot;,
            &amp;quot;comments&amp;quot;: [
                {
                    &amp;quot;comment&amp;quot;: &amp;quot;Submitted new unreviewed record.&amp;quot;,
                    &amp;quot;version&amp;quot;: &amp;quot;1&amp;quot;,
                    &amp;quot;author&amp;quot;: &amp;quot;aatkins&amp;quot;,
                    &amp;quot;updated&amp;quot;: &amp;quot;2014-05-22T10:01:33.655Z&amp;quot;
                }
            ]
        },
        {
            &amp;quot;type&amp;quot;: &amp;quot;GENERAL&amp;quot;,
            &amp;quot;uniqueId&amp;quot;: &amp;quot;soundActive&amp;quot;,
            &amp;quot;defaultValue&amp;quot;: &amp;quot;TRUE&amp;quot;,
            &amp;quot;definition&amp;quot;: &amp;quot;Undefined...&amp;quot;,
            &amp;quot;status&amp;quot;: &amp;quot;active&amp;quot;,
            &amp;quot;source&amp;quot;: &amp;quot;gpii&amp;quot;,
            &amp;quot;version&amp;quot;: &amp;quot;2&amp;quot;,
            &amp;quot;author&amp;quot;: &amp;quot;aatkins&amp;quot;,
            &amp;quot;updated&amp;quot;: &amp;quot;2014-05-23T10:01:33.655Z&amp;quot;,
            &amp;quot;comments&amp;quot;: [
                {
                    &amp;quot;comment&amp;quot;: &amp;quot;Published record after review.&amp;quot;,
                    &amp;quot;version&amp;quot;: &amp;quot;2&amp;quot;,
                    &amp;quot;author&amp;quot;: &amp;quot;aatkins&amp;quot;,
                    &amp;quot;updated&amp;quot;: &amp;quot;2014-05-23T10:01:33.655Z&amp;quot;
                }
            ]
        }
    ],
    &amp;quot;comments&amp;quot;: [
        {
            &amp;quot;comment&amp;quot;: &amp;quot;Submitted new unreviewed record.&amp;quot;,
            &amp;quot;version&amp;quot;: &amp;quot;1&amp;quot;,
            &amp;quot;author&amp;quot;: &amp;quot;aatkins&amp;quot;,
            &amp;quot;updated&amp;quot;: &amp;quot;2014-05-22T10:01:33.655Z&amp;quot;
        },
        {
            &amp;quot;comment&amp;quot;: &amp;quot;Published record after review.&amp;quot;,
            &amp;quot;version&amp;quot;: &amp;quot;2&amp;quot;,
            &amp;quot;author&amp;quot;: &amp;quot;aatkins&amp;quot;,
            &amp;quot;updated&amp;quot;: &amp;quot;2014-05-23T10:01:33.655Z&amp;quot;
        }
    ]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For those of you familiar with the CTR record structure, the "version" and "author" fields are managed entirely by the system, and are not required to look up or add records.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I hope that gives you a good sense of how I'm proposing to handle versions (and comments on versions).  Please review and comment.&lt;/p&gt;
&lt;div class="alert alert-info"&gt;
&lt;h1&gt;Update&lt;/h1&gt;
&lt;p&gt;For more information, check out &lt;a href="http://lists.gpii.net/pipermail/architecture/2014-June/002413.html" target="_BLANK"&gt;the discussion on the mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><category term="Couchdb"></category></entry><entry><title>Modularizing APIs in Express 4.x</title><link href="http://the-t-in-rtf.github.io/modular-express.html" rel="alternate"></link><published>2014-05-01T13:50:00+02:00</published><updated>2014-05-01T13:50:00+02:00</updated><author><name>Tony Atkins &lt;tony@raisingthefloor.org&gt;</name></author><id>tag:the-t-in-rtf.github.io,2014-05-01:/modular-express.html</id><summary type="html">&lt;p&gt;Express 4.x makes it nice and easy to create modular and reusable handlers...&lt;/p&gt;</summary><content type="html">&lt;h1&gt;A bit of background...&lt;/h1&gt;
&lt;p&gt;In some ways, &lt;a href="http://expressjs.com/"&gt;express&lt;/a&gt; is very modular, just like node itself.  You can easily bring in any of a large collection of standard modules to help in building your applications, and many of them are well known to anyone working with node.js.  Your dependencies can manage their own dependencies, it's all very civilized.&lt;/p&gt;
&lt;p&gt;This all starts to fall apart when you want to build a set of nested modules that expect to handle requests for part of the overall path (routes, in express terminology). &lt;a href="http://justjs.com/posts/creating-reusable-express-modules-with-their-own-routes-views-and-static-assets"&gt;Here's a blog that covers some of the pitfalls&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In summary, you need to wire your routes (which control which code handles which path) together entirely from the top, and either:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Configure all your routes from your main app.js file.&lt;/li&gt;
&lt;li&gt;Pass the top-level app object to a module and let the module add its own paths (and hopefully be smart enough to avoid path conflicts while doing so).&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;So, if it's not possible, I assume you wouldn't even be writing about it...&lt;/h1&gt;
&lt;p&gt;The thing is, those limitations were very much true of the 3.x version of express, but now that express 4 is available, there is a much better option.  Express 4 adds the concept of an explicit &lt;a href="http://expressjs.com/4x/api.html#router"&gt;router object&lt;/a&gt;, and makes it easy to create nested modules that add their own routes relative to their parent.&lt;/p&gt;
&lt;p&gt;Here's just one way you can use it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Let's say that you are a lazy programmer (you'd be in &lt;a href="http://threevirtues.com/"&gt;good company&lt;/a&gt;).  You have an API that needs (among other things) to have user management functions.&lt;/li&gt;
&lt;li&gt;Someone has already written a third-party library (&lt;a href="https://github.com/twilson63/express-couchUser"&gt;express-couchUser&lt;/a&gt;) that handles user management, and you want to use that instead of writing your own.&lt;/li&gt;
&lt;li&gt;Your app.js file requires and instantiates your API module (let's call it &lt;code&gt;api&lt;/code&gt;) and associates that with the path /api&lt;/li&gt;
&lt;li&gt;Your &lt;code&gt;api&lt;/code&gt; module requires express-couchUser and associates that with the path /user.&lt;/li&gt;
&lt;li&gt;express-couchUser becomes available under /api/user instead of /user.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That's just a simple example of why you'd want such a thing.  There are many other benefits that help with managing your code over time. Let's say (like me) you're working on an API.  As your API matures, you can move things around cleanly.  If tomorrow you decide to start having versioned API paths, you can easily move your existing API to /api/v1/, and all of the versioned paths will continue working without any changes in lower-level modules.  With this approach , you can reuse whatever modules that make sense when creating /api/v2/, or even when quickly setting up legacy links for the original non-versioned API.&lt;/p&gt;
&lt;p&gt;Finally, because the modules work with relative paths, you can test every module in complete isolation from other modules.  This is much saner for testing.  It doesn't matter that you'll add the module three levels deep in the path in your final app.  You just write a simple test that mounts your module at the top level and fire away.&lt;/p&gt;
&lt;p&gt;You can manage the versions for each module separately, keeping each module clean and small and focused on a clear part of the problem.&lt;/p&gt;
&lt;h1&gt;Code or it didn't happen...&lt;/h1&gt;
&lt;p&gt;So, how do you make this work?  Let's start with the simplest app.js imaginable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;express&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sample application&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./child&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/child&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello from the root of &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Express server listening on port &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's look at the contents of &lt;code&gt;./child/index.js&lt;/code&gt; (which could just as easily be a module):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;express&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;grandchild&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./grandchild&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/grandchild&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;grandchild&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// TODO:  Add a redirect to the api docs if someone request the root of the API, or at least an informative note.&lt;/span&gt;
    &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello from the child of &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And here's the "grandchild" module, &lt;code&gt;./child/grandchild/index.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;express&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello from the grandchild of &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you run &lt;code&gt;node app&lt;/code&gt;, each level returns the expected output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl http://localhost:5972/
Hello from the root of sample application.

&lt;span class="nv"&gt;$ &lt;/span&gt;curl http://localhost:5972/child/
Hello from the child of sample application.

&lt;span class="nv"&gt;$ &lt;/span&gt;curl http://localhost:5972/child/grandchild
Hello from the grandchild of sample application.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the syntax remains the same all the way down.  You just worry about passing things to the next link in the chain, and not about what the whole chain looks like.  As I needed to do so when developing this approach, I included the passing of a top-level config object as an example of how the chaining ideally works.&lt;/p&gt;
&lt;p&gt;Just in case you'd like to try it out on your own, I've published &lt;a href="https://github.com/the-t-in-rtf/express-module-tutorial"&gt;the source for this tutorial on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;A few more notes...&lt;/h1&gt;
&lt;p&gt;Here are a few things I found helpful in using this technique to modularize my existing express app.&lt;/p&gt;
&lt;p&gt;The new router object supports the same HTTP method shortcuts as the app object in express, so you can adapt old code by replacing your old app variable with a router in many cases.  The only exception is the DELETE method, which is aliased to app.del, but is available as router.delete.  The latter makes more sense anyway, as it actually matches the HTTP method.&lt;/p&gt;
&lt;p&gt;Also, although not pictured here, I have also seen modules that use an express "app" object instead of a router.  That approach works fine in 4.x, and has the added benefit of letting you easily use another templating language in a module without rolling your own.&lt;/p&gt;
&lt;p&gt;As a final caveat, upgrading to Express 4.x is not all that difficult, but does require some follow through.  For starters, a lot of modules have been moved out of express/connect, which means you have to explicitly bring them in.  For a good primer, check out this page:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://scotch.io/bar-talk/expressjs-4-0-new-features-and-upgrading-from-3-0"&gt;http://scotch.io/bar-talk/expressjs-4-0-new-features-and-upgrading-from-3-0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can also read the links provided when you try to run express with an old module, which are pretty descriptive, and link to documentation.  If you follow the right link, there's even a quick list of equivalents for the old built-ins:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/senchalabs/connect/blob/master/Readme.md#middleware"&gt;https://github.com/senchalabs/connect/blob/master/Readme.md#middleware&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Anyway, I hope that's useful for people who are also trying to work with nested modules in express.&lt;/p&gt;</content><category term="Express"></category></entry><entry><title>Relationships in CouchDb: It's Complicated</title><link href="http://the-t-in-rtf.github.io/relationships-complicated.html" rel="alternate"></link><published>2014-04-24T13:00:00+02:00</published><updated>2014-04-24T13:00:00+02:00</updated><author><name>Tony Atkins &lt;tony@raisingthefloor.org&gt;</name></author><id>tag:the-t-in-rtf.github.io,2014-04-24:/relationships-complicated.html</id><summary type="html">&lt;p&gt;Couch is great for somethings, but not at relationships.  This post describes how we can have both Couch and relationships.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;The Common Tools Registry is All About Relationships&lt;/h1&gt;
&lt;p&gt;One of the &lt;a href="wiki.gpii.net/index.php/Common_Terms_Registry"&gt;requirements&lt;/a&gt; for the &lt;a href="https://terms.raisingthefloor.org/"&gt;Common Terms Registry&lt;/a&gt; is that we store records in a flat format.  For this, &lt;a href="http://couchdb.apache.org/"&gt;CouchDb&lt;/a&gt; is perfect.&lt;/p&gt;
&lt;p&gt;However, another core requirement is that we clearly represent the relationship between standard terms and variations on those terms (aliases and translations, for example).  This is not something CouchDb is good at handling.&lt;/p&gt;
&lt;p&gt;There is &lt;a href="http://www.cmlenz.net/archives/2007/10/couchdb-joins"&gt;a blog article by Christopher Lenz&lt;/a&gt; that goes over a few strategies to handle relationships in CouchDb.  We took that as our starting point, tried a few approaches in depth, and ended up using a combination of CouchDb, Lucene, and Express to meet all of our requirements.&lt;/p&gt;
&lt;h1&gt;Our Requirements&lt;/h1&gt;
&lt;p&gt;So, what are our requirements as regards relationships?  We need to be able to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make it easy to find a standard term and its variations all at once.&lt;/li&gt;
&lt;li&gt;Ensure that the relationship is valid, i.e. that the "parent" record actually exists.&lt;/li&gt;
&lt;li&gt;Preserve the relationship when either the parent or the child is updated.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'll start with the second two, which are a bit simpler to describe.&lt;/p&gt;
&lt;h2&gt;Referential Integrity&lt;/h2&gt;
&lt;p&gt;In SQL, this would be simply a matter of defining a foreign key constraint.  Once that's done, it would not be possible to either create a link to a non-existent record or to delete a record that other records refer to.&lt;/p&gt;
&lt;p&gt;Couchdb helpfully provides &lt;a href="https://wiki.apache.org/couchdb/Document_Update_Validation"&gt;a mechanism to validate records as they are added, updated or deleted&lt;/a&gt;.  Couchdb does not, however, provide a means to check for the existence of a related record, which means that we can't provide either of the safety checks that a foreign key constraint provides.&lt;/p&gt;
&lt;p&gt;Our solution to this is to have &lt;a href="expressjs.com"&gt;Express&lt;/a&gt; handle the adding, editing, and deleting of records.  Express can perform the necessary checks when manipulating both child and parent records.&lt;/p&gt;
&lt;h2&gt;Preserving the Relationship&lt;/h2&gt;
&lt;p&gt;Our initial approach was to store the list of child records in the parent record (see "cmlenz" blog for details).  This makes it easy to search for standard terms based on words mentioned in a variation on that term.  However, it introduces serious drawbacks when editing both parent and child records.&lt;/p&gt;
&lt;p&gt;When editing a child record, if you change the link to the parent record, you need to regenerate the child data for both the old and the new parent record.  This means you may have to make as many as three updates for an edit.&lt;/p&gt;
&lt;p&gt;When editing a parent record, you have to make sure to preserve the current child data.  This is certainly possible, but introduces unnecessary complexity.  If you allow changes to the key used to link records, you also need to trigger an update for all child records, which is a much more open ended set of cascading updates.&lt;/p&gt;
&lt;p&gt;To solve both problems, we will rely on Express to help us disentangle the data as it is stored in Couch from the format we deliver via our REST interfaces. That's covered in detail below, to summarize as it relates to preserving the relationship, the key is that only the child record actually stores a link to the parent record, and that link is validated when the record is added or updated.&lt;/p&gt;
&lt;h2&gt;Enabling reasonable searching using a combined record format&lt;/h2&gt;
&lt;p&gt;If we are looking for settings related to "color", we also want to see settings related to "colour".  More importantly, we want to know which is the standard term, and which is the alias.  We will not have a single field that has only the word "color" or "colour" in it, so we need full text searching of a range of fields (label, description, etc.).&lt;/p&gt;
&lt;p&gt;The most obvious choice for full text searching is &lt;a href="https://github.com/rnewson/couchdb-lucene"&gt;CouchDb Lucene&lt;/a&gt;, which brings the power of &lt;a href="https://lucene.apache.org/"&gt;Lucene&lt;/a&gt; to Couch.  Lucene indexes the raw records directly with hints from a particular type of design document.  This means that it will return search results that are a mix of parent and child records, ordered by how well they match the search terms provided by the user, or whatever sort terms the user provides.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Diagram of record format presented by Lucene." src="/images/2014-04-24-lucene-diagram.png"&gt;&lt;/p&gt;
&lt;p&gt;We need to convert this to a list of standard terms that include their child records.  To do this, we use Express to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Execute the requested search.&lt;/li&gt;
&lt;li&gt;Retrieve the underlying record data for the search results.&lt;/li&gt;
&lt;li&gt;Knit together the mixed list of parent and child records into a unique list of parent records.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The output will look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Diagram of final record format as presented by Express." src="/images/2014-04-24-express-diagram.png"&gt;&lt;/p&gt;
&lt;h3&gt;Sorting&lt;/h3&gt;
&lt;p&gt;Because only Express has access to the final format, it has to handle sorting and paging.&lt;/p&gt;
&lt;p&gt;To take advantage of the sorting in Lucene, we apply two simple rules as we evolve the raw search results:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If a child record appears in the search results, we display the parent record in its place.&lt;/li&gt;
&lt;li&gt;If a parent record (or its children) appear in multiple places in the search results, we only display the first match.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Paging&lt;/h3&gt;
&lt;p&gt;That still leaves us with the problem of paging results.  Lucene doesn't know about the final order or record count, so it can't handle the paging.  Again, we handle this in Express.  In the proof of concept work done so far, we generate the full list of results every time and return only the requested slice of that set.  For the real implementation, we will cache the search results using a library like &lt;a href="https://www.npmjs.org/package/node-cache"&gt;node-cache&lt;/a&gt;.  As we have two lookups, I would propose two caches:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;For individual searches, we would cache the search results returned by Lucene under the full query string (or hashed equivalent).  Those search results would only contain a list of matching uniqueIds for the parent record.&lt;/li&gt;
&lt;li&gt;We would cache parent records by uniqueIds.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With that approach, we can check for cache misses for just the paged set of results and make a single call to look up and cache all of the misses.&lt;/p&gt;
&lt;p&gt;This should limit the amount of memory used by the caches and ensure that only one instance of each parent record is stored in the cache at a time.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Why am I writing this down (besides the fact that my shoulder angel told me to)?&lt;/p&gt;
&lt;p&gt;Because we want feedback on whether this is a sane and complete approach before we go much further with it.  Please comment if you have ideas about how to do what we're trying to do.&lt;/p&gt;</content><category term="Couchdb"></category><category term="Express"></category><category term="Lucene"></category></entry><entry><title>Why Pelican?</title><link href="http://the-t-in-rtf.github.io/why-pelican.html" rel="alternate"></link><published>2014-01-13T23:00:00+01:00</published><updated>2014-01-13T23:00:00+01:00</updated><author><name>Tony Atkins &lt;tony@raisingthefloor.org&gt;</name></author><id>tag:the-t-in-rtf.github.io,2014-01-13:/why-pelican.html</id><summary type="html">&lt;p&gt;So, why did I pick Pelican for this site?  Read on for a brief bit of background.&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are blogs used by the team I'm working with, but in talking with Avtar, he was suggesting that they are not happy with their current solution and are exploring static site generation tools.&lt;/p&gt;
&lt;p&gt;Static site generation tools give some great options for building a full web site from a bit of content and a few template files, and for refactoring an entire site easily to suit changing requirements.&lt;/p&gt;
&lt;p&gt;Avtar recommended &lt;a href="http://blog.getpelican.com/" title="Pelican"&gt;Pelican&lt;/a&gt;, a content generation tool written in Python.  Before committing, I wanted to review the full range of options to see what suited me best.&lt;/p&gt;
&lt;p&gt;In my initial research, I found &lt;a href="http://staticsitegenerators.net/" title="Static Site Generators"&gt;Static Site Generators&lt;/a&gt;, a site that includes both a listing of the site generators out there as well as the raw JSON data used to generate the site.  The analyst in me loves getting access to the raw data, although I ended up mostly sticking to their simple sortable table.&lt;/p&gt;
&lt;p&gt;I was looking for something lightweight, that let me get the most for the least effort.  I didn't want to fight the template language or data formatting conventions too much.  I also wanted something with a good theme system, that I could see myself adapting for use with our &lt;a href="http://fluidproject.org/products/infusion/" title="Fluid component library"&gt;Fluid component library&lt;/a&gt; down the road.&lt;/p&gt;
&lt;p&gt;Since the list is over two hundred entries long, I let the wisdom of the crowd do my first cull for me and sorted by the number of stars each solution had received.  I worked my way down, skipping now and then if I saw something that piqued my interest or that I had already heard of.  I read up on &lt;a href="http://harpjs.com/" title="Harp"&gt;Harp&lt;/a&gt;, &lt;a href="http://wintersmith.io/" title="WinterSmith"&gt;WinterSmith&lt;/a&gt;, &lt;a href="http://laktek.github.com/punch" title="Punch"&gt;Punch&lt;/a&gt;, and others.  I looked through their available template languages (no Jade, please), their conventions for storing blog and page content, the size of their community, the language they were based on.&lt;/p&gt;
&lt;p&gt;I ended up finally coming back to Pelican, just as Avtar had recommended.&lt;/p&gt;
&lt;p&gt;Why commit to Pelican?  Even though I like its features and overall ease of use, ultimately I chose Pelican because of its community.  As I said, support for themes was one of my key criteria.  Of the top tools I tried, Pelican was the only one I saw that not only supported themes, but that had a clear community of people contributing themes, and a showcase for those themes.&lt;/p&gt;
&lt;p&gt;That tells me that care not only about features, but about how people use them, about showcasing the work of their community.  Want confirmation?  Check out &lt;a href="https://github.com/getpelican/pelican-themes/graphs/contributors" title="the graph of contributors"&gt;the graph of contributors&lt;/a&gt;.  They have a steady stream of people keeping the software alive.&lt;/p&gt;
&lt;p&gt;Once they had me, I was impressed with the quality of their documentation and the polish of their bundled tools.  I encountered only small glitches, and those were either obvious or easily Googleable.&lt;/p&gt;
&lt;p&gt;That's basically it.  Convince me your project is alive, and don't turn me off too badly as I'm getting started.&lt;/p&gt;</content><category term="HTML"></category></entry><entry><title>Hello, everyone...</title><link href="http://the-t-in-rtf.github.io/hello-everyone.html" rel="alternate"></link><published>2014-01-12T20:15:00+01:00</published><updated>2014-01-12T20:15:00+01:00</updated><author><name>Tony Atkins &lt;tony@raisingthefloor.org&gt;</name></author><id>tag:the-t-in-rtf.github.io,2014-01-12:/hello-everyone.html</id><summary type="html">&lt;p&gt;Hello, everyone...&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello, everyone.  I've just started working with &lt;a href="http://raisingthefloor.org/" title="Raising the Floor"&gt;Raising the Floor&lt;/a&gt;.  I'm currently working on the &lt;a href="http://wiki.gpii.net/index.php/Common_Terms_Registry" title="Common Terms Registry"&gt;Common Terms Registry&lt;/a&gt;, and will soon be working on the &lt;a href="http://wiki.gpii.net/index.php/Unified_Listing" title="Unified Listing"&gt;Unified Listing&lt;/a&gt;.  I will be using this blog to share things I learn as part of my journey with the team.&lt;/p&gt;</content></entry></feed>